// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: upi.proto

package magneto

import (
	context "context"
	upi "github.com/magneto/upi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpiClient is the client API for Upi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpiClient interface {
	GetListedAccountProviders(ctx context.Context, in *upi.GetListedAccountProvidersRequest, opts ...grpc.CallOption) (*upi.GetListedAccountProvidersResponse, error)
	UpdateDeviceBinding(ctx context.Context, in *upi.UpdateDeviceBindingRequest, opts ...grpc.CallOption) (*upi.UpdateDeviceBindingResponse, error)
	GetAvailableVPA(ctx context.Context, in *upi.GetAvailableVPARequest, opts ...grpc.CallOption) (*upi.GetAvailableVPAResponse, error)
	InitiateTransaction(ctx context.Context, in *upi.InitiateTransactionRequest, opts ...grpc.CallOption) (*upi.InitiateTransactionResponse, error)
	AddAccount(ctx context.Context, in *upi.AddAccountRequest, opts ...grpc.CallOption) (*upi.AddAccountResponse, error)
	GetProfile(ctx context.Context, in *upi.GetProfileRequest, opts ...grpc.CallOption) (*upi.GetProfileResponse, error)
	ValidateVPA(ctx context.Context, in *upi.ValidateVPARequest, opts ...grpc.CallOption) (*upi.ValidateVPAResponse, error)
	GetAccountsByProvider(ctx context.Context, in *upi.GetAccountsByProviderRequest, opts ...grpc.CallOption) (*upi.GetAccountsByProviderResponse, error)
	CheckTransactionStatus(ctx context.Context, in *upi.CheckTransactionStatusRequest, opts ...grpc.CallOption) (*upi.CheckTransactionStatusResponse, error)
	BlockVPA(ctx context.Context, in *upi.BlockVPARequest, opts ...grpc.CallOption) (*upi.BlockVPAResponse, error)
	UnblockVPA(ctx context.Context, in *upi.UnblockVPARequest, opts ...grpc.CallOption) (*upi.UnblockVPAResponse, error)
	ListBlockedVPA(ctx context.Context, in *upi.ListBlockedVPARequest, opts ...grpc.CallOption) (*upi.ListBlockedVPAResponse, error)
	ValidateIFSC(ctx context.Context, in *upi.ValidateIFSCRequest, opts ...grpc.CallOption) (*upi.ValidateIFSCResponse, error)
	GetPendingCollectRequest(ctx context.Context, in *upi.PendingCollectRequest, opts ...grpc.CallOption) (*upi.PendingCollectResponse, error)
	GetTransactions(ctx context.Context, in *upi.GetTransactionsRequest, opts ...grpc.CallOption) (*upi.GetTransactionsResponse, error)
	GetRecentContacts(ctx context.Context, in *upi.GetRecentContactsRequest, opts ...grpc.CallOption) (*upi.GetRecentContactsResponse, error)
	DeregisterProfile(ctx context.Context, in *upi.DeregisterProfileReqeust, opts ...grpc.CallOption) (*upi.DeregisterProfileResponse, error)
	UpiNumberOperations(ctx context.Context, in *upi.UpiNumberOperationsRequest, opts ...grpc.CallOption) (*upi.UpiNumberOperationsResponse, error)
	GetAllMandates(ctx context.Context, in *upi.GetAllMandatesRequest, opts ...grpc.CallOption) (*upi.GetAllMandatesResponse, error)
	GetMandateDetails(ctx context.Context, in *upi.GetMandatesDetailsRequest, opts ...grpc.CallOption) (*upi.GetMandateDetailsReponse, error)
	GetUpiNumbers(ctx context.Context, in *upi.GetUpiNumbersRequest, opts ...grpc.CallOption) (*upi.GetUpiNumbersResponse, error)
	InitiateMandateAction(ctx context.Context, in *upi.InitiateMandateActionRequest, opts ...grpc.CallOption) (*upi.InitiateMandateActionResponse, error)
	CheckMandateStatus(ctx context.Context, in *upi.CheckTransactionStatusRequest, opts ...grpc.CallOption) (*upi.CheckTransactionStatusResponse, error)
	DeclineMandate(ctx context.Context, in *upi.DeclineMandateRequest, opts ...grpc.CallOption) (*upi.DeclineMandateResponse, error)
	GetMandateHistory(ctx context.Context, in *upi.GetMandateHistoryRequest, opts ...grpc.CallOption) (*upi.GetMandateHistoryResponse, error)
	GetAllIpoMandates(ctx context.Context, in *upi.GetAllMandatesRequest, opts ...grpc.CallOption) (*upi.GetAllMandatesResponse, error)
	CheckDeregisterPermission(ctx context.Context, in *upi.CheckDeregisterPermissionRequest, opts ...grpc.CallOption) (*upi.CheckDeregisterPermissionResponse, error)
}

type upiClient struct {
	cc grpc.ClientConnInterface
}

func NewUpiClient(cc grpc.ClientConnInterface) UpiClient {
	return &upiClient{cc}
}

func (c *upiClient) GetListedAccountProviders(ctx context.Context, in *upi.GetListedAccountProvidersRequest, opts ...grpc.CallOption) (*upi.GetListedAccountProvidersResponse, error) {
	out := new(upi.GetListedAccountProvidersResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getListedAccountProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) UpdateDeviceBinding(ctx context.Context, in *upi.UpdateDeviceBindingRequest, opts ...grpc.CallOption) (*upi.UpdateDeviceBindingResponse, error) {
	out := new(upi.UpdateDeviceBindingResponse)
	err := c.cc.Invoke(ctx, "/service.upi/updateDeviceBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetAvailableVPA(ctx context.Context, in *upi.GetAvailableVPARequest, opts ...grpc.CallOption) (*upi.GetAvailableVPAResponse, error) {
	out := new(upi.GetAvailableVPAResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getAvailableVPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) InitiateTransaction(ctx context.Context, in *upi.InitiateTransactionRequest, opts ...grpc.CallOption) (*upi.InitiateTransactionResponse, error) {
	out := new(upi.InitiateTransactionResponse)
	err := c.cc.Invoke(ctx, "/service.upi/initiateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) AddAccount(ctx context.Context, in *upi.AddAccountRequest, opts ...grpc.CallOption) (*upi.AddAccountResponse, error) {
	out := new(upi.AddAccountResponse)
	err := c.cc.Invoke(ctx, "/service.upi/addAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetProfile(ctx context.Context, in *upi.GetProfileRequest, opts ...grpc.CallOption) (*upi.GetProfileResponse, error) {
	out := new(upi.GetProfileResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) ValidateVPA(ctx context.Context, in *upi.ValidateVPARequest, opts ...grpc.CallOption) (*upi.ValidateVPAResponse, error) {
	out := new(upi.ValidateVPAResponse)
	err := c.cc.Invoke(ctx, "/service.upi/validateVPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetAccountsByProvider(ctx context.Context, in *upi.GetAccountsByProviderRequest, opts ...grpc.CallOption) (*upi.GetAccountsByProviderResponse, error) {
	out := new(upi.GetAccountsByProviderResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getAccountsByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) CheckTransactionStatus(ctx context.Context, in *upi.CheckTransactionStatusRequest, opts ...grpc.CallOption) (*upi.CheckTransactionStatusResponse, error) {
	out := new(upi.CheckTransactionStatusResponse)
	err := c.cc.Invoke(ctx, "/service.upi/checkTransactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) BlockVPA(ctx context.Context, in *upi.BlockVPARequest, opts ...grpc.CallOption) (*upi.BlockVPAResponse, error) {
	out := new(upi.BlockVPAResponse)
	err := c.cc.Invoke(ctx, "/service.upi/blockVPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) UnblockVPA(ctx context.Context, in *upi.UnblockVPARequest, opts ...grpc.CallOption) (*upi.UnblockVPAResponse, error) {
	out := new(upi.UnblockVPAResponse)
	err := c.cc.Invoke(ctx, "/service.upi/unblockVPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) ListBlockedVPA(ctx context.Context, in *upi.ListBlockedVPARequest, opts ...grpc.CallOption) (*upi.ListBlockedVPAResponse, error) {
	out := new(upi.ListBlockedVPAResponse)
	err := c.cc.Invoke(ctx, "/service.upi/listBlockedVPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) ValidateIFSC(ctx context.Context, in *upi.ValidateIFSCRequest, opts ...grpc.CallOption) (*upi.ValidateIFSCResponse, error) {
	out := new(upi.ValidateIFSCResponse)
	err := c.cc.Invoke(ctx, "/service.upi/validateIFSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetPendingCollectRequest(ctx context.Context, in *upi.PendingCollectRequest, opts ...grpc.CallOption) (*upi.PendingCollectResponse, error) {
	out := new(upi.PendingCollectResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getPendingCollectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetTransactions(ctx context.Context, in *upi.GetTransactionsRequest, opts ...grpc.CallOption) (*upi.GetTransactionsResponse, error) {
	out := new(upi.GetTransactionsResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetRecentContacts(ctx context.Context, in *upi.GetRecentContactsRequest, opts ...grpc.CallOption) (*upi.GetRecentContactsResponse, error) {
	out := new(upi.GetRecentContactsResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getRecentContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) DeregisterProfile(ctx context.Context, in *upi.DeregisterProfileReqeust, opts ...grpc.CallOption) (*upi.DeregisterProfileResponse, error) {
	out := new(upi.DeregisterProfileResponse)
	err := c.cc.Invoke(ctx, "/service.upi/deregisterProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) UpiNumberOperations(ctx context.Context, in *upi.UpiNumberOperationsRequest, opts ...grpc.CallOption) (*upi.UpiNumberOperationsResponse, error) {
	out := new(upi.UpiNumberOperationsResponse)
	err := c.cc.Invoke(ctx, "/service.upi/upiNumberOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetAllMandates(ctx context.Context, in *upi.GetAllMandatesRequest, opts ...grpc.CallOption) (*upi.GetAllMandatesResponse, error) {
	out := new(upi.GetAllMandatesResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getAllMandates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetMandateDetails(ctx context.Context, in *upi.GetMandatesDetailsRequest, opts ...grpc.CallOption) (*upi.GetMandateDetailsReponse, error) {
	out := new(upi.GetMandateDetailsReponse)
	err := c.cc.Invoke(ctx, "/service.upi/getMandateDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetUpiNumbers(ctx context.Context, in *upi.GetUpiNumbersRequest, opts ...grpc.CallOption) (*upi.GetUpiNumbersResponse, error) {
	out := new(upi.GetUpiNumbersResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getUpiNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) InitiateMandateAction(ctx context.Context, in *upi.InitiateMandateActionRequest, opts ...grpc.CallOption) (*upi.InitiateMandateActionResponse, error) {
	out := new(upi.InitiateMandateActionResponse)
	err := c.cc.Invoke(ctx, "/service.upi/initiateMandateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) CheckMandateStatus(ctx context.Context, in *upi.CheckTransactionStatusRequest, opts ...grpc.CallOption) (*upi.CheckTransactionStatusResponse, error) {
	out := new(upi.CheckTransactionStatusResponse)
	err := c.cc.Invoke(ctx, "/service.upi/checkMandateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) DeclineMandate(ctx context.Context, in *upi.DeclineMandateRequest, opts ...grpc.CallOption) (*upi.DeclineMandateResponse, error) {
	out := new(upi.DeclineMandateResponse)
	err := c.cc.Invoke(ctx, "/service.upi/declineMandate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetMandateHistory(ctx context.Context, in *upi.GetMandateHistoryRequest, opts ...grpc.CallOption) (*upi.GetMandateHistoryResponse, error) {
	out := new(upi.GetMandateHistoryResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getMandateHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) GetAllIpoMandates(ctx context.Context, in *upi.GetAllMandatesRequest, opts ...grpc.CallOption) (*upi.GetAllMandatesResponse, error) {
	out := new(upi.GetAllMandatesResponse)
	err := c.cc.Invoke(ctx, "/service.upi/getAllIpoMandates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiClient) CheckDeregisterPermission(ctx context.Context, in *upi.CheckDeregisterPermissionRequest, opts ...grpc.CallOption) (*upi.CheckDeregisterPermissionResponse, error) {
	out := new(upi.CheckDeregisterPermissionResponse)
	err := c.cc.Invoke(ctx, "/service.upi/checkDeregisterPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpiServer is the server API for Upi service.
// All implementations must embed UnimplementedUpiServer
// for forward compatibility
type UpiServer interface {
	GetListedAccountProviders(context.Context, *upi.GetListedAccountProvidersRequest) (*upi.GetListedAccountProvidersResponse, error)
	UpdateDeviceBinding(context.Context, *upi.UpdateDeviceBindingRequest) (*upi.UpdateDeviceBindingResponse, error)
	GetAvailableVPA(context.Context, *upi.GetAvailableVPARequest) (*upi.GetAvailableVPAResponse, error)
	InitiateTransaction(context.Context, *upi.InitiateTransactionRequest) (*upi.InitiateTransactionResponse, error)
	AddAccount(context.Context, *upi.AddAccountRequest) (*upi.AddAccountResponse, error)
	GetProfile(context.Context, *upi.GetProfileRequest) (*upi.GetProfileResponse, error)
	ValidateVPA(context.Context, *upi.ValidateVPARequest) (*upi.ValidateVPAResponse, error)
	GetAccountsByProvider(context.Context, *upi.GetAccountsByProviderRequest) (*upi.GetAccountsByProviderResponse, error)
	CheckTransactionStatus(context.Context, *upi.CheckTransactionStatusRequest) (*upi.CheckTransactionStatusResponse, error)
	BlockVPA(context.Context, *upi.BlockVPARequest) (*upi.BlockVPAResponse, error)
	UnblockVPA(context.Context, *upi.UnblockVPARequest) (*upi.UnblockVPAResponse, error)
	ListBlockedVPA(context.Context, *upi.ListBlockedVPARequest) (*upi.ListBlockedVPAResponse, error)
	ValidateIFSC(context.Context, *upi.ValidateIFSCRequest) (*upi.ValidateIFSCResponse, error)
	GetPendingCollectRequest(context.Context, *upi.PendingCollectRequest) (*upi.PendingCollectResponse, error)
	GetTransactions(context.Context, *upi.GetTransactionsRequest) (*upi.GetTransactionsResponse, error)
	GetRecentContacts(context.Context, *upi.GetRecentContactsRequest) (*upi.GetRecentContactsResponse, error)
	DeregisterProfile(context.Context, *upi.DeregisterProfileReqeust) (*upi.DeregisterProfileResponse, error)
	UpiNumberOperations(context.Context, *upi.UpiNumberOperationsRequest) (*upi.UpiNumberOperationsResponse, error)
	GetAllMandates(context.Context, *upi.GetAllMandatesRequest) (*upi.GetAllMandatesResponse, error)
	GetMandateDetails(context.Context, *upi.GetMandatesDetailsRequest) (*upi.GetMandateDetailsReponse, error)
	GetUpiNumbers(context.Context, *upi.GetUpiNumbersRequest) (*upi.GetUpiNumbersResponse, error)
	InitiateMandateAction(context.Context, *upi.InitiateMandateActionRequest) (*upi.InitiateMandateActionResponse, error)
	CheckMandateStatus(context.Context, *upi.CheckTransactionStatusRequest) (*upi.CheckTransactionStatusResponse, error)
	DeclineMandate(context.Context, *upi.DeclineMandateRequest) (*upi.DeclineMandateResponse, error)
	GetMandateHistory(context.Context, *upi.GetMandateHistoryRequest) (*upi.GetMandateHistoryResponse, error)
	GetAllIpoMandates(context.Context, *upi.GetAllMandatesRequest) (*upi.GetAllMandatesResponse, error)
	CheckDeregisterPermission(context.Context, *upi.CheckDeregisterPermissionRequest) (*upi.CheckDeregisterPermissionResponse, error)
	mustEmbedUnimplementedUpiServer()
}

// UnimplementedUpiServer must be embedded to have forward compatible implementations.
type UnimplementedUpiServer struct {
}

func (UnimplementedUpiServer) GetListedAccountProviders(context.Context, *upi.GetListedAccountProvidersRequest) (*upi.GetListedAccountProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListedAccountProviders not implemented")
}
func (UnimplementedUpiServer) UpdateDeviceBinding(context.Context, *upi.UpdateDeviceBindingRequest) (*upi.UpdateDeviceBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceBinding not implemented")
}
func (UnimplementedUpiServer) GetAvailableVPA(context.Context, *upi.GetAvailableVPARequest) (*upi.GetAvailableVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableVPA not implemented")
}
func (UnimplementedUpiServer) InitiateTransaction(context.Context, *upi.InitiateTransactionRequest) (*upi.InitiateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTransaction not implemented")
}
func (UnimplementedUpiServer) AddAccount(context.Context, *upi.AddAccountRequest) (*upi.AddAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedUpiServer) GetProfile(context.Context, *upi.GetProfileRequest) (*upi.GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUpiServer) ValidateVPA(context.Context, *upi.ValidateVPARequest) (*upi.ValidateVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateVPA not implemented")
}
func (UnimplementedUpiServer) GetAccountsByProvider(context.Context, *upi.GetAccountsByProviderRequest) (*upi.GetAccountsByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsByProvider not implemented")
}
func (UnimplementedUpiServer) CheckTransactionStatus(context.Context, *upi.CheckTransactionStatusRequest) (*upi.CheckTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTransactionStatus not implemented")
}
func (UnimplementedUpiServer) BlockVPA(context.Context, *upi.BlockVPARequest) (*upi.BlockVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockVPA not implemented")
}
func (UnimplementedUpiServer) UnblockVPA(context.Context, *upi.UnblockVPARequest) (*upi.UnblockVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockVPA not implemented")
}
func (UnimplementedUpiServer) ListBlockedVPA(context.Context, *upi.ListBlockedVPARequest) (*upi.ListBlockedVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockedVPA not implemented")
}
func (UnimplementedUpiServer) ValidateIFSC(context.Context, *upi.ValidateIFSCRequest) (*upi.ValidateIFSCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateIFSC not implemented")
}
func (UnimplementedUpiServer) GetPendingCollectRequest(context.Context, *upi.PendingCollectRequest) (*upi.PendingCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingCollectRequest not implemented")
}
func (UnimplementedUpiServer) GetTransactions(context.Context, *upi.GetTransactionsRequest) (*upi.GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedUpiServer) GetRecentContacts(context.Context, *upi.GetRecentContactsRequest) (*upi.GetRecentContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentContacts not implemented")
}
func (UnimplementedUpiServer) DeregisterProfile(context.Context, *upi.DeregisterProfileReqeust) (*upi.DeregisterProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterProfile not implemented")
}
func (UnimplementedUpiServer) UpiNumberOperations(context.Context, *upi.UpiNumberOperationsRequest) (*upi.UpiNumberOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpiNumberOperations not implemented")
}
func (UnimplementedUpiServer) GetAllMandates(context.Context, *upi.GetAllMandatesRequest) (*upi.GetAllMandatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMandates not implemented")
}
func (UnimplementedUpiServer) GetMandateDetails(context.Context, *upi.GetMandatesDetailsRequest) (*upi.GetMandateDetailsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMandateDetails not implemented")
}
func (UnimplementedUpiServer) GetUpiNumbers(context.Context, *upi.GetUpiNumbersRequest) (*upi.GetUpiNumbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpiNumbers not implemented")
}
func (UnimplementedUpiServer) InitiateMandateAction(context.Context, *upi.InitiateMandateActionRequest) (*upi.InitiateMandateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateMandateAction not implemented")
}
func (UnimplementedUpiServer) CheckMandateStatus(context.Context, *upi.CheckTransactionStatusRequest) (*upi.CheckTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMandateStatus not implemented")
}
func (UnimplementedUpiServer) DeclineMandate(context.Context, *upi.DeclineMandateRequest) (*upi.DeclineMandateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineMandate not implemented")
}
func (UnimplementedUpiServer) GetMandateHistory(context.Context, *upi.GetMandateHistoryRequest) (*upi.GetMandateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMandateHistory not implemented")
}
func (UnimplementedUpiServer) GetAllIpoMandates(context.Context, *upi.GetAllMandatesRequest) (*upi.GetAllMandatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIpoMandates not implemented")
}
func (UnimplementedUpiServer) CheckDeregisterPermission(context.Context, *upi.CheckDeregisterPermissionRequest) (*upi.CheckDeregisterPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeregisterPermission not implemented")
}
func (UnimplementedUpiServer) mustEmbedUnimplementedUpiServer() {}

// UnsafeUpiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpiServer will
// result in compilation errors.
type UnsafeUpiServer interface {
	mustEmbedUnimplementedUpiServer()
}

func RegisterUpiServer(s grpc.ServiceRegistrar, srv UpiServer) {
	s.RegisterService(&Upi_ServiceDesc, srv)
}

func _Upi_GetListedAccountProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetListedAccountProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetListedAccountProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getListedAccountProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetListedAccountProviders(ctx, req.(*upi.GetListedAccountProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_UpdateDeviceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.UpdateDeviceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).UpdateDeviceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/updateDeviceBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).UpdateDeviceBinding(ctx, req.(*upi.UpdateDeviceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetAvailableVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetAvailableVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetAvailableVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getAvailableVPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetAvailableVPA(ctx, req.(*upi.GetAvailableVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_InitiateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.InitiateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).InitiateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/initiateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).InitiateTransaction(ctx, req.(*upi.InitiateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.AddAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/addAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).AddAccount(ctx, req.(*upi.AddAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetProfile(ctx, req.(*upi.GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_ValidateVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.ValidateVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).ValidateVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/validateVPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).ValidateVPA(ctx, req.(*upi.ValidateVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetAccountsByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetAccountsByProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetAccountsByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getAccountsByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetAccountsByProvider(ctx, req.(*upi.GetAccountsByProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_CheckTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.CheckTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).CheckTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/checkTransactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).CheckTransactionStatus(ctx, req.(*upi.CheckTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_BlockVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.BlockVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).BlockVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/blockVPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).BlockVPA(ctx, req.(*upi.BlockVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_UnblockVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.UnblockVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).UnblockVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/unblockVPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).UnblockVPA(ctx, req.(*upi.UnblockVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_ListBlockedVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.ListBlockedVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).ListBlockedVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/listBlockedVPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).ListBlockedVPA(ctx, req.(*upi.ListBlockedVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_ValidateIFSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.ValidateIFSCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).ValidateIFSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/validateIFSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).ValidateIFSC(ctx, req.(*upi.ValidateIFSCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetPendingCollectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.PendingCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetPendingCollectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getPendingCollectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetPendingCollectRequest(ctx, req.(*upi.PendingCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetTransactions(ctx, req.(*upi.GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetRecentContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetRecentContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetRecentContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getRecentContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetRecentContacts(ctx, req.(*upi.GetRecentContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_DeregisterProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.DeregisterProfileReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).DeregisterProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/deregisterProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).DeregisterProfile(ctx, req.(*upi.DeregisterProfileReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_UpiNumberOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.UpiNumberOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).UpiNumberOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/upiNumberOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).UpiNumberOperations(ctx, req.(*upi.UpiNumberOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetAllMandates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetAllMandatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetAllMandates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getAllMandates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetAllMandates(ctx, req.(*upi.GetAllMandatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetMandateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetMandatesDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetMandateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getMandateDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetMandateDetails(ctx, req.(*upi.GetMandatesDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetUpiNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetUpiNumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetUpiNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getUpiNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetUpiNumbers(ctx, req.(*upi.GetUpiNumbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_InitiateMandateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.InitiateMandateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).InitiateMandateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/initiateMandateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).InitiateMandateAction(ctx, req.(*upi.InitiateMandateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_CheckMandateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.CheckTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).CheckMandateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/checkMandateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).CheckMandateStatus(ctx, req.(*upi.CheckTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_DeclineMandate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.DeclineMandateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).DeclineMandate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/declineMandate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).DeclineMandate(ctx, req.(*upi.DeclineMandateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetMandateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetMandateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetMandateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getMandateHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetMandateHistory(ctx, req.(*upi.GetMandateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_GetAllIpoMandates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.GetAllMandatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).GetAllIpoMandates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/getAllIpoMandates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).GetAllIpoMandates(ctx, req.(*upi.GetAllMandatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upi_CheckDeregisterPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(upi.CheckDeregisterPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiServer).CheckDeregisterPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.upi/checkDeregisterPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiServer).CheckDeregisterPermission(ctx, req.(*upi.CheckDeregisterPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Upi_ServiceDesc is the grpc.ServiceDesc for Upi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.upi",
	HandlerType: (*UpiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getListedAccountProviders",
			Handler:    _Upi_GetListedAccountProviders_Handler,
		},
		{
			MethodName: "updateDeviceBinding",
			Handler:    _Upi_UpdateDeviceBinding_Handler,
		},
		{
			MethodName: "getAvailableVPA",
			Handler:    _Upi_GetAvailableVPA_Handler,
		},
		{
			MethodName: "initiateTransaction",
			Handler:    _Upi_InitiateTransaction_Handler,
		},
		{
			MethodName: "addAccount",
			Handler:    _Upi_AddAccount_Handler,
		},
		{
			MethodName: "getProfile",
			Handler:    _Upi_GetProfile_Handler,
		},
		{
			MethodName: "validateVPA",
			Handler:    _Upi_ValidateVPA_Handler,
		},
		{
			MethodName: "getAccountsByProvider",
			Handler:    _Upi_GetAccountsByProvider_Handler,
		},
		{
			MethodName: "checkTransactionStatus",
			Handler:    _Upi_CheckTransactionStatus_Handler,
		},
		{
			MethodName: "blockVPA",
			Handler:    _Upi_BlockVPA_Handler,
		},
		{
			MethodName: "unblockVPA",
			Handler:    _Upi_UnblockVPA_Handler,
		},
		{
			MethodName: "listBlockedVPA",
			Handler:    _Upi_ListBlockedVPA_Handler,
		},
		{
			MethodName: "validateIFSC",
			Handler:    _Upi_ValidateIFSC_Handler,
		},
		{
			MethodName: "getPendingCollectRequest",
			Handler:    _Upi_GetPendingCollectRequest_Handler,
		},
		{
			MethodName: "getTransactions",
			Handler:    _Upi_GetTransactions_Handler,
		},
		{
			MethodName: "getRecentContacts",
			Handler:    _Upi_GetRecentContacts_Handler,
		},
		{
			MethodName: "deregisterProfile",
			Handler:    _Upi_DeregisterProfile_Handler,
		},
		{
			MethodName: "upiNumberOperations",
			Handler:    _Upi_UpiNumberOperations_Handler,
		},
		{
			MethodName: "getAllMandates",
			Handler:    _Upi_GetAllMandates_Handler,
		},
		{
			MethodName: "getMandateDetails",
			Handler:    _Upi_GetMandateDetails_Handler,
		},
		{
			MethodName: "getUpiNumbers",
			Handler:    _Upi_GetUpiNumbers_Handler,
		},
		{
			MethodName: "initiateMandateAction",
			Handler:    _Upi_InitiateMandateAction_Handler,
		},
		{
			MethodName: "checkMandateStatus",
			Handler:    _Upi_CheckMandateStatus_Handler,
		},
		{
			MethodName: "declineMandate",
			Handler:    _Upi_DeclineMandate_Handler,
		},
		{
			MethodName: "getMandateHistory",
			Handler:    _Upi_GetMandateHistory_Handler,
		},
		{
			MethodName: "getAllIpoMandates",
			Handler:    _Upi_GetAllIpoMandates_Handler,
		},
		{
			MethodName: "checkDeregisterPermission",
			Handler:    _Upi_CheckDeregisterPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upi.proto",
}
