// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: lamf.proto

package stashfin_com

import (
	context "context"
	lamf "github.com/stashfin2/grpc/stashfin.com/lamf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lamf_Validatelamfuser_FullMethodName   = "/service.lamf/validatelamfuser"
	Lamf_Submitlamfotp_FullMethodName      = "/service.lamf/submitlamfotp"
	Lamf_Getlamfloandetails_FullMethodName = "/service.lamf/getlamfloandetails"
)

// LamfClient is the client API for Lamf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LamfClient interface {
	Validatelamfuser(ctx context.Context, in *lamf.Request, opts ...grpc.CallOption) (*lamf.Response, error)
	Submitlamfotp(ctx context.Context, in *lamf.Request, opts ...grpc.CallOption) (*lamf.Response, error)
	Getlamfloandetails(ctx context.Context, in *lamf.Request, opts ...grpc.CallOption) (*lamf.Response, error)
}

type lamfClient struct {
	cc grpc.ClientConnInterface
}

func NewLamfClient(cc grpc.ClientConnInterface) LamfClient {
	return &lamfClient{cc}
}

func (c *lamfClient) Validatelamfuser(ctx context.Context, in *lamf.Request, opts ...grpc.CallOption) (*lamf.Response, error) {
	out := new(lamf.Response)
	err := c.cc.Invoke(ctx, Lamf_Validatelamfuser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lamfClient) Submitlamfotp(ctx context.Context, in *lamf.Request, opts ...grpc.CallOption) (*lamf.Response, error) {
	out := new(lamf.Response)
	err := c.cc.Invoke(ctx, Lamf_Submitlamfotp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lamfClient) Getlamfloandetails(ctx context.Context, in *lamf.Request, opts ...grpc.CallOption) (*lamf.Response, error) {
	out := new(lamf.Response)
	err := c.cc.Invoke(ctx, Lamf_Getlamfloandetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LamfServer is the server API for Lamf service.
// All implementations must embed UnimplementedLamfServer
// for forward compatibility
type LamfServer interface {
	Validatelamfuser(context.Context, *lamf.Request) (*lamf.Response, error)
	Submitlamfotp(context.Context, *lamf.Request) (*lamf.Response, error)
	Getlamfloandetails(context.Context, *lamf.Request) (*lamf.Response, error)
	mustEmbedUnimplementedLamfServer()
}

// UnimplementedLamfServer must be embedded to have forward compatible implementations.
type UnimplementedLamfServer struct {
}

func (UnimplementedLamfServer) Validatelamfuser(context.Context, *lamf.Request) (*lamf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validatelamfuser not implemented")
}
func (UnimplementedLamfServer) Submitlamfotp(context.Context, *lamf.Request) (*lamf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submitlamfotp not implemented")
}
func (UnimplementedLamfServer) Getlamfloandetails(context.Context, *lamf.Request) (*lamf.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getlamfloandetails not implemented")
}
func (UnimplementedLamfServer) mustEmbedUnimplementedLamfServer() {}

// UnsafeLamfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LamfServer will
// result in compilation errors.
type UnsafeLamfServer interface {
	mustEmbedUnimplementedLamfServer()
}

func RegisterLamfServer(s grpc.ServiceRegistrar, srv LamfServer) {
	s.RegisterService(&Lamf_ServiceDesc, srv)
}

func _Lamf_Validatelamfuser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LamfServer).Validatelamfuser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lamf_Validatelamfuser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LamfServer).Validatelamfuser(ctx, req.(*lamf.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lamf_Submitlamfotp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LamfServer).Submitlamfotp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lamf_Submitlamfotp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LamfServer).Submitlamfotp(ctx, req.(*lamf.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lamf_Getlamfloandetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LamfServer).Getlamfloandetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lamf_Getlamfloandetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LamfServer).Getlamfloandetails(ctx, req.(*lamf.Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Lamf_ServiceDesc is the grpc.ServiceDesc for Lamf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lamf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.lamf",
	HandlerType: (*LamfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "validatelamfuser",
			Handler:    _Lamf_Validatelamfuser_Handler,
		},
		{
			MethodName: "submitlamfotp",
			Handler:    _Lamf_Submitlamfotp_Handler,
		},
		{
			MethodName: "getlamfloandetails",
			Handler:    _Lamf_Getlamfloandetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lamf.proto",
}
