// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: customers.proto

package stashfin_com

import (
	context "context"
	customers "github.com/stashfin2/grpc/stashfin.com/customers"
	aa "github.com/stashfin2/grpc/stashfin.com/customers/aa"
	cb "github.com/stashfin2/grpc/stashfin.com/customers/cb"
	enach "github.com/stashfin2/grpc/stashfin.com/customers/enach"
	freedom "github.com/stashfin2/grpc/stashfin.com/customers/freedom"
	lamf "github.com/stashfin2/grpc/stashfin.com/customers/lamf"
	pd "github.com/stashfin2/grpc/stashfin.com/customers/pd"
	rpd "github.com/stashfin2/grpc/stashfin.com/customers/rpd"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Customers_SendOtp_FullMethodName                                 = "/service.customers/sendOtp"
	Customers_VerifyOtp_FullMethodName                               = "/service.customers/verifyOtp"
	Customers_Setmpin_FullMethodName                                 = "/service.customers/setmpin"
	Customers_VerifyMpin_FullMethodName                              = "/service.customers/verifyMpin"
	Customers_ChangeMpin_FullMethodName                              = "/service.customers/changeMpin"
	Customers_ForgotMpin_FullMethodName                              = "/service.customers/forgotMpin"
	Customers_ForgotMpinVerify_FullMethodName                        = "/service.customers/forgotMpinVerify"
	Customers_ProfileUpdatetnc_FullMethodName                        = "/service.customers/profileUpdatetnc"
	Customers_UpdateProfileBasic_FullMethodName                      = "/service.customers/updateProfileBasic"
	Customers_GetProfile_FullMethodName                              = "/service.customers/getProfile"
	Customers_GetStep_FullMethodName                                 = "/service.customers/getStep"
	Customers_SaveBasicDetails_FullMethodName                        = "/service.customers/saveBasicDetails"
	Customers_SaveUnlockLimit_FullMethodName                         = "/service.customers/saveUnlockLimit"
	Customers_SendOtptoPersonalEmail_FullMethodName                  = "/service.customers/sendOtptoPersonalEmail"
	Customers_VerifyOtptoPersonalEmail_FullMethodName                = "/service.customers/verifyOtptoPersonalEmail"
	Customers_GetCustomerById_FullMethodName                         = "/service.customers/getCustomerById"
	Customers_GetDashboard_FullMethodName                            = "/service.customers/getDashboard"
	Customers_GetDashboardMainCard_FullMethodName                    = "/service.customers/getDashboardMainCard"
	Customers_AddBankAccountDetails_FullMethodName                   = "/service.customers/addBankAccountDetails"
	Customers_GetBankAccountDetails_FullMethodName                   = "/service.customers/getBankAccountDetails"
	Customers_GetBasicInfo_FullMethodName                            = "/service.customers/getBasicInfo"
	Customers_GetProfessionalInfo_FullMethodName                     = "/service.customers/getProfessionalInfo"
	Customers_CreateCustomerReference_FullMethodName                 = "/service.customers/createCustomerReference"
	Customers_SendOtptoProfessionalEmail_FullMethodName              = "/service.customers/sendOtptoProfessionalEmail"
	Customers_VerifyOtptoProfessionalEmail_FullMethodName            = "/service.customers/verifyOtptoProfessionalEmail"
	Customers_GetAllStates_FullMethodName                            = "/service.customers/getAllStates"
	Customers_GetCitiesByStateId_FullMethodName                      = "/service.customers/getCitiesByStateId"
	Customers_GetDocumentList_FullMethodName                         = "/service.customers/getDocumentList"
	Customers_UpdateOkycTxn_FullMethodName                           = "/service.customers/updateOkycTxn"
	Customers_AddAddress_FullMethodName                              = "/service.customers/addAddress"
	Customers_UpdateDob_FullMethodName                               = "/service.customers/updateDob"
	Customers_ValidatePan_FullMethodName                             = "/service.customers/validatePan"
	Customers_DeleteProfile_FullMethodName                           = "/service.customers/deleteProfile"
	Customers_GetBankList_FullMethodName                             = "/service.customers/getBankList"
	Customers_AddSuspendedCustomer_FullMethodName                    = "/service.customers/addSuspendedCustomer"
	Customers_UpdatelocStatus_FullMethodName                         = "/service.customers/updatelocStatus"
	Customers_InitiateRequest_FullMethodName                         = "/service.customers/initiateRequest"
	Customers_AddUserApps_FullMethodName                             = "/service.customers/addUserApps"
	Customers_FetchRCProfile_FullMethodName                          = "/service.customers/fetchRCProfile"
	Customers_Disablempin_FullMethodName                             = "/service.customers/disablempin"
	Customers_UpdateMobileSendOtp_FullMethodName                     = "/service.customers/updateMobileSendOtp"
	Customers_Updatemobileverifyotp_FullMethodName                   = "/service.customers/updatemobileverifyotp"
	Customers_AddGstNumber_FullMethodName                            = "/service.customers/addGstNumber"
	Customers_GetSelfieeTxnId_FullMethodName                         = "/service.customers/getSelfieeTxnId"
	Customers_UpdateSelfieeTxn_FullMethodName                        = "/service.customers/updateSelfieeTxn"
	Customers_GetLimit_FullMethodName                                = "/service.customers/getLimit"
	Customers_SaveLimit_FullMethodName                               = "/service.customers/saveLimit"
	Customers_AddMoreDetails_FullMethodName                          = "/service.customers/addMoreDetails"
	Customers_UpdateVehicleNumber_FullMethodName                     = "/service.customers/updateVehicleNumber"
	Customers_UpdateDlNumber_FullMethodName                          = "/service.customers/updateDlNumber"
	Customers_SkipScreen_FullMethodName                              = "/service.customers/skipScreen"
	Customers_UpdateCustomerById_FullMethodName                      = "/service.customers/updateCustomerById"
	Customers_UploadDocuments_FullMethodName                         = "/service.customers/uploadDocuments"
	Customers_Logout_FullMethodName                                  = "/service.customers/logout"
	Customers_GetCompanyAccDetails_FullMethodName                    = "/service.customers/getCompanyAccDetails"
	Customers_BulkSms_FullMethodName                                 = "/service.customers/bulkSms"
	Customers_AddFathersName_FullMethodName                          = "/service.customers/addFathersName"
	Customers_GetOccupationList_FullMethodName                       = "/service.customers/getOccupationList"
	Customers_GetAddressList_FullMethodName                          = "/service.customers/getAddressList"
	Customers_GetAppSubmittedScreen_FullMethodName                   = "/service.customers/getAppSubmittedScreen"
	Customers_GetFloatingVideos_FullMethodName                       = "/service.customers/getFloatingVideos"
	Customers_GetRpdLink_FullMethodName                              = "/service.customers/getRpdLink"
	Customers_MockPayment_FullMethodName                             = "/service.customers/mockPayment"
	Customers_SaveCreditBuilder_FullMethodName                       = "/service.customers/saveCreditBuilder"
	Customers_GetPaymentSummary_FullMethodName                       = "/service.customers/getPaymentSummary"
	Customers_GetEnachUrl_FullMethodName                             = "/service.customers/getEnachUrl"
	Customers_GetUpiMandateUrl_FullMethodName                        = "/service.customers/getUpiMandateUrl"
	Customers_GetEnachTxnStatus_FullMethodName                       = "/service.customers/getEnachTxnStatus"
	Customers_UpdateEnachTxnStatus_FullMethodName                    = "/service.customers/updateEnachTxnStatus"
	Customers_CBSignup_FullMethodName                                = "/service.customers/cBSignup"
	Customers_CbPayNow_FullMethodName                                = "/service.customers/cbPayNow"
	Customers_GetPdBankList_FullMethodName                           = "/service.customers/getPdBankList"
	Customers_ValidateBankDetails_FullMethodName                     = "/service.customers/validateBankDetails"
	Customers_GetRpdTransactionStatus_FullMethodName                 = "/service.customers/getRpdTransactionStatus"
	Customers_GetCbTxnStatus_FullMethodName                          = "/service.customers/getCbTxnStatus"
	Customers_UpdateCbTxnStatus_FullMethodName                       = "/service.customers/updateCbTxnStatus"
	Customers_ConfirmAddress_FullMethodName                          = "/service.customers/confirmAddress"
	Customers_FreedomPayNow_FullMethodName                           = "/service.customers/freedomPayNow"
	Customers_GetFreedomTxnStatus_FullMethodName                     = "/service.customers/getFreedomTxnStatus"
	Customers_UpdateFreedomTxnStatus_FullMethodName                  = "/service.customers/updateFreedomTxnStatus"
	Customers_UpdateCategory_FullMethodName                          = "/service.customers/updateCategory"
	Customers_GetFreedomPaymentOptions_FullMethodName                = "/service.customers/getFreedomPaymentOptions"
	Customers_GetCbPaymentOptions_FullMethodName                     = "/service.customers/getCbPaymentOptions"
	Customers_GetAATxnStatus_FullMethodName                          = "/service.customers/getAATxnStatus"
	Customers_GetCreditBuilder_FullMethodName                        = "/service.customers/getCreditBuilder"
	Customers_LessCsImprove_FullMethodName                           = "/service.customers/lessCsImprove"
	Customers_MoreCsImprove_FullMethodName                           = "/service.customers/moreCsImprove"
	Customers_GetCbRejectedData_FullMethodName                       = "/service.customers/getCbRejectedData"
	Customers_ForceUpdate_FullMethodName                             = "/service.customers/forceUpdate"
	Customers_SaveCustomerAppsList_FullMethodName                    = "/service.customers/saveCustomerAppsList"
	Customers_UpdateCongratulationStep_FullMethodName                = "/service.customers/updateCongratulationStep"
	Customers_SubmitUploadedDocuments_FullMethodName                 = "/service.customers/submitUploadedDocuments"
	Customers_GetVaNumber_FullMethodName                             = "/service.customers/getVaNumber"
	Customers_GetSyncStatus_FullMethodName                           = "/service.customers/getSyncStatus"
	Customers_UpdateSyncStatus_FullMethodName                        = "/service.customers/updateSyncStatus"
	Customers_CreateVaNumber_FullMethodName                          = "/service.customers/createVaNumber"
	Customers_DeleteDocument_FullMethodName                          = "/service.customers/deleteDocument"
	Customers_SyncDecisionEngine_FullMethodName                      = "/service.customers/syncDecisionEngine"
	Customers_UpdateCbStandAloneJourney_FullMethodName               = "/service.customers/updateCbStandAloneJourney"
	Customers_GetCustomerDetailsbyMobile_FullMethodName              = "/service.customers/getCustomerDetailsbyMobile"
	Customers_GetLocLimit_FullMethodName                             = "/service.customers/getLocLimit"
	Customers_UpdateAdditionalVerification_FullMethodName            = "/service.customers/updateAdditionalVerification"
	Customers_GetCustomerInfo_FullMethodName                         = "/service.customers/getCustomerInfo"
	Customers_InsuranceDetailsStaticScreen_FullMethodName            = "/service.customers/insuranceDetailsStaticScreen"
	Customers_GetCliStatus_FullMethodName                            = "/service.customers/getCliStatus"
	Customers_ApplyCliJourney_FullMethodName                         = "/service.customers/applyCliJourney"
	Customers_RestoreAccount_FullMethodName                          = "/service.customers/restoreAccount"
	Customers_GetPocketPersonalAccidentProtectionPlan_FullMethodName = "/service.customers/getPocketPersonalAccidentProtectionPlan"
	Customers_UpdateCbStandAloneConfirmation_FullMethodName          = "/service.customers/updateCbStandAloneConfirmation"
	Customers_UpdateCbStandAloneCancellation_FullMethodName          = "/service.customers/updateCbStandAloneCancellation"
	Customers_GetGlobalPopups_FullMethodName                         = "/service.customers/getGlobalPopups"
	Customers_ResetBannerCode_FullMethodName                         = "/service.customers/resetBannerCode"
	Customers_SendLamfOtp_FullMethodName                             = "/service.customers/sendLamfOtp"
	Customers_VerifyLamfOtp_FullMethodName                           = "/service.customers/verifyLamfOtp"
	Customers_SendLamfPledgeOtp_FullMethodName                       = "/service.customers/sendLamfPledgeOtp"
	Customers_VerifyLamfPledgeOtp_FullMethodName                     = "/service.customers/verifyLamfPledgeOtp"
	Customers_ApplyLamf_FullMethodName                               = "/service.customers/applyLamf"
	Customers_UpdateSanctionAmount_FullMethodName                    = "/service.customers/updateSanctionAmount"
	Customers_GetMessengerMode_FullMethodName                        = "/service.customers/getMessengerMode"
)

// CustomersClient is the client API for Customers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersClient interface {
	SendOtp(ctx context.Context, in *customers.SendOtpRequest, opts ...grpc.CallOption) (*customers.SendOtpRespone, error)
	VerifyOtp(ctx context.Context, in *customers.VerifyOtpReqeust, opts ...grpc.CallOption) (*customers.VerifyOtpResponse, error)
	Setmpin(ctx context.Context, in *customers.SetMpinRequest, opts ...grpc.CallOption) (*customers.SetMpinResponse, error)
	VerifyMpin(ctx context.Context, in *customers.VerifyMpinRequest, opts ...grpc.CallOption) (*customers.VerifyMpinResponse, error)
	ChangeMpin(ctx context.Context, in *customers.ChangeMpinRequest, opts ...grpc.CallOption) (*customers.ChangeMpinResponse, error)
	ForgotMpin(ctx context.Context, in *customers.ForgotMpinRequest, opts ...grpc.CallOption) (*customers.ForgotMpinResponse, error)
	ForgotMpinVerify(ctx context.Context, in *customers.ForgotMpinVerifyRequest, opts ...grpc.CallOption) (*customers.ForgotMpinVerifyResponse, error)
	ProfileUpdatetnc(ctx context.Context, in *customers.UpdateTncRequest, opts ...grpc.CallOption) (*customers.UpdateTncResponse, error)
	UpdateProfileBasic(ctx context.Context, in *customers.UpdateProfileBasicRequest, opts ...grpc.CallOption) (*customers.UpdateProfileBasicResponse, error)
	GetProfile(ctx context.Context, in *customers.GetCustomerProfileRequest, opts ...grpc.CallOption) (*customers.GetCustomerProfileResponse, error)
	GetStep(ctx context.Context, in *customers.GetstepRequest, opts ...grpc.CallOption) (*customers.GetstepResponse, error)
	SaveBasicDetails(ctx context.Context, in *customers.SaveBasicDetailsRequest, opts ...grpc.CallOption) (*customers.SaveBasicDetailsResponse, error)
	SaveUnlockLimit(ctx context.Context, in *customers.SaveUnlockLimitRequest, opts ...grpc.CallOption) (*customers.SaveUnlockLimitResponse, error)
	SendOtptoPersonalEmail(ctx context.Context, in *customers.SendEmailOtpRequest, opts ...grpc.CallOption) (*customers.SendEmailOtpResponse, error)
	VerifyOtptoPersonalEmail(ctx context.Context, in *customers.VerifyEmailOtpRequest, opts ...grpc.CallOption) (*customers.VerifyEmailOtpResponse, error)
	GetCustomerById(ctx context.Context, in *customers.GetCustomerByIdRequest, opts ...grpc.CallOption) (*customers.GetCustomerByIdResponse, error)
	GetDashboard(ctx context.Context, in *customers.GetDashboardRequest, opts ...grpc.CallOption) (*customers.GetDashboardResponse, error)
	GetDashboardMainCard(ctx context.Context, in *customers.GetDashboardMainCardRequest, opts ...grpc.CallOption) (*customers.GetDashboardMainCardResponse, error)
	AddBankAccountDetails(ctx context.Context, in *customers.AddBankAccountDetailsRequest, opts ...grpc.CallOption) (*customers.AddBankAccountDetailsResponse, error)
	GetBankAccountDetails(ctx context.Context, in *customers.GetBankAccountDetailsRequest, opts ...grpc.CallOption) (*customers.GetBankAccountDetailsResponse, error)
	GetBasicInfo(ctx context.Context, in *customers.GetBasicInfoRequest, opts ...grpc.CallOption) (*customers.GetBasicInfoResponse, error)
	GetProfessionalInfo(ctx context.Context, in *customers.GetProfessionalInfoRequest, opts ...grpc.CallOption) (*customers.GetProfessionalInfoResponse, error)
	CreateCustomerReference(ctx context.Context, in *customers.CreateCustomerReferenceRequest, opts ...grpc.CallOption) (*customers.CreateCustomerReferenceResponse, error)
	SendOtptoProfessionalEmail(ctx context.Context, in *customers.SendEmailOtpRequest, opts ...grpc.CallOption) (*customers.SendEmailOtpResponse, error)
	VerifyOtptoProfessionalEmail(ctx context.Context, in *customers.VerifyEmailOtpRequest, opts ...grpc.CallOption) (*customers.VerifyEmailOtpResponse, error)
	GetAllStates(ctx context.Context, in *customers.GetAllStatesRequest, opts ...grpc.CallOption) (*customers.GetAllStatesResponse, error)
	GetCitiesByStateId(ctx context.Context, in *customers.GetCitiesRequest, opts ...grpc.CallOption) (*customers.GetCitiesResponse, error)
	GetDocumentList(ctx context.Context, in *customers.GetDocumentsRequest, opts ...grpc.CallOption) (*customers.GetDocumentsResponse, error)
	UpdateOkycTxn(ctx context.Context, in *customers.UpdateOkycTxnRequest, opts ...grpc.CallOption) (*customers.UpdateOkycTxnResponse, error)
	AddAddress(ctx context.Context, in *customers.AddAddressRequest, opts ...grpc.CallOption) (*customers.AddAddressResponse, error)
	UpdateDob(ctx context.Context, in *customers.UpdateDOBRequest, opts ...grpc.CallOption) (*customers.UpdateDOBResponse, error)
	ValidatePan(ctx context.Context, in *customers.ValidatePanRequest, opts ...grpc.CallOption) (*customers.ValidatePanResponse, error)
	DeleteProfile(ctx context.Context, in *customers.DeleteProfileRequest, opts ...grpc.CallOption) (*customers.DeleteProfileResponse, error)
	GetBankList(ctx context.Context, in *aa.GetBankListRequest, opts ...grpc.CallOption) (*aa.GetBankListResponse, error)
	AddSuspendedCustomer(ctx context.Context, in *customers.AddSuspendedCustomerRequest, opts ...grpc.CallOption) (*customers.AddSuspendedCustomerResponse, error)
	UpdatelocStatus(ctx context.Context, in *customers.LocStatusRequest, opts ...grpc.CallOption) (*customers.LocStatusResponse, error)
	InitiateRequest(ctx context.Context, in *aa.InitiateRequest, opts ...grpc.CallOption) (*aa.InitiateResponse, error)
	AddUserApps(ctx context.Context, in *customers.AddUserAppsRequest, opts ...grpc.CallOption) (*customers.AddUserAppsResponse, error)
	FetchRCProfile(ctx context.Context, in *customers.FetchRCProfileRequest, opts ...grpc.CallOption) (*customers.FetchRCProfileResponse, error)
	Disablempin(ctx context.Context, in *customers.DisableMpinRequest, opts ...grpc.CallOption) (*customers.DisableMpinResponse, error)
	UpdateMobileSendOtp(ctx context.Context, in *customers.UpdateMobileSendOtpRequest, opts ...grpc.CallOption) (*customers.UpdateMobileSendOtpResponse, error)
	Updatemobileverifyotp(ctx context.Context, in *customers.UpdateMobileVerifyOtpRequest, opts ...grpc.CallOption) (*customers.UpdateMobileVerifyOtpResponse, error)
	AddGstNumber(ctx context.Context, in *customers.AddGstNumberRequest, opts ...grpc.CallOption) (*customers.AddGstNumberResponse, error)
	GetSelfieeTxnId(ctx context.Context, in *customers.GetSelfieeTxnIdRequest, opts ...grpc.CallOption) (*customers.GetSelfieeTxnIdResponse, error)
	UpdateSelfieeTxn(ctx context.Context, in *customers.UpdateSelfieeTxnRequest, opts ...grpc.CallOption) (*customers.UpdateSelfieeTxnResponse, error)
	GetLimit(ctx context.Context, in *customers.GetLimitRequest, opts ...grpc.CallOption) (*customers.GetLimitResponse, error)
	SaveLimit(ctx context.Context, in *customers.SaveLimitRequest, opts ...grpc.CallOption) (*customers.SaveLimitResponse, error)
	AddMoreDetails(ctx context.Context, in *customers.AddMoreDetailsRequest, opts ...grpc.CallOption) (*customers.AddMoreDetailsResponse, error)
	UpdateVehicleNumber(ctx context.Context, in *customers.UpdateVehicleNumberRequest, opts ...grpc.CallOption) (*customers.UpdateVehicleNumberResponse, error)
	UpdateDlNumber(ctx context.Context, in *customers.UpdateDlNumberRequest, opts ...grpc.CallOption) (*customers.UpdateDlNumberResponse, error)
	SkipScreen(ctx context.Context, in *customers.SkipScreenRequest, opts ...grpc.CallOption) (*customers.SkipScreenResponse, error)
	UpdateCustomerById(ctx context.Context, in *customers.UpdateCustomerByIdRequest, opts ...grpc.CallOption) (*customers.UpdateCustomerByIdResponse, error)
	UploadDocuments(ctx context.Context, in *customers.UploadDocumentsRequest, opts ...grpc.CallOption) (*customers.UploadDocumentsResponse, error)
	Logout(ctx context.Context, in *customers.LogoutRequest, opts ...grpc.CallOption) (*customers.LogoutResponse, error)
	GetCompanyAccDetails(ctx context.Context, in *customers.GetCompanyAccDetailsRequest, opts ...grpc.CallOption) (*customers.GetCompanyAccDetailsResponse, error)
	BulkSms(ctx context.Context, in *customers.BulkSMSRequest, opts ...grpc.CallOption) (*customers.BulkSMSResponse, error)
	AddFathersName(ctx context.Context, in *customers.AddFathersNameRequest, opts ...grpc.CallOption) (*customers.AddFathersNameResponse, error)
	GetOccupationList(ctx context.Context, in *customers.GetOccupationListRequest, opts ...grpc.CallOption) (*customers.GetOccupationListResponse, error)
	GetAddressList(ctx context.Context, in *customers.GetAddressRequest, opts ...grpc.CallOption) (*customers.GetAddressResponse, error)
	GetAppSubmittedScreen(ctx context.Context, in *customers.GetAppSubmittedRequest, opts ...grpc.CallOption) (*customers.GetAppSubmittedResponse, error)
	GetFloatingVideos(ctx context.Context, in *customers.GetFloatingVideosRequest, opts ...grpc.CallOption) (*customers.GetFloatingVideosResponse, error)
	GetRpdLink(ctx context.Context, in *rpd.CreateRpdLinkRequest, opts ...grpc.CallOption) (*rpd.CreateRpdLinkResponse, error)
	MockPayment(ctx context.Context, in *rpd.MockPaymentRequest, opts ...grpc.CallOption) (*rpd.MockPaymentResponse, error)
	SaveCreditBuilder(ctx context.Context, in *cb.SaveCreditBuilderRequest, opts ...grpc.CallOption) (*cb.SaveCreditBuilderResponse, error)
	GetPaymentSummary(ctx context.Context, in *cb.GetPaymentSummaryRequest, opts ...grpc.CallOption) (*cb.GetPaymentSummaryResponse, error)
	GetEnachUrl(ctx context.Context, in *enach.GetWebUrlRequest, opts ...grpc.CallOption) (*enach.GetWebUrlResponse, error)
	GetUpiMandateUrl(ctx context.Context, in *enach.GetWebUrlRequest, opts ...grpc.CallOption) (*enach.GetWebUrlResponse, error)
	GetEnachTxnStatus(ctx context.Context, in *enach.GetTxnStatusRequest, opts ...grpc.CallOption) (*enach.GetTxnStatusResponse, error)
	UpdateEnachTxnStatus(ctx context.Context, in *enach.UpdateEnachTxnStatusRequest, opts ...grpc.CallOption) (*enach.UpdateEnachTxnStatusResponse, error)
	CBSignup(ctx context.Context, in *cb.CBSignupRequest, opts ...grpc.CallOption) (*cb.CBSignupResponse, error)
	CbPayNow(ctx context.Context, in *cb.CbPayNowRequest, opts ...grpc.CallOption) (*cb.CbPayNowResponse, error)
	GetPdBankList(ctx context.Context, in *pd.GetPdBankListRequest, opts ...grpc.CallOption) (*pd.GetPdBankListResponse, error)
	ValidateBankDetails(ctx context.Context, in *pd.ValidateBankAccountRequest, opts ...grpc.CallOption) (*pd.ValidateBankAccountResponse, error)
	GetRpdTransactionStatus(ctx context.Context, in *rpd.GetRpdTransactionStatusRequest, opts ...grpc.CallOption) (*rpd.GetRpdTransactionStatusResponse, error)
	GetCbTxnStatus(ctx context.Context, in *cb.GetCBTxnStatusRequest, opts ...grpc.CallOption) (*cb.GetCBTxnStatusResponse, error)
	UpdateCbTxnStatus(ctx context.Context, in *cb.UpdateCBTxnStatusRequest, opts ...grpc.CallOption) (*cb.UpdateCBTxnStatusResponse, error)
	ConfirmAddress(ctx context.Context, in *freedom.ConfirmAddressRequest, opts ...grpc.CallOption) (*freedom.ConfirmAddressResponse, error)
	FreedomPayNow(ctx context.Context, in *freedom.FreedomPayNowRequest, opts ...grpc.CallOption) (*freedom.FreedomPayNowResponse, error)
	GetFreedomTxnStatus(ctx context.Context, in *freedom.GetFreedomTxnStatusRequest, opts ...grpc.CallOption) (*freedom.GetFreedomTxnStatusResponse, error)
	UpdateFreedomTxnStatus(ctx context.Context, in *freedom.UpdateFreedomTxnStatusRequest, opts ...grpc.CallOption) (*freedom.UpdateFreedomTxnStatusResponse, error)
	UpdateCategory(ctx context.Context, in *customers.UpdateCategoryRequest, opts ...grpc.CallOption) (*customers.UpdateCategoryResponse, error)
	GetFreedomPaymentOptions(ctx context.Context, in *customers.PaymentOptionRequest, opts ...grpc.CallOption) (*customers.PaymentOptionResponse, error)
	GetCbPaymentOptions(ctx context.Context, in *customers.PaymentOptionRequest, opts ...grpc.CallOption) (*customers.PaymentOptionResponse, error)
	GetAATxnStatus(ctx context.Context, in *aa.GetAATransactionStatusRequest, opts ...grpc.CallOption) (*aa.GetAATransactionStatusResponse, error)
	GetCreditBuilder(ctx context.Context, in *cb.GetCreditBuilderRequest, opts ...grpc.CallOption) (*cb.GetCreditBuilderResponse, error)
	LessCsImprove(ctx context.Context, in *cb.LessCsImproveRequest, opts ...grpc.CallOption) (*cb.LessCsImproveResponse, error)
	MoreCsImprove(ctx context.Context, in *cb.MoreCsImproveRequest, opts ...grpc.CallOption) (*cb.MoreCsImproveResponse, error)
	GetCbRejectedData(ctx context.Context, in *cb.GetCbRejectedDataRequest, opts ...grpc.CallOption) (*cb.GetCbRejectedDataResponse, error)
	ForceUpdate(ctx context.Context, in *customers.ForceUpdateRequest, opts ...grpc.CallOption) (*customers.ForceUpdateResponse, error)
	SaveCustomerAppsList(ctx context.Context, in *customers.SaveCustomerAppsRequest, opts ...grpc.CallOption) (*customers.SaveCustomerAppsResponse, error)
	UpdateCongratulationStep(ctx context.Context, in *customers.UpdateCongratulationStepRequest, opts ...grpc.CallOption) (*customers.UpdateCongratulationStepResponse, error)
	SubmitUploadedDocuments(ctx context.Context, in *customers.SubmitUploadedDocumentsRequest, opts ...grpc.CallOption) (*customers.SubmitUploadedDocumentsResponse, error)
	GetVaNumber(ctx context.Context, in *customers.GetVaNumberRequest, opts ...grpc.CallOption) (*customers.GetVaNumberResponse, error)
	GetSyncStatus(ctx context.Context, in *customers.GetSyncStatusRequest, opts ...grpc.CallOption) (*customers.GetSyncStatusResponse, error)
	UpdateSyncStatus(ctx context.Context, in *customers.UpdateSyncStatusRequest, opts ...grpc.CallOption) (*customers.UpdateSyncStatusResponse, error)
	CreateVaNumber(ctx context.Context, in *customers.CreateVaNumberRequest, opts ...grpc.CallOption) (*customers.CreateVaNumberResponse, error)
	DeleteDocument(ctx context.Context, in *customers.DeleteDocumentRequest, opts ...grpc.CallOption) (*customers.DeleteDocumentResponse, error)
	SyncDecisionEngine(ctx context.Context, in *customers.SyncDecisionEngineRequest, opts ...grpc.CallOption) (*customers.SyncDecisionEngineResponse, error)
	UpdateCbStandAloneJourney(ctx context.Context, in *cb.UpdateCbStandAloneJourneyRequest, opts ...grpc.CallOption) (*cb.UpdateCbStandAloneJourneyResponse, error)
	GetCustomerDetailsbyMobile(ctx context.Context, in *customers.GetCustomerDetailsRequest, opts ...grpc.CallOption) (*customers.GetCustomerDetailsResponse, error)
	GetLocLimit(ctx context.Context, in *customers.GetLocLimitRequest, opts ...grpc.CallOption) (*customers.GetLocLimitResponse, error)
	UpdateAdditionalVerification(ctx context.Context, in *freedom.UpdateAdditionalVerificationRequest, opts ...grpc.CallOption) (*freedom.UpdateAdditionalVerificationResponse, error)
	GetCustomerInfo(ctx context.Context, in *customers.GetCustomerRequest, opts ...grpc.CallOption) (*customers.GetCustomerResponse, error)
	InsuranceDetailsStaticScreen(ctx context.Context, in *cb.InsuranceDetailsRequest, opts ...grpc.CallOption) (*cb.InsuranceDetailsResponse, error)
	GetCliStatus(ctx context.Context, in *customers.GetCliStatusRequest, opts ...grpc.CallOption) (*customers.GetCliStatusResponse, error)
	ApplyCliJourney(ctx context.Context, in *customers.ApplyCliJourneyRequest, opts ...grpc.CallOption) (*customers.ApplyCliJourneyResponse, error)
	RestoreAccount(ctx context.Context, in *customers.RestoreAccountRequest, opts ...grpc.CallOption) (*customers.RestoreAccountResponse, error)
	GetPocketPersonalAccidentProtectionPlan(ctx context.Context, in *customers.GetPocketPersonalAccidentProtectionPlanRequest, opts ...grpc.CallOption) (*customers.GetPocketPersonalAccidentProtectionPlanResponse, error)
	UpdateCbStandAloneConfirmation(ctx context.Context, in *cb.UpdateCbStandAloneConfirmationRequest, opts ...grpc.CallOption) (*cb.UpdateCbStandAloneConfirmationResponse, error)
	UpdateCbStandAloneCancellation(ctx context.Context, in *cb.UpdateCbStandAloneCancellationRequest, opts ...grpc.CallOption) (*cb.UpdateCbStandAloneCancellationResponse, error)
	GetGlobalPopups(ctx context.Context, in *customers.GetGlobalPopupsRequest, opts ...grpc.CallOption) (*customers.GetGlobalPopupsResponse, error)
	ResetBannerCode(ctx context.Context, in *customers.ResetBannerCodeRequest, opts ...grpc.CallOption) (*customers.ResetBannerCodeResponse, error)
	SendLamfOtp(ctx context.Context, in *lamf.SendLamfOtpRequest, opts ...grpc.CallOption) (*lamf.SendLamfOtpResponse, error)
	VerifyLamfOtp(ctx context.Context, in *lamf.VerifyLamfOtpRequest, opts ...grpc.CallOption) (*lamf.VerifyLamfOtpResponse, error)
	SendLamfPledgeOtp(ctx context.Context, in *lamf.SendLamfPledgeOtpRequest, opts ...grpc.CallOption) (*lamf.SendLamfPledgeOtpResponse, error)
	VerifyLamfPledgeOtp(ctx context.Context, in *lamf.VerifyLamfPledgeOtpRequest, opts ...grpc.CallOption) (*lamf.VerifyLamfPledgeOtpResponse, error)
	ApplyLamf(ctx context.Context, in *lamf.ApplyLamfRequest, opts ...grpc.CallOption) (*lamf.ApplyLamfResponse, error)
	UpdateSanctionAmount(ctx context.Context, in *customers.UpdateSanctionAmountRequest, opts ...grpc.CallOption) (*customers.UpdateSanctionAmountResponse, error)
	GetMessengerMode(ctx context.Context, in *customers.GetMessengerModeRequest, opts ...grpc.CallOption) (*customers.GetMessengerModeResponse, error)
}

type customersClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersClient(cc grpc.ClientConnInterface) CustomersClient {
	return &customersClient{cc}
}

func (c *customersClient) SendOtp(ctx context.Context, in *customers.SendOtpRequest, opts ...grpc.CallOption) (*customers.SendOtpRespone, error) {
	out := new(customers.SendOtpRespone)
	err := c.cc.Invoke(ctx, Customers_SendOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) VerifyOtp(ctx context.Context, in *customers.VerifyOtpReqeust, opts ...grpc.CallOption) (*customers.VerifyOtpResponse, error) {
	out := new(customers.VerifyOtpResponse)
	err := c.cc.Invoke(ctx, Customers_VerifyOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Setmpin(ctx context.Context, in *customers.SetMpinRequest, opts ...grpc.CallOption) (*customers.SetMpinResponse, error) {
	out := new(customers.SetMpinResponse)
	err := c.cc.Invoke(ctx, Customers_Setmpin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) VerifyMpin(ctx context.Context, in *customers.VerifyMpinRequest, opts ...grpc.CallOption) (*customers.VerifyMpinResponse, error) {
	out := new(customers.VerifyMpinResponse)
	err := c.cc.Invoke(ctx, Customers_VerifyMpin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ChangeMpin(ctx context.Context, in *customers.ChangeMpinRequest, opts ...grpc.CallOption) (*customers.ChangeMpinResponse, error) {
	out := new(customers.ChangeMpinResponse)
	err := c.cc.Invoke(ctx, Customers_ChangeMpin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ForgotMpin(ctx context.Context, in *customers.ForgotMpinRequest, opts ...grpc.CallOption) (*customers.ForgotMpinResponse, error) {
	out := new(customers.ForgotMpinResponse)
	err := c.cc.Invoke(ctx, Customers_ForgotMpin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ForgotMpinVerify(ctx context.Context, in *customers.ForgotMpinVerifyRequest, opts ...grpc.CallOption) (*customers.ForgotMpinVerifyResponse, error) {
	out := new(customers.ForgotMpinVerifyResponse)
	err := c.cc.Invoke(ctx, Customers_ForgotMpinVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ProfileUpdatetnc(ctx context.Context, in *customers.UpdateTncRequest, opts ...grpc.CallOption) (*customers.UpdateTncResponse, error) {
	out := new(customers.UpdateTncResponse)
	err := c.cc.Invoke(ctx, Customers_ProfileUpdatetnc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateProfileBasic(ctx context.Context, in *customers.UpdateProfileBasicRequest, opts ...grpc.CallOption) (*customers.UpdateProfileBasicResponse, error) {
	out := new(customers.UpdateProfileBasicResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateProfileBasic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetProfile(ctx context.Context, in *customers.GetCustomerProfileRequest, opts ...grpc.CallOption) (*customers.GetCustomerProfileResponse, error) {
	out := new(customers.GetCustomerProfileResponse)
	err := c.cc.Invoke(ctx, Customers_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetStep(ctx context.Context, in *customers.GetstepRequest, opts ...grpc.CallOption) (*customers.GetstepResponse, error) {
	out := new(customers.GetstepResponse)
	err := c.cc.Invoke(ctx, Customers_GetStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SaveBasicDetails(ctx context.Context, in *customers.SaveBasicDetailsRequest, opts ...grpc.CallOption) (*customers.SaveBasicDetailsResponse, error) {
	out := new(customers.SaveBasicDetailsResponse)
	err := c.cc.Invoke(ctx, Customers_SaveBasicDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SaveUnlockLimit(ctx context.Context, in *customers.SaveUnlockLimitRequest, opts ...grpc.CallOption) (*customers.SaveUnlockLimitResponse, error) {
	out := new(customers.SaveUnlockLimitResponse)
	err := c.cc.Invoke(ctx, Customers_SaveUnlockLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SendOtptoPersonalEmail(ctx context.Context, in *customers.SendEmailOtpRequest, opts ...grpc.CallOption) (*customers.SendEmailOtpResponse, error) {
	out := new(customers.SendEmailOtpResponse)
	err := c.cc.Invoke(ctx, Customers_SendOtptoPersonalEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) VerifyOtptoPersonalEmail(ctx context.Context, in *customers.VerifyEmailOtpRequest, opts ...grpc.CallOption) (*customers.VerifyEmailOtpResponse, error) {
	out := new(customers.VerifyEmailOtpResponse)
	err := c.cc.Invoke(ctx, Customers_VerifyOtptoPersonalEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCustomerById(ctx context.Context, in *customers.GetCustomerByIdRequest, opts ...grpc.CallOption) (*customers.GetCustomerByIdResponse, error) {
	out := new(customers.GetCustomerByIdResponse)
	err := c.cc.Invoke(ctx, Customers_GetCustomerById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetDashboard(ctx context.Context, in *customers.GetDashboardRequest, opts ...grpc.CallOption) (*customers.GetDashboardResponse, error) {
	out := new(customers.GetDashboardResponse)
	err := c.cc.Invoke(ctx, Customers_GetDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetDashboardMainCard(ctx context.Context, in *customers.GetDashboardMainCardRequest, opts ...grpc.CallOption) (*customers.GetDashboardMainCardResponse, error) {
	out := new(customers.GetDashboardMainCardResponse)
	err := c.cc.Invoke(ctx, Customers_GetDashboardMainCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) AddBankAccountDetails(ctx context.Context, in *customers.AddBankAccountDetailsRequest, opts ...grpc.CallOption) (*customers.AddBankAccountDetailsResponse, error) {
	out := new(customers.AddBankAccountDetailsResponse)
	err := c.cc.Invoke(ctx, Customers_AddBankAccountDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetBankAccountDetails(ctx context.Context, in *customers.GetBankAccountDetailsRequest, opts ...grpc.CallOption) (*customers.GetBankAccountDetailsResponse, error) {
	out := new(customers.GetBankAccountDetailsResponse)
	err := c.cc.Invoke(ctx, Customers_GetBankAccountDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetBasicInfo(ctx context.Context, in *customers.GetBasicInfoRequest, opts ...grpc.CallOption) (*customers.GetBasicInfoResponse, error) {
	out := new(customers.GetBasicInfoResponse)
	err := c.cc.Invoke(ctx, Customers_GetBasicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetProfessionalInfo(ctx context.Context, in *customers.GetProfessionalInfoRequest, opts ...grpc.CallOption) (*customers.GetProfessionalInfoResponse, error) {
	out := new(customers.GetProfessionalInfoResponse)
	err := c.cc.Invoke(ctx, Customers_GetProfessionalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) CreateCustomerReference(ctx context.Context, in *customers.CreateCustomerReferenceRequest, opts ...grpc.CallOption) (*customers.CreateCustomerReferenceResponse, error) {
	out := new(customers.CreateCustomerReferenceResponse)
	err := c.cc.Invoke(ctx, Customers_CreateCustomerReference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SendOtptoProfessionalEmail(ctx context.Context, in *customers.SendEmailOtpRequest, opts ...grpc.CallOption) (*customers.SendEmailOtpResponse, error) {
	out := new(customers.SendEmailOtpResponse)
	err := c.cc.Invoke(ctx, Customers_SendOtptoProfessionalEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) VerifyOtptoProfessionalEmail(ctx context.Context, in *customers.VerifyEmailOtpRequest, opts ...grpc.CallOption) (*customers.VerifyEmailOtpResponse, error) {
	out := new(customers.VerifyEmailOtpResponse)
	err := c.cc.Invoke(ctx, Customers_VerifyOtptoProfessionalEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetAllStates(ctx context.Context, in *customers.GetAllStatesRequest, opts ...grpc.CallOption) (*customers.GetAllStatesResponse, error) {
	out := new(customers.GetAllStatesResponse)
	err := c.cc.Invoke(ctx, Customers_GetAllStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCitiesByStateId(ctx context.Context, in *customers.GetCitiesRequest, opts ...grpc.CallOption) (*customers.GetCitiesResponse, error) {
	out := new(customers.GetCitiesResponse)
	err := c.cc.Invoke(ctx, Customers_GetCitiesByStateId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetDocumentList(ctx context.Context, in *customers.GetDocumentsRequest, opts ...grpc.CallOption) (*customers.GetDocumentsResponse, error) {
	out := new(customers.GetDocumentsResponse)
	err := c.cc.Invoke(ctx, Customers_GetDocumentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateOkycTxn(ctx context.Context, in *customers.UpdateOkycTxnRequest, opts ...grpc.CallOption) (*customers.UpdateOkycTxnResponse, error) {
	out := new(customers.UpdateOkycTxnResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateOkycTxn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) AddAddress(ctx context.Context, in *customers.AddAddressRequest, opts ...grpc.CallOption) (*customers.AddAddressResponse, error) {
	out := new(customers.AddAddressResponse)
	err := c.cc.Invoke(ctx, Customers_AddAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateDob(ctx context.Context, in *customers.UpdateDOBRequest, opts ...grpc.CallOption) (*customers.UpdateDOBResponse, error) {
	out := new(customers.UpdateDOBResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateDob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ValidatePan(ctx context.Context, in *customers.ValidatePanRequest, opts ...grpc.CallOption) (*customers.ValidatePanResponse, error) {
	out := new(customers.ValidatePanResponse)
	err := c.cc.Invoke(ctx, Customers_ValidatePan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) DeleteProfile(ctx context.Context, in *customers.DeleteProfileRequest, opts ...grpc.CallOption) (*customers.DeleteProfileResponse, error) {
	out := new(customers.DeleteProfileResponse)
	err := c.cc.Invoke(ctx, Customers_DeleteProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetBankList(ctx context.Context, in *aa.GetBankListRequest, opts ...grpc.CallOption) (*aa.GetBankListResponse, error) {
	out := new(aa.GetBankListResponse)
	err := c.cc.Invoke(ctx, Customers_GetBankList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) AddSuspendedCustomer(ctx context.Context, in *customers.AddSuspendedCustomerRequest, opts ...grpc.CallOption) (*customers.AddSuspendedCustomerResponse, error) {
	out := new(customers.AddSuspendedCustomerResponse)
	err := c.cc.Invoke(ctx, Customers_AddSuspendedCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdatelocStatus(ctx context.Context, in *customers.LocStatusRequest, opts ...grpc.CallOption) (*customers.LocStatusResponse, error) {
	out := new(customers.LocStatusResponse)
	err := c.cc.Invoke(ctx, Customers_UpdatelocStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) InitiateRequest(ctx context.Context, in *aa.InitiateRequest, opts ...grpc.CallOption) (*aa.InitiateResponse, error) {
	out := new(aa.InitiateResponse)
	err := c.cc.Invoke(ctx, Customers_InitiateRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) AddUserApps(ctx context.Context, in *customers.AddUserAppsRequest, opts ...grpc.CallOption) (*customers.AddUserAppsResponse, error) {
	out := new(customers.AddUserAppsResponse)
	err := c.cc.Invoke(ctx, Customers_AddUserApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) FetchRCProfile(ctx context.Context, in *customers.FetchRCProfileRequest, opts ...grpc.CallOption) (*customers.FetchRCProfileResponse, error) {
	out := new(customers.FetchRCProfileResponse)
	err := c.cc.Invoke(ctx, Customers_FetchRCProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Disablempin(ctx context.Context, in *customers.DisableMpinRequest, opts ...grpc.CallOption) (*customers.DisableMpinResponse, error) {
	out := new(customers.DisableMpinResponse)
	err := c.cc.Invoke(ctx, Customers_Disablempin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateMobileSendOtp(ctx context.Context, in *customers.UpdateMobileSendOtpRequest, opts ...grpc.CallOption) (*customers.UpdateMobileSendOtpResponse, error) {
	out := new(customers.UpdateMobileSendOtpResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateMobileSendOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Updatemobileverifyotp(ctx context.Context, in *customers.UpdateMobileVerifyOtpRequest, opts ...grpc.CallOption) (*customers.UpdateMobileVerifyOtpResponse, error) {
	out := new(customers.UpdateMobileVerifyOtpResponse)
	err := c.cc.Invoke(ctx, Customers_Updatemobileverifyotp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) AddGstNumber(ctx context.Context, in *customers.AddGstNumberRequest, opts ...grpc.CallOption) (*customers.AddGstNumberResponse, error) {
	out := new(customers.AddGstNumberResponse)
	err := c.cc.Invoke(ctx, Customers_AddGstNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetSelfieeTxnId(ctx context.Context, in *customers.GetSelfieeTxnIdRequest, opts ...grpc.CallOption) (*customers.GetSelfieeTxnIdResponse, error) {
	out := new(customers.GetSelfieeTxnIdResponse)
	err := c.cc.Invoke(ctx, Customers_GetSelfieeTxnId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateSelfieeTxn(ctx context.Context, in *customers.UpdateSelfieeTxnRequest, opts ...grpc.CallOption) (*customers.UpdateSelfieeTxnResponse, error) {
	out := new(customers.UpdateSelfieeTxnResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateSelfieeTxn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetLimit(ctx context.Context, in *customers.GetLimitRequest, opts ...grpc.CallOption) (*customers.GetLimitResponse, error) {
	out := new(customers.GetLimitResponse)
	err := c.cc.Invoke(ctx, Customers_GetLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SaveLimit(ctx context.Context, in *customers.SaveLimitRequest, opts ...grpc.CallOption) (*customers.SaveLimitResponse, error) {
	out := new(customers.SaveLimitResponse)
	err := c.cc.Invoke(ctx, Customers_SaveLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) AddMoreDetails(ctx context.Context, in *customers.AddMoreDetailsRequest, opts ...grpc.CallOption) (*customers.AddMoreDetailsResponse, error) {
	out := new(customers.AddMoreDetailsResponse)
	err := c.cc.Invoke(ctx, Customers_AddMoreDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateVehicleNumber(ctx context.Context, in *customers.UpdateVehicleNumberRequest, opts ...grpc.CallOption) (*customers.UpdateVehicleNumberResponse, error) {
	out := new(customers.UpdateVehicleNumberResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateVehicleNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateDlNumber(ctx context.Context, in *customers.UpdateDlNumberRequest, opts ...grpc.CallOption) (*customers.UpdateDlNumberResponse, error) {
	out := new(customers.UpdateDlNumberResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateDlNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SkipScreen(ctx context.Context, in *customers.SkipScreenRequest, opts ...grpc.CallOption) (*customers.SkipScreenResponse, error) {
	out := new(customers.SkipScreenResponse)
	err := c.cc.Invoke(ctx, Customers_SkipScreen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateCustomerById(ctx context.Context, in *customers.UpdateCustomerByIdRequest, opts ...grpc.CallOption) (*customers.UpdateCustomerByIdResponse, error) {
	out := new(customers.UpdateCustomerByIdResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateCustomerById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UploadDocuments(ctx context.Context, in *customers.UploadDocumentsRequest, opts ...grpc.CallOption) (*customers.UploadDocumentsResponse, error) {
	out := new(customers.UploadDocumentsResponse)
	err := c.cc.Invoke(ctx, Customers_UploadDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Logout(ctx context.Context, in *customers.LogoutRequest, opts ...grpc.CallOption) (*customers.LogoutResponse, error) {
	out := new(customers.LogoutResponse)
	err := c.cc.Invoke(ctx, Customers_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCompanyAccDetails(ctx context.Context, in *customers.GetCompanyAccDetailsRequest, opts ...grpc.CallOption) (*customers.GetCompanyAccDetailsResponse, error) {
	out := new(customers.GetCompanyAccDetailsResponse)
	err := c.cc.Invoke(ctx, Customers_GetCompanyAccDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) BulkSms(ctx context.Context, in *customers.BulkSMSRequest, opts ...grpc.CallOption) (*customers.BulkSMSResponse, error) {
	out := new(customers.BulkSMSResponse)
	err := c.cc.Invoke(ctx, Customers_BulkSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) AddFathersName(ctx context.Context, in *customers.AddFathersNameRequest, opts ...grpc.CallOption) (*customers.AddFathersNameResponse, error) {
	out := new(customers.AddFathersNameResponse)
	err := c.cc.Invoke(ctx, Customers_AddFathersName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetOccupationList(ctx context.Context, in *customers.GetOccupationListRequest, opts ...grpc.CallOption) (*customers.GetOccupationListResponse, error) {
	out := new(customers.GetOccupationListResponse)
	err := c.cc.Invoke(ctx, Customers_GetOccupationList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetAddressList(ctx context.Context, in *customers.GetAddressRequest, opts ...grpc.CallOption) (*customers.GetAddressResponse, error) {
	out := new(customers.GetAddressResponse)
	err := c.cc.Invoke(ctx, Customers_GetAddressList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetAppSubmittedScreen(ctx context.Context, in *customers.GetAppSubmittedRequest, opts ...grpc.CallOption) (*customers.GetAppSubmittedResponse, error) {
	out := new(customers.GetAppSubmittedResponse)
	err := c.cc.Invoke(ctx, Customers_GetAppSubmittedScreen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetFloatingVideos(ctx context.Context, in *customers.GetFloatingVideosRequest, opts ...grpc.CallOption) (*customers.GetFloatingVideosResponse, error) {
	out := new(customers.GetFloatingVideosResponse)
	err := c.cc.Invoke(ctx, Customers_GetFloatingVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetRpdLink(ctx context.Context, in *rpd.CreateRpdLinkRequest, opts ...grpc.CallOption) (*rpd.CreateRpdLinkResponse, error) {
	out := new(rpd.CreateRpdLinkResponse)
	err := c.cc.Invoke(ctx, Customers_GetRpdLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) MockPayment(ctx context.Context, in *rpd.MockPaymentRequest, opts ...grpc.CallOption) (*rpd.MockPaymentResponse, error) {
	out := new(rpd.MockPaymentResponse)
	err := c.cc.Invoke(ctx, Customers_MockPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SaveCreditBuilder(ctx context.Context, in *cb.SaveCreditBuilderRequest, opts ...grpc.CallOption) (*cb.SaveCreditBuilderResponse, error) {
	out := new(cb.SaveCreditBuilderResponse)
	err := c.cc.Invoke(ctx, Customers_SaveCreditBuilder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetPaymentSummary(ctx context.Context, in *cb.GetPaymentSummaryRequest, opts ...grpc.CallOption) (*cb.GetPaymentSummaryResponse, error) {
	out := new(cb.GetPaymentSummaryResponse)
	err := c.cc.Invoke(ctx, Customers_GetPaymentSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetEnachUrl(ctx context.Context, in *enach.GetWebUrlRequest, opts ...grpc.CallOption) (*enach.GetWebUrlResponse, error) {
	out := new(enach.GetWebUrlResponse)
	err := c.cc.Invoke(ctx, Customers_GetEnachUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetUpiMandateUrl(ctx context.Context, in *enach.GetWebUrlRequest, opts ...grpc.CallOption) (*enach.GetWebUrlResponse, error) {
	out := new(enach.GetWebUrlResponse)
	err := c.cc.Invoke(ctx, Customers_GetUpiMandateUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetEnachTxnStatus(ctx context.Context, in *enach.GetTxnStatusRequest, opts ...grpc.CallOption) (*enach.GetTxnStatusResponse, error) {
	out := new(enach.GetTxnStatusResponse)
	err := c.cc.Invoke(ctx, Customers_GetEnachTxnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateEnachTxnStatus(ctx context.Context, in *enach.UpdateEnachTxnStatusRequest, opts ...grpc.CallOption) (*enach.UpdateEnachTxnStatusResponse, error) {
	out := new(enach.UpdateEnachTxnStatusResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateEnachTxnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) CBSignup(ctx context.Context, in *cb.CBSignupRequest, opts ...grpc.CallOption) (*cb.CBSignupResponse, error) {
	out := new(cb.CBSignupResponse)
	err := c.cc.Invoke(ctx, Customers_CBSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) CbPayNow(ctx context.Context, in *cb.CbPayNowRequest, opts ...grpc.CallOption) (*cb.CbPayNowResponse, error) {
	out := new(cb.CbPayNowResponse)
	err := c.cc.Invoke(ctx, Customers_CbPayNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetPdBankList(ctx context.Context, in *pd.GetPdBankListRequest, opts ...grpc.CallOption) (*pd.GetPdBankListResponse, error) {
	out := new(pd.GetPdBankListResponse)
	err := c.cc.Invoke(ctx, Customers_GetPdBankList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ValidateBankDetails(ctx context.Context, in *pd.ValidateBankAccountRequest, opts ...grpc.CallOption) (*pd.ValidateBankAccountResponse, error) {
	out := new(pd.ValidateBankAccountResponse)
	err := c.cc.Invoke(ctx, Customers_ValidateBankDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetRpdTransactionStatus(ctx context.Context, in *rpd.GetRpdTransactionStatusRequest, opts ...grpc.CallOption) (*rpd.GetRpdTransactionStatusResponse, error) {
	out := new(rpd.GetRpdTransactionStatusResponse)
	err := c.cc.Invoke(ctx, Customers_GetRpdTransactionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCbTxnStatus(ctx context.Context, in *cb.GetCBTxnStatusRequest, opts ...grpc.CallOption) (*cb.GetCBTxnStatusResponse, error) {
	out := new(cb.GetCBTxnStatusResponse)
	err := c.cc.Invoke(ctx, Customers_GetCbTxnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateCbTxnStatus(ctx context.Context, in *cb.UpdateCBTxnStatusRequest, opts ...grpc.CallOption) (*cb.UpdateCBTxnStatusResponse, error) {
	out := new(cb.UpdateCBTxnStatusResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateCbTxnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ConfirmAddress(ctx context.Context, in *freedom.ConfirmAddressRequest, opts ...grpc.CallOption) (*freedom.ConfirmAddressResponse, error) {
	out := new(freedom.ConfirmAddressResponse)
	err := c.cc.Invoke(ctx, Customers_ConfirmAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) FreedomPayNow(ctx context.Context, in *freedom.FreedomPayNowRequest, opts ...grpc.CallOption) (*freedom.FreedomPayNowResponse, error) {
	out := new(freedom.FreedomPayNowResponse)
	err := c.cc.Invoke(ctx, Customers_FreedomPayNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetFreedomTxnStatus(ctx context.Context, in *freedom.GetFreedomTxnStatusRequest, opts ...grpc.CallOption) (*freedom.GetFreedomTxnStatusResponse, error) {
	out := new(freedom.GetFreedomTxnStatusResponse)
	err := c.cc.Invoke(ctx, Customers_GetFreedomTxnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateFreedomTxnStatus(ctx context.Context, in *freedom.UpdateFreedomTxnStatusRequest, opts ...grpc.CallOption) (*freedom.UpdateFreedomTxnStatusResponse, error) {
	out := new(freedom.UpdateFreedomTxnStatusResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateFreedomTxnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateCategory(ctx context.Context, in *customers.UpdateCategoryRequest, opts ...grpc.CallOption) (*customers.UpdateCategoryResponse, error) {
	out := new(customers.UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetFreedomPaymentOptions(ctx context.Context, in *customers.PaymentOptionRequest, opts ...grpc.CallOption) (*customers.PaymentOptionResponse, error) {
	out := new(customers.PaymentOptionResponse)
	err := c.cc.Invoke(ctx, Customers_GetFreedomPaymentOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCbPaymentOptions(ctx context.Context, in *customers.PaymentOptionRequest, opts ...grpc.CallOption) (*customers.PaymentOptionResponse, error) {
	out := new(customers.PaymentOptionResponse)
	err := c.cc.Invoke(ctx, Customers_GetCbPaymentOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetAATxnStatus(ctx context.Context, in *aa.GetAATransactionStatusRequest, opts ...grpc.CallOption) (*aa.GetAATransactionStatusResponse, error) {
	out := new(aa.GetAATransactionStatusResponse)
	err := c.cc.Invoke(ctx, Customers_GetAATxnStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCreditBuilder(ctx context.Context, in *cb.GetCreditBuilderRequest, opts ...grpc.CallOption) (*cb.GetCreditBuilderResponse, error) {
	out := new(cb.GetCreditBuilderResponse)
	err := c.cc.Invoke(ctx, Customers_GetCreditBuilder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) LessCsImprove(ctx context.Context, in *cb.LessCsImproveRequest, opts ...grpc.CallOption) (*cb.LessCsImproveResponse, error) {
	out := new(cb.LessCsImproveResponse)
	err := c.cc.Invoke(ctx, Customers_LessCsImprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) MoreCsImprove(ctx context.Context, in *cb.MoreCsImproveRequest, opts ...grpc.CallOption) (*cb.MoreCsImproveResponse, error) {
	out := new(cb.MoreCsImproveResponse)
	err := c.cc.Invoke(ctx, Customers_MoreCsImprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCbRejectedData(ctx context.Context, in *cb.GetCbRejectedDataRequest, opts ...grpc.CallOption) (*cb.GetCbRejectedDataResponse, error) {
	out := new(cb.GetCbRejectedDataResponse)
	err := c.cc.Invoke(ctx, Customers_GetCbRejectedData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ForceUpdate(ctx context.Context, in *customers.ForceUpdateRequest, opts ...grpc.CallOption) (*customers.ForceUpdateResponse, error) {
	out := new(customers.ForceUpdateResponse)
	err := c.cc.Invoke(ctx, Customers_ForceUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SaveCustomerAppsList(ctx context.Context, in *customers.SaveCustomerAppsRequest, opts ...grpc.CallOption) (*customers.SaveCustomerAppsResponse, error) {
	out := new(customers.SaveCustomerAppsResponse)
	err := c.cc.Invoke(ctx, Customers_SaveCustomerAppsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateCongratulationStep(ctx context.Context, in *customers.UpdateCongratulationStepRequest, opts ...grpc.CallOption) (*customers.UpdateCongratulationStepResponse, error) {
	out := new(customers.UpdateCongratulationStepResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateCongratulationStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SubmitUploadedDocuments(ctx context.Context, in *customers.SubmitUploadedDocumentsRequest, opts ...grpc.CallOption) (*customers.SubmitUploadedDocumentsResponse, error) {
	out := new(customers.SubmitUploadedDocumentsResponse)
	err := c.cc.Invoke(ctx, Customers_SubmitUploadedDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetVaNumber(ctx context.Context, in *customers.GetVaNumberRequest, opts ...grpc.CallOption) (*customers.GetVaNumberResponse, error) {
	out := new(customers.GetVaNumberResponse)
	err := c.cc.Invoke(ctx, Customers_GetVaNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetSyncStatus(ctx context.Context, in *customers.GetSyncStatusRequest, opts ...grpc.CallOption) (*customers.GetSyncStatusResponse, error) {
	out := new(customers.GetSyncStatusResponse)
	err := c.cc.Invoke(ctx, Customers_GetSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateSyncStatus(ctx context.Context, in *customers.UpdateSyncStatusRequest, opts ...grpc.CallOption) (*customers.UpdateSyncStatusResponse, error) {
	out := new(customers.UpdateSyncStatusResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) CreateVaNumber(ctx context.Context, in *customers.CreateVaNumberRequest, opts ...grpc.CallOption) (*customers.CreateVaNumberResponse, error) {
	out := new(customers.CreateVaNumberResponse)
	err := c.cc.Invoke(ctx, Customers_CreateVaNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) DeleteDocument(ctx context.Context, in *customers.DeleteDocumentRequest, opts ...grpc.CallOption) (*customers.DeleteDocumentResponse, error) {
	out := new(customers.DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, Customers_DeleteDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SyncDecisionEngine(ctx context.Context, in *customers.SyncDecisionEngineRequest, opts ...grpc.CallOption) (*customers.SyncDecisionEngineResponse, error) {
	out := new(customers.SyncDecisionEngineResponse)
	err := c.cc.Invoke(ctx, Customers_SyncDecisionEngine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateCbStandAloneJourney(ctx context.Context, in *cb.UpdateCbStandAloneJourneyRequest, opts ...grpc.CallOption) (*cb.UpdateCbStandAloneJourneyResponse, error) {
	out := new(cb.UpdateCbStandAloneJourneyResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateCbStandAloneJourney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCustomerDetailsbyMobile(ctx context.Context, in *customers.GetCustomerDetailsRequest, opts ...grpc.CallOption) (*customers.GetCustomerDetailsResponse, error) {
	out := new(customers.GetCustomerDetailsResponse)
	err := c.cc.Invoke(ctx, Customers_GetCustomerDetailsbyMobile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetLocLimit(ctx context.Context, in *customers.GetLocLimitRequest, opts ...grpc.CallOption) (*customers.GetLocLimitResponse, error) {
	out := new(customers.GetLocLimitResponse)
	err := c.cc.Invoke(ctx, Customers_GetLocLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateAdditionalVerification(ctx context.Context, in *freedom.UpdateAdditionalVerificationRequest, opts ...grpc.CallOption) (*freedom.UpdateAdditionalVerificationResponse, error) {
	out := new(freedom.UpdateAdditionalVerificationResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateAdditionalVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCustomerInfo(ctx context.Context, in *customers.GetCustomerRequest, opts ...grpc.CallOption) (*customers.GetCustomerResponse, error) {
	out := new(customers.GetCustomerResponse)
	err := c.cc.Invoke(ctx, Customers_GetCustomerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) InsuranceDetailsStaticScreen(ctx context.Context, in *cb.InsuranceDetailsRequest, opts ...grpc.CallOption) (*cb.InsuranceDetailsResponse, error) {
	out := new(cb.InsuranceDetailsResponse)
	err := c.cc.Invoke(ctx, Customers_InsuranceDetailsStaticScreen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCliStatus(ctx context.Context, in *customers.GetCliStatusRequest, opts ...grpc.CallOption) (*customers.GetCliStatusResponse, error) {
	out := new(customers.GetCliStatusResponse)
	err := c.cc.Invoke(ctx, Customers_GetCliStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ApplyCliJourney(ctx context.Context, in *customers.ApplyCliJourneyRequest, opts ...grpc.CallOption) (*customers.ApplyCliJourneyResponse, error) {
	out := new(customers.ApplyCliJourneyResponse)
	err := c.cc.Invoke(ctx, Customers_ApplyCliJourney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) RestoreAccount(ctx context.Context, in *customers.RestoreAccountRequest, opts ...grpc.CallOption) (*customers.RestoreAccountResponse, error) {
	out := new(customers.RestoreAccountResponse)
	err := c.cc.Invoke(ctx, Customers_RestoreAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetPocketPersonalAccidentProtectionPlan(ctx context.Context, in *customers.GetPocketPersonalAccidentProtectionPlanRequest, opts ...grpc.CallOption) (*customers.GetPocketPersonalAccidentProtectionPlanResponse, error) {
	out := new(customers.GetPocketPersonalAccidentProtectionPlanResponse)
	err := c.cc.Invoke(ctx, Customers_GetPocketPersonalAccidentProtectionPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateCbStandAloneConfirmation(ctx context.Context, in *cb.UpdateCbStandAloneConfirmationRequest, opts ...grpc.CallOption) (*cb.UpdateCbStandAloneConfirmationResponse, error) {
	out := new(cb.UpdateCbStandAloneConfirmationResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateCbStandAloneConfirmation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateCbStandAloneCancellation(ctx context.Context, in *cb.UpdateCbStandAloneCancellationRequest, opts ...grpc.CallOption) (*cb.UpdateCbStandAloneCancellationResponse, error) {
	out := new(cb.UpdateCbStandAloneCancellationResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateCbStandAloneCancellation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetGlobalPopups(ctx context.Context, in *customers.GetGlobalPopupsRequest, opts ...grpc.CallOption) (*customers.GetGlobalPopupsResponse, error) {
	out := new(customers.GetGlobalPopupsResponse)
	err := c.cc.Invoke(ctx, Customers_GetGlobalPopups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ResetBannerCode(ctx context.Context, in *customers.ResetBannerCodeRequest, opts ...grpc.CallOption) (*customers.ResetBannerCodeResponse, error) {
	out := new(customers.ResetBannerCodeResponse)
	err := c.cc.Invoke(ctx, Customers_ResetBannerCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SendLamfOtp(ctx context.Context, in *lamf.SendLamfOtpRequest, opts ...grpc.CallOption) (*lamf.SendLamfOtpResponse, error) {
	out := new(lamf.SendLamfOtpResponse)
	err := c.cc.Invoke(ctx, Customers_SendLamfOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) VerifyLamfOtp(ctx context.Context, in *lamf.VerifyLamfOtpRequest, opts ...grpc.CallOption) (*lamf.VerifyLamfOtpResponse, error) {
	out := new(lamf.VerifyLamfOtpResponse)
	err := c.cc.Invoke(ctx, Customers_VerifyLamfOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) SendLamfPledgeOtp(ctx context.Context, in *lamf.SendLamfPledgeOtpRequest, opts ...grpc.CallOption) (*lamf.SendLamfPledgeOtpResponse, error) {
	out := new(lamf.SendLamfPledgeOtpResponse)
	err := c.cc.Invoke(ctx, Customers_SendLamfPledgeOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) VerifyLamfPledgeOtp(ctx context.Context, in *lamf.VerifyLamfPledgeOtpRequest, opts ...grpc.CallOption) (*lamf.VerifyLamfPledgeOtpResponse, error) {
	out := new(lamf.VerifyLamfPledgeOtpResponse)
	err := c.cc.Invoke(ctx, Customers_VerifyLamfPledgeOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) ApplyLamf(ctx context.Context, in *lamf.ApplyLamfRequest, opts ...grpc.CallOption) (*lamf.ApplyLamfResponse, error) {
	out := new(lamf.ApplyLamfResponse)
	err := c.cc.Invoke(ctx, Customers_ApplyLamf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) UpdateSanctionAmount(ctx context.Context, in *customers.UpdateSanctionAmountRequest, opts ...grpc.CallOption) (*customers.UpdateSanctionAmountResponse, error) {
	out := new(customers.UpdateSanctionAmountResponse)
	err := c.cc.Invoke(ctx, Customers_UpdateSanctionAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetMessengerMode(ctx context.Context, in *customers.GetMessengerModeRequest, opts ...grpc.CallOption) (*customers.GetMessengerModeResponse, error) {
	out := new(customers.GetMessengerModeResponse)
	err := c.cc.Invoke(ctx, Customers_GetMessengerMode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersServer is the server API for Customers service.
// All implementations must embed UnimplementedCustomersServer
// for forward compatibility
type CustomersServer interface {
	SendOtp(context.Context, *customers.SendOtpRequest) (*customers.SendOtpRespone, error)
	VerifyOtp(context.Context, *customers.VerifyOtpReqeust) (*customers.VerifyOtpResponse, error)
	Setmpin(context.Context, *customers.SetMpinRequest) (*customers.SetMpinResponse, error)
	VerifyMpin(context.Context, *customers.VerifyMpinRequest) (*customers.VerifyMpinResponse, error)
	ChangeMpin(context.Context, *customers.ChangeMpinRequest) (*customers.ChangeMpinResponse, error)
	ForgotMpin(context.Context, *customers.ForgotMpinRequest) (*customers.ForgotMpinResponse, error)
	ForgotMpinVerify(context.Context, *customers.ForgotMpinVerifyRequest) (*customers.ForgotMpinVerifyResponse, error)
	ProfileUpdatetnc(context.Context, *customers.UpdateTncRequest) (*customers.UpdateTncResponse, error)
	UpdateProfileBasic(context.Context, *customers.UpdateProfileBasicRequest) (*customers.UpdateProfileBasicResponse, error)
	GetProfile(context.Context, *customers.GetCustomerProfileRequest) (*customers.GetCustomerProfileResponse, error)
	GetStep(context.Context, *customers.GetstepRequest) (*customers.GetstepResponse, error)
	SaveBasicDetails(context.Context, *customers.SaveBasicDetailsRequest) (*customers.SaveBasicDetailsResponse, error)
	SaveUnlockLimit(context.Context, *customers.SaveUnlockLimitRequest) (*customers.SaveUnlockLimitResponse, error)
	SendOtptoPersonalEmail(context.Context, *customers.SendEmailOtpRequest) (*customers.SendEmailOtpResponse, error)
	VerifyOtptoPersonalEmail(context.Context, *customers.VerifyEmailOtpRequest) (*customers.VerifyEmailOtpResponse, error)
	GetCustomerById(context.Context, *customers.GetCustomerByIdRequest) (*customers.GetCustomerByIdResponse, error)
	GetDashboard(context.Context, *customers.GetDashboardRequest) (*customers.GetDashboardResponse, error)
	GetDashboardMainCard(context.Context, *customers.GetDashboardMainCardRequest) (*customers.GetDashboardMainCardResponse, error)
	AddBankAccountDetails(context.Context, *customers.AddBankAccountDetailsRequest) (*customers.AddBankAccountDetailsResponse, error)
	GetBankAccountDetails(context.Context, *customers.GetBankAccountDetailsRequest) (*customers.GetBankAccountDetailsResponse, error)
	GetBasicInfo(context.Context, *customers.GetBasicInfoRequest) (*customers.GetBasicInfoResponse, error)
	GetProfessionalInfo(context.Context, *customers.GetProfessionalInfoRequest) (*customers.GetProfessionalInfoResponse, error)
	CreateCustomerReference(context.Context, *customers.CreateCustomerReferenceRequest) (*customers.CreateCustomerReferenceResponse, error)
	SendOtptoProfessionalEmail(context.Context, *customers.SendEmailOtpRequest) (*customers.SendEmailOtpResponse, error)
	VerifyOtptoProfessionalEmail(context.Context, *customers.VerifyEmailOtpRequest) (*customers.VerifyEmailOtpResponse, error)
	GetAllStates(context.Context, *customers.GetAllStatesRequest) (*customers.GetAllStatesResponse, error)
	GetCitiesByStateId(context.Context, *customers.GetCitiesRequest) (*customers.GetCitiesResponse, error)
	GetDocumentList(context.Context, *customers.GetDocumentsRequest) (*customers.GetDocumentsResponse, error)
	UpdateOkycTxn(context.Context, *customers.UpdateOkycTxnRequest) (*customers.UpdateOkycTxnResponse, error)
	AddAddress(context.Context, *customers.AddAddressRequest) (*customers.AddAddressResponse, error)
	UpdateDob(context.Context, *customers.UpdateDOBRequest) (*customers.UpdateDOBResponse, error)
	ValidatePan(context.Context, *customers.ValidatePanRequest) (*customers.ValidatePanResponse, error)
	DeleteProfile(context.Context, *customers.DeleteProfileRequest) (*customers.DeleteProfileResponse, error)
	GetBankList(context.Context, *aa.GetBankListRequest) (*aa.GetBankListResponse, error)
	AddSuspendedCustomer(context.Context, *customers.AddSuspendedCustomerRequest) (*customers.AddSuspendedCustomerResponse, error)
	UpdatelocStatus(context.Context, *customers.LocStatusRequest) (*customers.LocStatusResponse, error)
	InitiateRequest(context.Context, *aa.InitiateRequest) (*aa.InitiateResponse, error)
	AddUserApps(context.Context, *customers.AddUserAppsRequest) (*customers.AddUserAppsResponse, error)
	FetchRCProfile(context.Context, *customers.FetchRCProfileRequest) (*customers.FetchRCProfileResponse, error)
	Disablempin(context.Context, *customers.DisableMpinRequest) (*customers.DisableMpinResponse, error)
	UpdateMobileSendOtp(context.Context, *customers.UpdateMobileSendOtpRequest) (*customers.UpdateMobileSendOtpResponse, error)
	Updatemobileverifyotp(context.Context, *customers.UpdateMobileVerifyOtpRequest) (*customers.UpdateMobileVerifyOtpResponse, error)
	AddGstNumber(context.Context, *customers.AddGstNumberRequest) (*customers.AddGstNumberResponse, error)
	GetSelfieeTxnId(context.Context, *customers.GetSelfieeTxnIdRequest) (*customers.GetSelfieeTxnIdResponse, error)
	UpdateSelfieeTxn(context.Context, *customers.UpdateSelfieeTxnRequest) (*customers.UpdateSelfieeTxnResponse, error)
	GetLimit(context.Context, *customers.GetLimitRequest) (*customers.GetLimitResponse, error)
	SaveLimit(context.Context, *customers.SaveLimitRequest) (*customers.SaveLimitResponse, error)
	AddMoreDetails(context.Context, *customers.AddMoreDetailsRequest) (*customers.AddMoreDetailsResponse, error)
	UpdateVehicleNumber(context.Context, *customers.UpdateVehicleNumberRequest) (*customers.UpdateVehicleNumberResponse, error)
	UpdateDlNumber(context.Context, *customers.UpdateDlNumberRequest) (*customers.UpdateDlNumberResponse, error)
	SkipScreen(context.Context, *customers.SkipScreenRequest) (*customers.SkipScreenResponse, error)
	UpdateCustomerById(context.Context, *customers.UpdateCustomerByIdRequest) (*customers.UpdateCustomerByIdResponse, error)
	UploadDocuments(context.Context, *customers.UploadDocumentsRequest) (*customers.UploadDocumentsResponse, error)
	Logout(context.Context, *customers.LogoutRequest) (*customers.LogoutResponse, error)
	GetCompanyAccDetails(context.Context, *customers.GetCompanyAccDetailsRequest) (*customers.GetCompanyAccDetailsResponse, error)
	BulkSms(context.Context, *customers.BulkSMSRequest) (*customers.BulkSMSResponse, error)
	AddFathersName(context.Context, *customers.AddFathersNameRequest) (*customers.AddFathersNameResponse, error)
	GetOccupationList(context.Context, *customers.GetOccupationListRequest) (*customers.GetOccupationListResponse, error)
	GetAddressList(context.Context, *customers.GetAddressRequest) (*customers.GetAddressResponse, error)
	GetAppSubmittedScreen(context.Context, *customers.GetAppSubmittedRequest) (*customers.GetAppSubmittedResponse, error)
	GetFloatingVideos(context.Context, *customers.GetFloatingVideosRequest) (*customers.GetFloatingVideosResponse, error)
	GetRpdLink(context.Context, *rpd.CreateRpdLinkRequest) (*rpd.CreateRpdLinkResponse, error)
	MockPayment(context.Context, *rpd.MockPaymentRequest) (*rpd.MockPaymentResponse, error)
	SaveCreditBuilder(context.Context, *cb.SaveCreditBuilderRequest) (*cb.SaveCreditBuilderResponse, error)
	GetPaymentSummary(context.Context, *cb.GetPaymentSummaryRequest) (*cb.GetPaymentSummaryResponse, error)
	GetEnachUrl(context.Context, *enach.GetWebUrlRequest) (*enach.GetWebUrlResponse, error)
	GetUpiMandateUrl(context.Context, *enach.GetWebUrlRequest) (*enach.GetWebUrlResponse, error)
	GetEnachTxnStatus(context.Context, *enach.GetTxnStatusRequest) (*enach.GetTxnStatusResponse, error)
	UpdateEnachTxnStatus(context.Context, *enach.UpdateEnachTxnStatusRequest) (*enach.UpdateEnachTxnStatusResponse, error)
	CBSignup(context.Context, *cb.CBSignupRequest) (*cb.CBSignupResponse, error)
	CbPayNow(context.Context, *cb.CbPayNowRequest) (*cb.CbPayNowResponse, error)
	GetPdBankList(context.Context, *pd.GetPdBankListRequest) (*pd.GetPdBankListResponse, error)
	ValidateBankDetails(context.Context, *pd.ValidateBankAccountRequest) (*pd.ValidateBankAccountResponse, error)
	GetRpdTransactionStatus(context.Context, *rpd.GetRpdTransactionStatusRequest) (*rpd.GetRpdTransactionStatusResponse, error)
	GetCbTxnStatus(context.Context, *cb.GetCBTxnStatusRequest) (*cb.GetCBTxnStatusResponse, error)
	UpdateCbTxnStatus(context.Context, *cb.UpdateCBTxnStatusRequest) (*cb.UpdateCBTxnStatusResponse, error)
	ConfirmAddress(context.Context, *freedom.ConfirmAddressRequest) (*freedom.ConfirmAddressResponse, error)
	FreedomPayNow(context.Context, *freedom.FreedomPayNowRequest) (*freedom.FreedomPayNowResponse, error)
	GetFreedomTxnStatus(context.Context, *freedom.GetFreedomTxnStatusRequest) (*freedom.GetFreedomTxnStatusResponse, error)
	UpdateFreedomTxnStatus(context.Context, *freedom.UpdateFreedomTxnStatusRequest) (*freedom.UpdateFreedomTxnStatusResponse, error)
	UpdateCategory(context.Context, *customers.UpdateCategoryRequest) (*customers.UpdateCategoryResponse, error)
	GetFreedomPaymentOptions(context.Context, *customers.PaymentOptionRequest) (*customers.PaymentOptionResponse, error)
	GetCbPaymentOptions(context.Context, *customers.PaymentOptionRequest) (*customers.PaymentOptionResponse, error)
	GetAATxnStatus(context.Context, *aa.GetAATransactionStatusRequest) (*aa.GetAATransactionStatusResponse, error)
	GetCreditBuilder(context.Context, *cb.GetCreditBuilderRequest) (*cb.GetCreditBuilderResponse, error)
	LessCsImprove(context.Context, *cb.LessCsImproveRequest) (*cb.LessCsImproveResponse, error)
	MoreCsImprove(context.Context, *cb.MoreCsImproveRequest) (*cb.MoreCsImproveResponse, error)
	GetCbRejectedData(context.Context, *cb.GetCbRejectedDataRequest) (*cb.GetCbRejectedDataResponse, error)
	ForceUpdate(context.Context, *customers.ForceUpdateRequest) (*customers.ForceUpdateResponse, error)
	SaveCustomerAppsList(context.Context, *customers.SaveCustomerAppsRequest) (*customers.SaveCustomerAppsResponse, error)
	UpdateCongratulationStep(context.Context, *customers.UpdateCongratulationStepRequest) (*customers.UpdateCongratulationStepResponse, error)
	SubmitUploadedDocuments(context.Context, *customers.SubmitUploadedDocumentsRequest) (*customers.SubmitUploadedDocumentsResponse, error)
	GetVaNumber(context.Context, *customers.GetVaNumberRequest) (*customers.GetVaNumberResponse, error)
	GetSyncStatus(context.Context, *customers.GetSyncStatusRequest) (*customers.GetSyncStatusResponse, error)
	UpdateSyncStatus(context.Context, *customers.UpdateSyncStatusRequest) (*customers.UpdateSyncStatusResponse, error)
	CreateVaNumber(context.Context, *customers.CreateVaNumberRequest) (*customers.CreateVaNumberResponse, error)
	DeleteDocument(context.Context, *customers.DeleteDocumentRequest) (*customers.DeleteDocumentResponse, error)
	SyncDecisionEngine(context.Context, *customers.SyncDecisionEngineRequest) (*customers.SyncDecisionEngineResponse, error)
	UpdateCbStandAloneJourney(context.Context, *cb.UpdateCbStandAloneJourneyRequest) (*cb.UpdateCbStandAloneJourneyResponse, error)
	GetCustomerDetailsbyMobile(context.Context, *customers.GetCustomerDetailsRequest) (*customers.GetCustomerDetailsResponse, error)
	GetLocLimit(context.Context, *customers.GetLocLimitRequest) (*customers.GetLocLimitResponse, error)
	UpdateAdditionalVerification(context.Context, *freedom.UpdateAdditionalVerificationRequest) (*freedom.UpdateAdditionalVerificationResponse, error)
	GetCustomerInfo(context.Context, *customers.GetCustomerRequest) (*customers.GetCustomerResponse, error)
	InsuranceDetailsStaticScreen(context.Context, *cb.InsuranceDetailsRequest) (*cb.InsuranceDetailsResponse, error)
	GetCliStatus(context.Context, *customers.GetCliStatusRequest) (*customers.GetCliStatusResponse, error)
	ApplyCliJourney(context.Context, *customers.ApplyCliJourneyRequest) (*customers.ApplyCliJourneyResponse, error)
	RestoreAccount(context.Context, *customers.RestoreAccountRequest) (*customers.RestoreAccountResponse, error)
	GetPocketPersonalAccidentProtectionPlan(context.Context, *customers.GetPocketPersonalAccidentProtectionPlanRequest) (*customers.GetPocketPersonalAccidentProtectionPlanResponse, error)
	UpdateCbStandAloneConfirmation(context.Context, *cb.UpdateCbStandAloneConfirmationRequest) (*cb.UpdateCbStandAloneConfirmationResponse, error)
	UpdateCbStandAloneCancellation(context.Context, *cb.UpdateCbStandAloneCancellationRequest) (*cb.UpdateCbStandAloneCancellationResponse, error)
	GetGlobalPopups(context.Context, *customers.GetGlobalPopupsRequest) (*customers.GetGlobalPopupsResponse, error)
	ResetBannerCode(context.Context, *customers.ResetBannerCodeRequest) (*customers.ResetBannerCodeResponse, error)
	SendLamfOtp(context.Context, *lamf.SendLamfOtpRequest) (*lamf.SendLamfOtpResponse, error)
	VerifyLamfOtp(context.Context, *lamf.VerifyLamfOtpRequest) (*lamf.VerifyLamfOtpResponse, error)
	SendLamfPledgeOtp(context.Context, *lamf.SendLamfPledgeOtpRequest) (*lamf.SendLamfPledgeOtpResponse, error)
	VerifyLamfPledgeOtp(context.Context, *lamf.VerifyLamfPledgeOtpRequest) (*lamf.VerifyLamfPledgeOtpResponse, error)
	ApplyLamf(context.Context, *lamf.ApplyLamfRequest) (*lamf.ApplyLamfResponse, error)
	UpdateSanctionAmount(context.Context, *customers.UpdateSanctionAmountRequest) (*customers.UpdateSanctionAmountResponse, error)
	GetMessengerMode(context.Context, *customers.GetMessengerModeRequest) (*customers.GetMessengerModeResponse, error)
	mustEmbedUnimplementedCustomersServer()
}

// UnimplementedCustomersServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersServer struct {
}

func (UnimplementedCustomersServer) SendOtp(context.Context, *customers.SendOtpRequest) (*customers.SendOtpRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtp not implemented")
}
func (UnimplementedCustomersServer) VerifyOtp(context.Context, *customers.VerifyOtpReqeust) (*customers.VerifyOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtp not implemented")
}
func (UnimplementedCustomersServer) Setmpin(context.Context, *customers.SetMpinRequest) (*customers.SetMpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setmpin not implemented")
}
func (UnimplementedCustomersServer) VerifyMpin(context.Context, *customers.VerifyMpinRequest) (*customers.VerifyMpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMpin not implemented")
}
func (UnimplementedCustomersServer) ChangeMpin(context.Context, *customers.ChangeMpinRequest) (*customers.ChangeMpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMpin not implemented")
}
func (UnimplementedCustomersServer) ForgotMpin(context.Context, *customers.ForgotMpinRequest) (*customers.ForgotMpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotMpin not implemented")
}
func (UnimplementedCustomersServer) ForgotMpinVerify(context.Context, *customers.ForgotMpinVerifyRequest) (*customers.ForgotMpinVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotMpinVerify not implemented")
}
func (UnimplementedCustomersServer) ProfileUpdatetnc(context.Context, *customers.UpdateTncRequest) (*customers.UpdateTncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileUpdatetnc not implemented")
}
func (UnimplementedCustomersServer) UpdateProfileBasic(context.Context, *customers.UpdateProfileBasicRequest) (*customers.UpdateProfileBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileBasic not implemented")
}
func (UnimplementedCustomersServer) GetProfile(context.Context, *customers.GetCustomerProfileRequest) (*customers.GetCustomerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedCustomersServer) GetStep(context.Context, *customers.GetstepRequest) (*customers.GetstepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStep not implemented")
}
func (UnimplementedCustomersServer) SaveBasicDetails(context.Context, *customers.SaveBasicDetailsRequest) (*customers.SaveBasicDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBasicDetails not implemented")
}
func (UnimplementedCustomersServer) SaveUnlockLimit(context.Context, *customers.SaveUnlockLimitRequest) (*customers.SaveUnlockLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUnlockLimit not implemented")
}
func (UnimplementedCustomersServer) SendOtptoPersonalEmail(context.Context, *customers.SendEmailOtpRequest) (*customers.SendEmailOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtptoPersonalEmail not implemented")
}
func (UnimplementedCustomersServer) VerifyOtptoPersonalEmail(context.Context, *customers.VerifyEmailOtpRequest) (*customers.VerifyEmailOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtptoPersonalEmail not implemented")
}
func (UnimplementedCustomersServer) GetCustomerById(context.Context, *customers.GetCustomerByIdRequest) (*customers.GetCustomerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerById not implemented")
}
func (UnimplementedCustomersServer) GetDashboard(context.Context, *customers.GetDashboardRequest) (*customers.GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedCustomersServer) GetDashboardMainCard(context.Context, *customers.GetDashboardMainCardRequest) (*customers.GetDashboardMainCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardMainCard not implemented")
}
func (UnimplementedCustomersServer) AddBankAccountDetails(context.Context, *customers.AddBankAccountDetailsRequest) (*customers.AddBankAccountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankAccountDetails not implemented")
}
func (UnimplementedCustomersServer) GetBankAccountDetails(context.Context, *customers.GetBankAccountDetailsRequest) (*customers.GetBankAccountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccountDetails not implemented")
}
func (UnimplementedCustomersServer) GetBasicInfo(context.Context, *customers.GetBasicInfoRequest) (*customers.GetBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicInfo not implemented")
}
func (UnimplementedCustomersServer) GetProfessionalInfo(context.Context, *customers.GetProfessionalInfoRequest) (*customers.GetProfessionalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfessionalInfo not implemented")
}
func (UnimplementedCustomersServer) CreateCustomerReference(context.Context, *customers.CreateCustomerReferenceRequest) (*customers.CreateCustomerReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerReference not implemented")
}
func (UnimplementedCustomersServer) SendOtptoProfessionalEmail(context.Context, *customers.SendEmailOtpRequest) (*customers.SendEmailOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtptoProfessionalEmail not implemented")
}
func (UnimplementedCustomersServer) VerifyOtptoProfessionalEmail(context.Context, *customers.VerifyEmailOtpRequest) (*customers.VerifyEmailOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtptoProfessionalEmail not implemented")
}
func (UnimplementedCustomersServer) GetAllStates(context.Context, *customers.GetAllStatesRequest) (*customers.GetAllStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStates not implemented")
}
func (UnimplementedCustomersServer) GetCitiesByStateId(context.Context, *customers.GetCitiesRequest) (*customers.GetCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCitiesByStateId not implemented")
}
func (UnimplementedCustomersServer) GetDocumentList(context.Context, *customers.GetDocumentsRequest) (*customers.GetDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentList not implemented")
}
func (UnimplementedCustomersServer) UpdateOkycTxn(context.Context, *customers.UpdateOkycTxnRequest) (*customers.UpdateOkycTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOkycTxn not implemented")
}
func (UnimplementedCustomersServer) AddAddress(context.Context, *customers.AddAddressRequest) (*customers.AddAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedCustomersServer) UpdateDob(context.Context, *customers.UpdateDOBRequest) (*customers.UpdateDOBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDob not implemented")
}
func (UnimplementedCustomersServer) ValidatePan(context.Context, *customers.ValidatePanRequest) (*customers.ValidatePanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePan not implemented")
}
func (UnimplementedCustomersServer) DeleteProfile(context.Context, *customers.DeleteProfileRequest) (*customers.DeleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedCustomersServer) GetBankList(context.Context, *aa.GetBankListRequest) (*aa.GetBankListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankList not implemented")
}
func (UnimplementedCustomersServer) AddSuspendedCustomer(context.Context, *customers.AddSuspendedCustomerRequest) (*customers.AddSuspendedCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSuspendedCustomer not implemented")
}
func (UnimplementedCustomersServer) UpdatelocStatus(context.Context, *customers.LocStatusRequest) (*customers.LocStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatelocStatus not implemented")
}
func (UnimplementedCustomersServer) InitiateRequest(context.Context, *aa.InitiateRequest) (*aa.InitiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateRequest not implemented")
}
func (UnimplementedCustomersServer) AddUserApps(context.Context, *customers.AddUserAppsRequest) (*customers.AddUserAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserApps not implemented")
}
func (UnimplementedCustomersServer) FetchRCProfile(context.Context, *customers.FetchRCProfileRequest) (*customers.FetchRCProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRCProfile not implemented")
}
func (UnimplementedCustomersServer) Disablempin(context.Context, *customers.DisableMpinRequest) (*customers.DisableMpinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disablempin not implemented")
}
func (UnimplementedCustomersServer) UpdateMobileSendOtp(context.Context, *customers.UpdateMobileSendOtpRequest) (*customers.UpdateMobileSendOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMobileSendOtp not implemented")
}
func (UnimplementedCustomersServer) Updatemobileverifyotp(context.Context, *customers.UpdateMobileVerifyOtpRequest) (*customers.UpdateMobileVerifyOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatemobileverifyotp not implemented")
}
func (UnimplementedCustomersServer) AddGstNumber(context.Context, *customers.AddGstNumberRequest) (*customers.AddGstNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGstNumber not implemented")
}
func (UnimplementedCustomersServer) GetSelfieeTxnId(context.Context, *customers.GetSelfieeTxnIdRequest) (*customers.GetSelfieeTxnIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfieeTxnId not implemented")
}
func (UnimplementedCustomersServer) UpdateSelfieeTxn(context.Context, *customers.UpdateSelfieeTxnRequest) (*customers.UpdateSelfieeTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSelfieeTxn not implemented")
}
func (UnimplementedCustomersServer) GetLimit(context.Context, *customers.GetLimitRequest) (*customers.GetLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimit not implemented")
}
func (UnimplementedCustomersServer) SaveLimit(context.Context, *customers.SaveLimitRequest) (*customers.SaveLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLimit not implemented")
}
func (UnimplementedCustomersServer) AddMoreDetails(context.Context, *customers.AddMoreDetailsRequest) (*customers.AddMoreDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMoreDetails not implemented")
}
func (UnimplementedCustomersServer) UpdateVehicleNumber(context.Context, *customers.UpdateVehicleNumberRequest) (*customers.UpdateVehicleNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicleNumber not implemented")
}
func (UnimplementedCustomersServer) UpdateDlNumber(context.Context, *customers.UpdateDlNumberRequest) (*customers.UpdateDlNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDlNumber not implemented")
}
func (UnimplementedCustomersServer) SkipScreen(context.Context, *customers.SkipScreenRequest) (*customers.SkipScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipScreen not implemented")
}
func (UnimplementedCustomersServer) UpdateCustomerById(context.Context, *customers.UpdateCustomerByIdRequest) (*customers.UpdateCustomerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerById not implemented")
}
func (UnimplementedCustomersServer) UploadDocuments(context.Context, *customers.UploadDocumentsRequest) (*customers.UploadDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocuments not implemented")
}
func (UnimplementedCustomersServer) Logout(context.Context, *customers.LogoutRequest) (*customers.LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedCustomersServer) GetCompanyAccDetails(context.Context, *customers.GetCompanyAccDetailsRequest) (*customers.GetCompanyAccDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyAccDetails not implemented")
}
func (UnimplementedCustomersServer) BulkSms(context.Context, *customers.BulkSMSRequest) (*customers.BulkSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkSms not implemented")
}
func (UnimplementedCustomersServer) AddFathersName(context.Context, *customers.AddFathersNameRequest) (*customers.AddFathersNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFathersName not implemented")
}
func (UnimplementedCustomersServer) GetOccupationList(context.Context, *customers.GetOccupationListRequest) (*customers.GetOccupationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccupationList not implemented")
}
func (UnimplementedCustomersServer) GetAddressList(context.Context, *customers.GetAddressRequest) (*customers.GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (UnimplementedCustomersServer) GetAppSubmittedScreen(context.Context, *customers.GetAppSubmittedRequest) (*customers.GetAppSubmittedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSubmittedScreen not implemented")
}
func (UnimplementedCustomersServer) GetFloatingVideos(context.Context, *customers.GetFloatingVideosRequest) (*customers.GetFloatingVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFloatingVideos not implemented")
}
func (UnimplementedCustomersServer) GetRpdLink(context.Context, *rpd.CreateRpdLinkRequest) (*rpd.CreateRpdLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRpdLink not implemented")
}
func (UnimplementedCustomersServer) MockPayment(context.Context, *rpd.MockPaymentRequest) (*rpd.MockPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MockPayment not implemented")
}
func (UnimplementedCustomersServer) SaveCreditBuilder(context.Context, *cb.SaveCreditBuilderRequest) (*cb.SaveCreditBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCreditBuilder not implemented")
}
func (UnimplementedCustomersServer) GetPaymentSummary(context.Context, *cb.GetPaymentSummaryRequest) (*cb.GetPaymentSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentSummary not implemented")
}
func (UnimplementedCustomersServer) GetEnachUrl(context.Context, *enach.GetWebUrlRequest) (*enach.GetWebUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnachUrl not implemented")
}
func (UnimplementedCustomersServer) GetUpiMandateUrl(context.Context, *enach.GetWebUrlRequest) (*enach.GetWebUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpiMandateUrl not implemented")
}
func (UnimplementedCustomersServer) GetEnachTxnStatus(context.Context, *enach.GetTxnStatusRequest) (*enach.GetTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnachTxnStatus not implemented")
}
func (UnimplementedCustomersServer) UpdateEnachTxnStatus(context.Context, *enach.UpdateEnachTxnStatusRequest) (*enach.UpdateEnachTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnachTxnStatus not implemented")
}
func (UnimplementedCustomersServer) CBSignup(context.Context, *cb.CBSignupRequest) (*cb.CBSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CBSignup not implemented")
}
func (UnimplementedCustomersServer) CbPayNow(context.Context, *cb.CbPayNowRequest) (*cb.CbPayNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CbPayNow not implemented")
}
func (UnimplementedCustomersServer) GetPdBankList(context.Context, *pd.GetPdBankListRequest) (*pd.GetPdBankListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPdBankList not implemented")
}
func (UnimplementedCustomersServer) ValidateBankDetails(context.Context, *pd.ValidateBankAccountRequest) (*pd.ValidateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBankDetails not implemented")
}
func (UnimplementedCustomersServer) GetRpdTransactionStatus(context.Context, *rpd.GetRpdTransactionStatusRequest) (*rpd.GetRpdTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRpdTransactionStatus not implemented")
}
func (UnimplementedCustomersServer) GetCbTxnStatus(context.Context, *cb.GetCBTxnStatusRequest) (*cb.GetCBTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCbTxnStatus not implemented")
}
func (UnimplementedCustomersServer) UpdateCbTxnStatus(context.Context, *cb.UpdateCBTxnStatusRequest) (*cb.UpdateCBTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCbTxnStatus not implemented")
}
func (UnimplementedCustomersServer) ConfirmAddress(context.Context, *freedom.ConfirmAddressRequest) (*freedom.ConfirmAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAddress not implemented")
}
func (UnimplementedCustomersServer) FreedomPayNow(context.Context, *freedom.FreedomPayNowRequest) (*freedom.FreedomPayNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreedomPayNow not implemented")
}
func (UnimplementedCustomersServer) GetFreedomTxnStatus(context.Context, *freedom.GetFreedomTxnStatusRequest) (*freedom.GetFreedomTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreedomTxnStatus not implemented")
}
func (UnimplementedCustomersServer) UpdateFreedomTxnStatus(context.Context, *freedom.UpdateFreedomTxnStatusRequest) (*freedom.UpdateFreedomTxnStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFreedomTxnStatus not implemented")
}
func (UnimplementedCustomersServer) UpdateCategory(context.Context, *customers.UpdateCategoryRequest) (*customers.UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCustomersServer) GetFreedomPaymentOptions(context.Context, *customers.PaymentOptionRequest) (*customers.PaymentOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreedomPaymentOptions not implemented")
}
func (UnimplementedCustomersServer) GetCbPaymentOptions(context.Context, *customers.PaymentOptionRequest) (*customers.PaymentOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCbPaymentOptions not implemented")
}
func (UnimplementedCustomersServer) GetAATxnStatus(context.Context, *aa.GetAATransactionStatusRequest) (*aa.GetAATransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAATxnStatus not implemented")
}
func (UnimplementedCustomersServer) GetCreditBuilder(context.Context, *cb.GetCreditBuilderRequest) (*cb.GetCreditBuilderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditBuilder not implemented")
}
func (UnimplementedCustomersServer) LessCsImprove(context.Context, *cb.LessCsImproveRequest) (*cb.LessCsImproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LessCsImprove not implemented")
}
func (UnimplementedCustomersServer) MoreCsImprove(context.Context, *cb.MoreCsImproveRequest) (*cb.MoreCsImproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoreCsImprove not implemented")
}
func (UnimplementedCustomersServer) GetCbRejectedData(context.Context, *cb.GetCbRejectedDataRequest) (*cb.GetCbRejectedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCbRejectedData not implemented")
}
func (UnimplementedCustomersServer) ForceUpdate(context.Context, *customers.ForceUpdateRequest) (*customers.ForceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceUpdate not implemented")
}
func (UnimplementedCustomersServer) SaveCustomerAppsList(context.Context, *customers.SaveCustomerAppsRequest) (*customers.SaveCustomerAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCustomerAppsList not implemented")
}
func (UnimplementedCustomersServer) UpdateCongratulationStep(context.Context, *customers.UpdateCongratulationStepRequest) (*customers.UpdateCongratulationStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCongratulationStep not implemented")
}
func (UnimplementedCustomersServer) SubmitUploadedDocuments(context.Context, *customers.SubmitUploadedDocumentsRequest) (*customers.SubmitUploadedDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUploadedDocuments not implemented")
}
func (UnimplementedCustomersServer) GetVaNumber(context.Context, *customers.GetVaNumberRequest) (*customers.GetVaNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaNumber not implemented")
}
func (UnimplementedCustomersServer) GetSyncStatus(context.Context, *customers.GetSyncStatusRequest) (*customers.GetSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncStatus not implemented")
}
func (UnimplementedCustomersServer) UpdateSyncStatus(context.Context, *customers.UpdateSyncStatusRequest) (*customers.UpdateSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncStatus not implemented")
}
func (UnimplementedCustomersServer) CreateVaNumber(context.Context, *customers.CreateVaNumberRequest) (*customers.CreateVaNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaNumber not implemented")
}
func (UnimplementedCustomersServer) DeleteDocument(context.Context, *customers.DeleteDocumentRequest) (*customers.DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedCustomersServer) SyncDecisionEngine(context.Context, *customers.SyncDecisionEngineRequest) (*customers.SyncDecisionEngineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDecisionEngine not implemented")
}
func (UnimplementedCustomersServer) UpdateCbStandAloneJourney(context.Context, *cb.UpdateCbStandAloneJourneyRequest) (*cb.UpdateCbStandAloneJourneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCbStandAloneJourney not implemented")
}
func (UnimplementedCustomersServer) GetCustomerDetailsbyMobile(context.Context, *customers.GetCustomerDetailsRequest) (*customers.GetCustomerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerDetailsbyMobile not implemented")
}
func (UnimplementedCustomersServer) GetLocLimit(context.Context, *customers.GetLocLimitRequest) (*customers.GetLocLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocLimit not implemented")
}
func (UnimplementedCustomersServer) UpdateAdditionalVerification(context.Context, *freedom.UpdateAdditionalVerificationRequest) (*freedom.UpdateAdditionalVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdditionalVerification not implemented")
}
func (UnimplementedCustomersServer) GetCustomerInfo(context.Context, *customers.GetCustomerRequest) (*customers.GetCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerInfo not implemented")
}
func (UnimplementedCustomersServer) InsuranceDetailsStaticScreen(context.Context, *cb.InsuranceDetailsRequest) (*cb.InsuranceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceDetailsStaticScreen not implemented")
}
func (UnimplementedCustomersServer) GetCliStatus(context.Context, *customers.GetCliStatusRequest) (*customers.GetCliStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCliStatus not implemented")
}
func (UnimplementedCustomersServer) ApplyCliJourney(context.Context, *customers.ApplyCliJourneyRequest) (*customers.ApplyCliJourneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCliJourney not implemented")
}
func (UnimplementedCustomersServer) RestoreAccount(context.Context, *customers.RestoreAccountRequest) (*customers.RestoreAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAccount not implemented")
}
func (UnimplementedCustomersServer) GetPocketPersonalAccidentProtectionPlan(context.Context, *customers.GetPocketPersonalAccidentProtectionPlanRequest) (*customers.GetPocketPersonalAccidentProtectionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocketPersonalAccidentProtectionPlan not implemented")
}
func (UnimplementedCustomersServer) UpdateCbStandAloneConfirmation(context.Context, *cb.UpdateCbStandAloneConfirmationRequest) (*cb.UpdateCbStandAloneConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCbStandAloneConfirmation not implemented")
}
func (UnimplementedCustomersServer) UpdateCbStandAloneCancellation(context.Context, *cb.UpdateCbStandAloneCancellationRequest) (*cb.UpdateCbStandAloneCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCbStandAloneCancellation not implemented")
}
func (UnimplementedCustomersServer) GetGlobalPopups(context.Context, *customers.GetGlobalPopupsRequest) (*customers.GetGlobalPopupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalPopups not implemented")
}
func (UnimplementedCustomersServer) ResetBannerCode(context.Context, *customers.ResetBannerCodeRequest) (*customers.ResetBannerCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBannerCode not implemented")
}
func (UnimplementedCustomersServer) SendLamfOtp(context.Context, *lamf.SendLamfOtpRequest) (*lamf.SendLamfOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLamfOtp not implemented")
}
func (UnimplementedCustomersServer) VerifyLamfOtp(context.Context, *lamf.VerifyLamfOtpRequest) (*lamf.VerifyLamfOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyLamfOtp not implemented")
}
func (UnimplementedCustomersServer) SendLamfPledgeOtp(context.Context, *lamf.SendLamfPledgeOtpRequest) (*lamf.SendLamfPledgeOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLamfPledgeOtp not implemented")
}
func (UnimplementedCustomersServer) VerifyLamfPledgeOtp(context.Context, *lamf.VerifyLamfPledgeOtpRequest) (*lamf.VerifyLamfPledgeOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyLamfPledgeOtp not implemented")
}
func (UnimplementedCustomersServer) ApplyLamf(context.Context, *lamf.ApplyLamfRequest) (*lamf.ApplyLamfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLamf not implemented")
}
func (UnimplementedCustomersServer) UpdateSanctionAmount(context.Context, *customers.UpdateSanctionAmountRequest) (*customers.UpdateSanctionAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSanctionAmount not implemented")
}
func (UnimplementedCustomersServer) GetMessengerMode(context.Context, *customers.GetMessengerModeRequest) (*customers.GetMessengerModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessengerMode not implemented")
}
func (UnimplementedCustomersServer) mustEmbedUnimplementedCustomersServer() {}

// UnsafeCustomersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServer will
// result in compilation errors.
type UnsafeCustomersServer interface {
	mustEmbedUnimplementedCustomersServer()
}

func RegisterCustomersServer(s grpc.ServiceRegistrar, srv CustomersServer) {
	s.RegisterService(&Customers_ServiceDesc, srv)
}

func _Customers_SendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SendOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SendOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SendOtp(ctx, req.(*customers.SendOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_VerifyOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.VerifyOtpReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).VerifyOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_VerifyOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).VerifyOtp(ctx, req.(*customers.VerifyOtpReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Setmpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SetMpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Setmpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_Setmpin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Setmpin(ctx, req.(*customers.SetMpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_VerifyMpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.VerifyMpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).VerifyMpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_VerifyMpin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).VerifyMpin(ctx, req.(*customers.VerifyMpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ChangeMpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.ChangeMpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ChangeMpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ChangeMpin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ChangeMpin(ctx, req.(*customers.ChangeMpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ForgotMpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.ForgotMpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ForgotMpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ForgotMpin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ForgotMpin(ctx, req.(*customers.ForgotMpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ForgotMpinVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.ForgotMpinVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ForgotMpinVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ForgotMpinVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ForgotMpinVerify(ctx, req.(*customers.ForgotMpinVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ProfileUpdatetnc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateTncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ProfileUpdatetnc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ProfileUpdatetnc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ProfileUpdatetnc(ctx, req.(*customers.UpdateTncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateProfileBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateProfileBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateProfileBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateProfileBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateProfileBasic(ctx, req.(*customers.UpdateProfileBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetCustomerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetProfile(ctx, req.(*customers.GetCustomerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetstepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetStep(ctx, req.(*customers.GetstepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SaveBasicDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SaveBasicDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SaveBasicDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SaveBasicDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SaveBasicDetails(ctx, req.(*customers.SaveBasicDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SaveUnlockLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SaveUnlockLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SaveUnlockLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SaveUnlockLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SaveUnlockLimit(ctx, req.(*customers.SaveUnlockLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SendOtptoPersonalEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SendEmailOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SendOtptoPersonalEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SendOtptoPersonalEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SendOtptoPersonalEmail(ctx, req.(*customers.SendEmailOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_VerifyOtptoPersonalEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.VerifyEmailOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).VerifyOtptoPersonalEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_VerifyOtptoPersonalEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).VerifyOtptoPersonalEmail(ctx, req.(*customers.VerifyEmailOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCustomerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCustomerById(ctx, req.(*customers.GetCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetDashboard(ctx, req.(*customers.GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetDashboardMainCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetDashboardMainCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetDashboardMainCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetDashboardMainCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetDashboardMainCard(ctx, req.(*customers.GetDashboardMainCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_AddBankAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.AddBankAccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).AddBankAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_AddBankAccountDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).AddBankAccountDetails(ctx, req.(*customers.AddBankAccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetBankAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetBankAccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetBankAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetBankAccountDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetBankAccountDetails(ctx, req.(*customers.GetBankAccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetBasicInfo(ctx, req.(*customers.GetBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetProfessionalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetProfessionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetProfessionalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetProfessionalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetProfessionalInfo(ctx, req.(*customers.GetProfessionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_CreateCustomerReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.CreateCustomerReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).CreateCustomerReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_CreateCustomerReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).CreateCustomerReference(ctx, req.(*customers.CreateCustomerReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SendOtptoProfessionalEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SendEmailOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SendOtptoProfessionalEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SendOtptoProfessionalEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SendOtptoProfessionalEmail(ctx, req.(*customers.SendEmailOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_VerifyOtptoProfessionalEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.VerifyEmailOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).VerifyOtptoProfessionalEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_VerifyOtptoProfessionalEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).VerifyOtptoProfessionalEmail(ctx, req.(*customers.VerifyEmailOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetAllStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetAllStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetAllStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetAllStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetAllStates(ctx, req.(*customers.GetAllStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCitiesByStateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCitiesByStateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCitiesByStateId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCitiesByStateId(ctx, req.(*customers.GetCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetDocumentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetDocumentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetDocumentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetDocumentList(ctx, req.(*customers.GetDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateOkycTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateOkycTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateOkycTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateOkycTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateOkycTxn(ctx, req.(*customers.UpdateOkycTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).AddAddress(ctx, req.(*customers.AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateDob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateDOBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateDob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateDob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateDob(ctx, req.(*customers.UpdateDOBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ValidatePan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.ValidatePanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ValidatePan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ValidatePan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ValidatePan(ctx, req.(*customers.ValidatePanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).DeleteProfile(ctx, req.(*customers.DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetBankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.GetBankListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetBankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetBankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetBankList(ctx, req.(*aa.GetBankListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_AddSuspendedCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.AddSuspendedCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).AddSuspendedCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_AddSuspendedCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).AddSuspendedCustomer(ctx, req.(*customers.AddSuspendedCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdatelocStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.LocStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdatelocStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdatelocStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdatelocStatus(ctx, req.(*customers.LocStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_InitiateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.InitiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).InitiateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_InitiateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).InitiateRequest(ctx, req.(*aa.InitiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_AddUserApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.AddUserAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).AddUserApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_AddUserApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).AddUserApps(ctx, req.(*customers.AddUserAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_FetchRCProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.FetchRCProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).FetchRCProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_FetchRCProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).FetchRCProfile(ctx, req.(*customers.FetchRCProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Disablempin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.DisableMpinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Disablempin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_Disablempin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Disablempin(ctx, req.(*customers.DisableMpinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateMobileSendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateMobileSendOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateMobileSendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateMobileSendOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateMobileSendOtp(ctx, req.(*customers.UpdateMobileSendOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Updatemobileverifyotp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateMobileVerifyOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Updatemobileverifyotp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_Updatemobileverifyotp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Updatemobileverifyotp(ctx, req.(*customers.UpdateMobileVerifyOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_AddGstNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.AddGstNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).AddGstNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_AddGstNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).AddGstNumber(ctx, req.(*customers.AddGstNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetSelfieeTxnId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetSelfieeTxnIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetSelfieeTxnId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetSelfieeTxnId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetSelfieeTxnId(ctx, req.(*customers.GetSelfieeTxnIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateSelfieeTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateSelfieeTxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateSelfieeTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateSelfieeTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateSelfieeTxn(ctx, req.(*customers.UpdateSelfieeTxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetLimit(ctx, req.(*customers.GetLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SaveLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SaveLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SaveLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SaveLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SaveLimit(ctx, req.(*customers.SaveLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_AddMoreDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.AddMoreDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).AddMoreDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_AddMoreDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).AddMoreDetails(ctx, req.(*customers.AddMoreDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateVehicleNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateVehicleNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateVehicleNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateVehicleNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateVehicleNumber(ctx, req.(*customers.UpdateVehicleNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateDlNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateDlNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateDlNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateDlNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateDlNumber(ctx, req.(*customers.UpdateDlNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SkipScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SkipScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SkipScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SkipScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SkipScreen(ctx, req.(*customers.SkipScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateCustomerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateCustomerById(ctx, req.(*customers.UpdateCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UploadDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UploadDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UploadDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UploadDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UploadDocuments(ctx, req.(*customers.UploadDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Logout(ctx, req.(*customers.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCompanyAccDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetCompanyAccDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCompanyAccDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCompanyAccDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCompanyAccDetails(ctx, req.(*customers.GetCompanyAccDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_BulkSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.BulkSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).BulkSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_BulkSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).BulkSms(ctx, req.(*customers.BulkSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_AddFathersName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.AddFathersNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).AddFathersName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_AddFathersName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).AddFathersName(ctx, req.(*customers.AddFathersNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetOccupationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetOccupationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetOccupationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetOccupationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetOccupationList(ctx, req.(*customers.GetOccupationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetAddressList(ctx, req.(*customers.GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetAppSubmittedScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetAppSubmittedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetAppSubmittedScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetAppSubmittedScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetAppSubmittedScreen(ctx, req.(*customers.GetAppSubmittedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetFloatingVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetFloatingVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetFloatingVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetFloatingVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetFloatingVideos(ctx, req.(*customers.GetFloatingVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetRpdLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpd.CreateRpdLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetRpdLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetRpdLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetRpdLink(ctx, req.(*rpd.CreateRpdLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_MockPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpd.MockPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).MockPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_MockPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).MockPayment(ctx, req.(*rpd.MockPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SaveCreditBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.SaveCreditBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SaveCreditBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SaveCreditBuilder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SaveCreditBuilder(ctx, req.(*cb.SaveCreditBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetPaymentSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.GetPaymentSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetPaymentSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetPaymentSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetPaymentSummary(ctx, req.(*cb.GetPaymentSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetEnachUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(enach.GetWebUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetEnachUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetEnachUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetEnachUrl(ctx, req.(*enach.GetWebUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetUpiMandateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(enach.GetWebUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetUpiMandateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetUpiMandateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetUpiMandateUrl(ctx, req.(*enach.GetWebUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetEnachTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(enach.GetTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetEnachTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetEnachTxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetEnachTxnStatus(ctx, req.(*enach.GetTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateEnachTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(enach.UpdateEnachTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateEnachTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateEnachTxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateEnachTxnStatus(ctx, req.(*enach.UpdateEnachTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_CBSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.CBSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).CBSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_CBSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).CBSignup(ctx, req.(*cb.CBSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_CbPayNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.CbPayNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).CbPayNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_CbPayNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).CbPayNow(ctx, req.(*cb.CbPayNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetPdBankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pd.GetPdBankListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetPdBankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetPdBankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetPdBankList(ctx, req.(*pd.GetPdBankListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ValidateBankDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pd.ValidateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ValidateBankDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ValidateBankDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ValidateBankDetails(ctx, req.(*pd.ValidateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetRpdTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpd.GetRpdTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetRpdTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetRpdTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetRpdTransactionStatus(ctx, req.(*rpd.GetRpdTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCbTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.GetCBTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCbTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCbTxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCbTxnStatus(ctx, req.(*cb.GetCBTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateCbTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.UpdateCBTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateCbTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateCbTxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateCbTxnStatus(ctx, req.(*cb.UpdateCBTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ConfirmAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(freedom.ConfirmAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ConfirmAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ConfirmAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ConfirmAddress(ctx, req.(*freedom.ConfirmAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_FreedomPayNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(freedom.FreedomPayNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).FreedomPayNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_FreedomPayNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).FreedomPayNow(ctx, req.(*freedom.FreedomPayNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetFreedomTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(freedom.GetFreedomTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetFreedomTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetFreedomTxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetFreedomTxnStatus(ctx, req.(*freedom.GetFreedomTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateFreedomTxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(freedom.UpdateFreedomTxnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateFreedomTxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateFreedomTxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateFreedomTxnStatus(ctx, req.(*freedom.UpdateFreedomTxnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateCategory(ctx, req.(*customers.UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetFreedomPaymentOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.PaymentOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetFreedomPaymentOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetFreedomPaymentOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetFreedomPaymentOptions(ctx, req.(*customers.PaymentOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCbPaymentOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.PaymentOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCbPaymentOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCbPaymentOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCbPaymentOptions(ctx, req.(*customers.PaymentOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetAATxnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.GetAATransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetAATxnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetAATxnStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetAATxnStatus(ctx, req.(*aa.GetAATransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCreditBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.GetCreditBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCreditBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCreditBuilder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCreditBuilder(ctx, req.(*cb.GetCreditBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_LessCsImprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.LessCsImproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).LessCsImprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_LessCsImprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).LessCsImprove(ctx, req.(*cb.LessCsImproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_MoreCsImprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.MoreCsImproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).MoreCsImprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_MoreCsImprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).MoreCsImprove(ctx, req.(*cb.MoreCsImproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCbRejectedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.GetCbRejectedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCbRejectedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCbRejectedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCbRejectedData(ctx, req.(*cb.GetCbRejectedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ForceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.ForceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ForceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ForceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ForceUpdate(ctx, req.(*customers.ForceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SaveCustomerAppsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SaveCustomerAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SaveCustomerAppsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SaveCustomerAppsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SaveCustomerAppsList(ctx, req.(*customers.SaveCustomerAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateCongratulationStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateCongratulationStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateCongratulationStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateCongratulationStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateCongratulationStep(ctx, req.(*customers.UpdateCongratulationStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SubmitUploadedDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SubmitUploadedDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SubmitUploadedDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SubmitUploadedDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SubmitUploadedDocuments(ctx, req.(*customers.SubmitUploadedDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetVaNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetVaNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetVaNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetVaNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetVaNumber(ctx, req.(*customers.GetVaNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetSyncStatus(ctx, req.(*customers.GetSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateSyncStatus(ctx, req.(*customers.UpdateSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_CreateVaNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.CreateVaNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).CreateVaNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_CreateVaNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).CreateVaNumber(ctx, req.(*customers.CreateVaNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).DeleteDocument(ctx, req.(*customers.DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SyncDecisionEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.SyncDecisionEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SyncDecisionEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SyncDecisionEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SyncDecisionEngine(ctx, req.(*customers.SyncDecisionEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateCbStandAloneJourney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.UpdateCbStandAloneJourneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateCbStandAloneJourney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateCbStandAloneJourney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateCbStandAloneJourney(ctx, req.(*cb.UpdateCbStandAloneJourneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCustomerDetailsbyMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetCustomerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCustomerDetailsbyMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCustomerDetailsbyMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCustomerDetailsbyMobile(ctx, req.(*customers.GetCustomerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetLocLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetLocLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetLocLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetLocLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetLocLimit(ctx, req.(*customers.GetLocLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateAdditionalVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(freedom.UpdateAdditionalVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateAdditionalVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateAdditionalVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateAdditionalVerification(ctx, req.(*freedom.UpdateAdditionalVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCustomerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCustomerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCustomerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCustomerInfo(ctx, req.(*customers.GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_InsuranceDetailsStaticScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.InsuranceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).InsuranceDetailsStaticScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_InsuranceDetailsStaticScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).InsuranceDetailsStaticScreen(ctx, req.(*cb.InsuranceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCliStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetCliStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCliStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetCliStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCliStatus(ctx, req.(*customers.GetCliStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ApplyCliJourney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.ApplyCliJourneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ApplyCliJourney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ApplyCliJourney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ApplyCliJourney(ctx, req.(*customers.ApplyCliJourneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_RestoreAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.RestoreAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).RestoreAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_RestoreAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).RestoreAccount(ctx, req.(*customers.RestoreAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetPocketPersonalAccidentProtectionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetPocketPersonalAccidentProtectionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetPocketPersonalAccidentProtectionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetPocketPersonalAccidentProtectionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetPocketPersonalAccidentProtectionPlan(ctx, req.(*customers.GetPocketPersonalAccidentProtectionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateCbStandAloneConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.UpdateCbStandAloneConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateCbStandAloneConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateCbStandAloneConfirmation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateCbStandAloneConfirmation(ctx, req.(*cb.UpdateCbStandAloneConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateCbStandAloneCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cb.UpdateCbStandAloneCancellationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateCbStandAloneCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateCbStandAloneCancellation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateCbStandAloneCancellation(ctx, req.(*cb.UpdateCbStandAloneCancellationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetGlobalPopups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetGlobalPopupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetGlobalPopups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetGlobalPopups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetGlobalPopups(ctx, req.(*customers.GetGlobalPopupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ResetBannerCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.ResetBannerCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ResetBannerCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ResetBannerCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ResetBannerCode(ctx, req.(*customers.ResetBannerCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SendLamfOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.SendLamfOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SendLamfOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SendLamfOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SendLamfOtp(ctx, req.(*lamf.SendLamfOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_VerifyLamfOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.VerifyLamfOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).VerifyLamfOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_VerifyLamfOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).VerifyLamfOtp(ctx, req.(*lamf.VerifyLamfOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_SendLamfPledgeOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.SendLamfPledgeOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).SendLamfPledgeOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_SendLamfPledgeOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).SendLamfPledgeOtp(ctx, req.(*lamf.SendLamfPledgeOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_VerifyLamfPledgeOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.VerifyLamfPledgeOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).VerifyLamfPledgeOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_VerifyLamfPledgeOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).VerifyLamfPledgeOtp(ctx, req.(*lamf.VerifyLamfPledgeOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_ApplyLamf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lamf.ApplyLamfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).ApplyLamf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_ApplyLamf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).ApplyLamf(ctx, req.(*lamf.ApplyLamfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_UpdateSanctionAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.UpdateSanctionAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).UpdateSanctionAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_UpdateSanctionAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).UpdateSanctionAmount(ctx, req.(*customers.UpdateSanctionAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetMessengerMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customers.GetMessengerModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetMessengerMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Customers_GetMessengerMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetMessengerMode(ctx, req.(*customers.GetMessengerModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Customers_ServiceDesc is the grpc.ServiceDesc for Customers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.customers",
	HandlerType: (*CustomersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendOtp",
			Handler:    _Customers_SendOtp_Handler,
		},
		{
			MethodName: "verifyOtp",
			Handler:    _Customers_VerifyOtp_Handler,
		},
		{
			MethodName: "setmpin",
			Handler:    _Customers_Setmpin_Handler,
		},
		{
			MethodName: "verifyMpin",
			Handler:    _Customers_VerifyMpin_Handler,
		},
		{
			MethodName: "changeMpin",
			Handler:    _Customers_ChangeMpin_Handler,
		},
		{
			MethodName: "forgotMpin",
			Handler:    _Customers_ForgotMpin_Handler,
		},
		{
			MethodName: "forgotMpinVerify",
			Handler:    _Customers_ForgotMpinVerify_Handler,
		},
		{
			MethodName: "profileUpdatetnc",
			Handler:    _Customers_ProfileUpdatetnc_Handler,
		},
		{
			MethodName: "updateProfileBasic",
			Handler:    _Customers_UpdateProfileBasic_Handler,
		},
		{
			MethodName: "getProfile",
			Handler:    _Customers_GetProfile_Handler,
		},
		{
			MethodName: "getStep",
			Handler:    _Customers_GetStep_Handler,
		},
		{
			MethodName: "saveBasicDetails",
			Handler:    _Customers_SaveBasicDetails_Handler,
		},
		{
			MethodName: "saveUnlockLimit",
			Handler:    _Customers_SaveUnlockLimit_Handler,
		},
		{
			MethodName: "sendOtptoPersonalEmail",
			Handler:    _Customers_SendOtptoPersonalEmail_Handler,
		},
		{
			MethodName: "verifyOtptoPersonalEmail",
			Handler:    _Customers_VerifyOtptoPersonalEmail_Handler,
		},
		{
			MethodName: "getCustomerById",
			Handler:    _Customers_GetCustomerById_Handler,
		},
		{
			MethodName: "getDashboard",
			Handler:    _Customers_GetDashboard_Handler,
		},
		{
			MethodName: "getDashboardMainCard",
			Handler:    _Customers_GetDashboardMainCard_Handler,
		},
		{
			MethodName: "addBankAccountDetails",
			Handler:    _Customers_AddBankAccountDetails_Handler,
		},
		{
			MethodName: "getBankAccountDetails",
			Handler:    _Customers_GetBankAccountDetails_Handler,
		},
		{
			MethodName: "getBasicInfo",
			Handler:    _Customers_GetBasicInfo_Handler,
		},
		{
			MethodName: "getProfessionalInfo",
			Handler:    _Customers_GetProfessionalInfo_Handler,
		},
		{
			MethodName: "createCustomerReference",
			Handler:    _Customers_CreateCustomerReference_Handler,
		},
		{
			MethodName: "sendOtptoProfessionalEmail",
			Handler:    _Customers_SendOtptoProfessionalEmail_Handler,
		},
		{
			MethodName: "verifyOtptoProfessionalEmail",
			Handler:    _Customers_VerifyOtptoProfessionalEmail_Handler,
		},
		{
			MethodName: "getAllStates",
			Handler:    _Customers_GetAllStates_Handler,
		},
		{
			MethodName: "getCitiesByStateId",
			Handler:    _Customers_GetCitiesByStateId_Handler,
		},
		{
			MethodName: "getDocumentList",
			Handler:    _Customers_GetDocumentList_Handler,
		},
		{
			MethodName: "updateOkycTxn",
			Handler:    _Customers_UpdateOkycTxn_Handler,
		},
		{
			MethodName: "addAddress",
			Handler:    _Customers_AddAddress_Handler,
		},
		{
			MethodName: "updateDob",
			Handler:    _Customers_UpdateDob_Handler,
		},
		{
			MethodName: "validatePan",
			Handler:    _Customers_ValidatePan_Handler,
		},
		{
			MethodName: "deleteProfile",
			Handler:    _Customers_DeleteProfile_Handler,
		},
		{
			MethodName: "getBankList",
			Handler:    _Customers_GetBankList_Handler,
		},
		{
			MethodName: "addSuspendedCustomer",
			Handler:    _Customers_AddSuspendedCustomer_Handler,
		},
		{
			MethodName: "updatelocStatus",
			Handler:    _Customers_UpdatelocStatus_Handler,
		},
		{
			MethodName: "initiateRequest",
			Handler:    _Customers_InitiateRequest_Handler,
		},
		{
			MethodName: "addUserApps",
			Handler:    _Customers_AddUserApps_Handler,
		},
		{
			MethodName: "fetchRCProfile",
			Handler:    _Customers_FetchRCProfile_Handler,
		},
		{
			MethodName: "disablempin",
			Handler:    _Customers_Disablempin_Handler,
		},
		{
			MethodName: "updateMobileSendOtp",
			Handler:    _Customers_UpdateMobileSendOtp_Handler,
		},
		{
			MethodName: "updatemobileverifyotp",
			Handler:    _Customers_Updatemobileverifyotp_Handler,
		},
		{
			MethodName: "addGstNumber",
			Handler:    _Customers_AddGstNumber_Handler,
		},
		{
			MethodName: "getSelfieeTxnId",
			Handler:    _Customers_GetSelfieeTxnId_Handler,
		},
		{
			MethodName: "updateSelfieeTxn",
			Handler:    _Customers_UpdateSelfieeTxn_Handler,
		},
		{
			MethodName: "getLimit",
			Handler:    _Customers_GetLimit_Handler,
		},
		{
			MethodName: "saveLimit",
			Handler:    _Customers_SaveLimit_Handler,
		},
		{
			MethodName: "addMoreDetails",
			Handler:    _Customers_AddMoreDetails_Handler,
		},
		{
			MethodName: "updateVehicleNumber",
			Handler:    _Customers_UpdateVehicleNumber_Handler,
		},
		{
			MethodName: "updateDlNumber",
			Handler:    _Customers_UpdateDlNumber_Handler,
		},
		{
			MethodName: "skipScreen",
			Handler:    _Customers_SkipScreen_Handler,
		},
		{
			MethodName: "updateCustomerById",
			Handler:    _Customers_UpdateCustomerById_Handler,
		},
		{
			MethodName: "uploadDocuments",
			Handler:    _Customers_UploadDocuments_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _Customers_Logout_Handler,
		},
		{
			MethodName: "getCompanyAccDetails",
			Handler:    _Customers_GetCompanyAccDetails_Handler,
		},
		{
			MethodName: "bulkSms",
			Handler:    _Customers_BulkSms_Handler,
		},
		{
			MethodName: "addFathersName",
			Handler:    _Customers_AddFathersName_Handler,
		},
		{
			MethodName: "getOccupationList",
			Handler:    _Customers_GetOccupationList_Handler,
		},
		{
			MethodName: "getAddressList",
			Handler:    _Customers_GetAddressList_Handler,
		},
		{
			MethodName: "getAppSubmittedScreen",
			Handler:    _Customers_GetAppSubmittedScreen_Handler,
		},
		{
			MethodName: "getFloatingVideos",
			Handler:    _Customers_GetFloatingVideos_Handler,
		},
		{
			MethodName: "getRpdLink",
			Handler:    _Customers_GetRpdLink_Handler,
		},
		{
			MethodName: "mockPayment",
			Handler:    _Customers_MockPayment_Handler,
		},
		{
			MethodName: "saveCreditBuilder",
			Handler:    _Customers_SaveCreditBuilder_Handler,
		},
		{
			MethodName: "getPaymentSummary",
			Handler:    _Customers_GetPaymentSummary_Handler,
		},
		{
			MethodName: "getEnachUrl",
			Handler:    _Customers_GetEnachUrl_Handler,
		},
		{
			MethodName: "getUpiMandateUrl",
			Handler:    _Customers_GetUpiMandateUrl_Handler,
		},
		{
			MethodName: "getEnachTxnStatus",
			Handler:    _Customers_GetEnachTxnStatus_Handler,
		},
		{
			MethodName: "updateEnachTxnStatus",
			Handler:    _Customers_UpdateEnachTxnStatus_Handler,
		},
		{
			MethodName: "cBSignup",
			Handler:    _Customers_CBSignup_Handler,
		},
		{
			MethodName: "cbPayNow",
			Handler:    _Customers_CbPayNow_Handler,
		},
		{
			MethodName: "getPdBankList",
			Handler:    _Customers_GetPdBankList_Handler,
		},
		{
			MethodName: "validateBankDetails",
			Handler:    _Customers_ValidateBankDetails_Handler,
		},
		{
			MethodName: "getRpdTransactionStatus",
			Handler:    _Customers_GetRpdTransactionStatus_Handler,
		},
		{
			MethodName: "getCbTxnStatus",
			Handler:    _Customers_GetCbTxnStatus_Handler,
		},
		{
			MethodName: "updateCbTxnStatus",
			Handler:    _Customers_UpdateCbTxnStatus_Handler,
		},
		{
			MethodName: "confirmAddress",
			Handler:    _Customers_ConfirmAddress_Handler,
		},
		{
			MethodName: "freedomPayNow",
			Handler:    _Customers_FreedomPayNow_Handler,
		},
		{
			MethodName: "getFreedomTxnStatus",
			Handler:    _Customers_GetFreedomTxnStatus_Handler,
		},
		{
			MethodName: "updateFreedomTxnStatus",
			Handler:    _Customers_UpdateFreedomTxnStatus_Handler,
		},
		{
			MethodName: "updateCategory",
			Handler:    _Customers_UpdateCategory_Handler,
		},
		{
			MethodName: "getFreedomPaymentOptions",
			Handler:    _Customers_GetFreedomPaymentOptions_Handler,
		},
		{
			MethodName: "getCbPaymentOptions",
			Handler:    _Customers_GetCbPaymentOptions_Handler,
		},
		{
			MethodName: "getAATxnStatus",
			Handler:    _Customers_GetAATxnStatus_Handler,
		},
		{
			MethodName: "getCreditBuilder",
			Handler:    _Customers_GetCreditBuilder_Handler,
		},
		{
			MethodName: "lessCsImprove",
			Handler:    _Customers_LessCsImprove_Handler,
		},
		{
			MethodName: "moreCsImprove",
			Handler:    _Customers_MoreCsImprove_Handler,
		},
		{
			MethodName: "getCbRejectedData",
			Handler:    _Customers_GetCbRejectedData_Handler,
		},
		{
			MethodName: "forceUpdate",
			Handler:    _Customers_ForceUpdate_Handler,
		},
		{
			MethodName: "saveCustomerAppsList",
			Handler:    _Customers_SaveCustomerAppsList_Handler,
		},
		{
			MethodName: "updateCongratulationStep",
			Handler:    _Customers_UpdateCongratulationStep_Handler,
		},
		{
			MethodName: "submitUploadedDocuments",
			Handler:    _Customers_SubmitUploadedDocuments_Handler,
		},
		{
			MethodName: "getVaNumber",
			Handler:    _Customers_GetVaNumber_Handler,
		},
		{
			MethodName: "getSyncStatus",
			Handler:    _Customers_GetSyncStatus_Handler,
		},
		{
			MethodName: "updateSyncStatus",
			Handler:    _Customers_UpdateSyncStatus_Handler,
		},
		{
			MethodName: "createVaNumber",
			Handler:    _Customers_CreateVaNumber_Handler,
		},
		{
			MethodName: "deleteDocument",
			Handler:    _Customers_DeleteDocument_Handler,
		},
		{
			MethodName: "syncDecisionEngine",
			Handler:    _Customers_SyncDecisionEngine_Handler,
		},
		{
			MethodName: "updateCbStandAloneJourney",
			Handler:    _Customers_UpdateCbStandAloneJourney_Handler,
		},
		{
			MethodName: "getCustomerDetailsbyMobile",
			Handler:    _Customers_GetCustomerDetailsbyMobile_Handler,
		},
		{
			MethodName: "getLocLimit",
			Handler:    _Customers_GetLocLimit_Handler,
		},
		{
			MethodName: "updateAdditionalVerification",
			Handler:    _Customers_UpdateAdditionalVerification_Handler,
		},
		{
			MethodName: "getCustomerInfo",
			Handler:    _Customers_GetCustomerInfo_Handler,
		},
		{
			MethodName: "insuranceDetailsStaticScreen",
			Handler:    _Customers_InsuranceDetailsStaticScreen_Handler,
		},
		{
			MethodName: "getCliStatus",
			Handler:    _Customers_GetCliStatus_Handler,
		},
		{
			MethodName: "applyCliJourney",
			Handler:    _Customers_ApplyCliJourney_Handler,
		},
		{
			MethodName: "restoreAccount",
			Handler:    _Customers_RestoreAccount_Handler,
		},
		{
			MethodName: "getPocketPersonalAccidentProtectionPlan",
			Handler:    _Customers_GetPocketPersonalAccidentProtectionPlan_Handler,
		},
		{
			MethodName: "updateCbStandAloneConfirmation",
			Handler:    _Customers_UpdateCbStandAloneConfirmation_Handler,
		},
		{
			MethodName: "updateCbStandAloneCancellation",
			Handler:    _Customers_UpdateCbStandAloneCancellation_Handler,
		},
		{
			MethodName: "getGlobalPopups",
			Handler:    _Customers_GetGlobalPopups_Handler,
		},
		{
			MethodName: "resetBannerCode",
			Handler:    _Customers_ResetBannerCode_Handler,
		},
		{
			MethodName: "sendLamfOtp",
			Handler:    _Customers_SendLamfOtp_Handler,
		},
		{
			MethodName: "verifyLamfOtp",
			Handler:    _Customers_VerifyLamfOtp_Handler,
		},
		{
			MethodName: "sendLamfPledgeOtp",
			Handler:    _Customers_SendLamfPledgeOtp_Handler,
		},
		{
			MethodName: "verifyLamfPledgeOtp",
			Handler:    _Customers_VerifyLamfPledgeOtp_Handler,
		},
		{
			MethodName: "applyLamf",
			Handler:    _Customers_ApplyLamf_Handler,
		},
		{
			MethodName: "updateSanctionAmount",
			Handler:    _Customers_UpdateSanctionAmount_Handler,
		},
		{
			MethodName: "getMessengerMode",
			Handler:    _Customers_GetMessengerMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customers.proto",
}
