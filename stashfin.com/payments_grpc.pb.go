// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: payments.proto

package stashfin_com

import (
	context "context"
	payments "github.com/stashfin2/grpc/stashfin.com/payments"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentsClient is the client API for Payments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentsClient interface {
	Getpaymentoptions(ctx context.Context, in *payments.GetpaymentoptionsRequest, opts ...grpc.CallOption) (*payments.GetpaymentoptionsResponse, error)
	Initiatepayment(ctx context.Context, in *payments.InitiatepaymentRequest, opts ...grpc.CallOption) (*payments.InitiatepaymentResponse, error)
	Checkpaymentstatus(ctx context.Context, in *payments.CheckpaymentstatusResponse, opts ...grpc.CallOption) (*payments.CheckpaymentstatusResponse, error)
	Nachregistration(ctx context.Context, in *payments.NachregistrationResponse, opts ...grpc.CallOption) (*payments.NachregistrationResponse, error)
	Nachpresentation(ctx context.Context, in *payments.NachpresentationRequest, opts ...grpc.CallOption) (*payments.NachpresentationResponse, error)
	Fundtransfer(ctx context.Context, in *payments.FundtransferRequest, opts ...grpc.CallOption) (*payments.FundtransferResponse, error)
}

type paymentsClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsClient(cc grpc.ClientConnInterface) PaymentsClient {
	return &paymentsClient{cc}
}

func (c *paymentsClient) Getpaymentoptions(ctx context.Context, in *payments.GetpaymentoptionsRequest, opts ...grpc.CallOption) (*payments.GetpaymentoptionsResponse, error) {
	out := new(payments.GetpaymentoptionsResponse)
	err := c.cc.Invoke(ctx, "/service.payments/getpaymentoptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsClient) Initiatepayment(ctx context.Context, in *payments.InitiatepaymentRequest, opts ...grpc.CallOption) (*payments.InitiatepaymentResponse, error) {
	out := new(payments.InitiatepaymentResponse)
	err := c.cc.Invoke(ctx, "/service.payments/initiatepayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsClient) Checkpaymentstatus(ctx context.Context, in *payments.CheckpaymentstatusResponse, opts ...grpc.CallOption) (*payments.CheckpaymentstatusResponse, error) {
	out := new(payments.CheckpaymentstatusResponse)
	err := c.cc.Invoke(ctx, "/service.payments/checkpaymentstatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsClient) Nachregistration(ctx context.Context, in *payments.NachregistrationResponse, opts ...grpc.CallOption) (*payments.NachregistrationResponse, error) {
	out := new(payments.NachregistrationResponse)
	err := c.cc.Invoke(ctx, "/service.payments/nachregistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsClient) Nachpresentation(ctx context.Context, in *payments.NachpresentationRequest, opts ...grpc.CallOption) (*payments.NachpresentationResponse, error) {
	out := new(payments.NachpresentationResponse)
	err := c.cc.Invoke(ctx, "/service.payments/nachpresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsClient) Fundtransfer(ctx context.Context, in *payments.FundtransferRequest, opts ...grpc.CallOption) (*payments.FundtransferResponse, error) {
	out := new(payments.FundtransferResponse)
	err := c.cc.Invoke(ctx, "/service.payments/fundtransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentsServer is the server API for Payments service.
// All implementations must embed UnimplementedPaymentsServer
// for forward compatibility
type PaymentsServer interface {
	Getpaymentoptions(context.Context, *payments.GetpaymentoptionsRequest) (*payments.GetpaymentoptionsResponse, error)
	Initiatepayment(context.Context, *payments.InitiatepaymentRequest) (*payments.InitiatepaymentResponse, error)
	Checkpaymentstatus(context.Context, *payments.CheckpaymentstatusResponse) (*payments.CheckpaymentstatusResponse, error)
	Nachregistration(context.Context, *payments.NachregistrationResponse) (*payments.NachregistrationResponse, error)
	Nachpresentation(context.Context, *payments.NachpresentationRequest) (*payments.NachpresentationResponse, error)
	Fundtransfer(context.Context, *payments.FundtransferRequest) (*payments.FundtransferResponse, error)
	mustEmbedUnimplementedPaymentsServer()
}

// UnimplementedPaymentsServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentsServer struct {
}

func (UnimplementedPaymentsServer) Getpaymentoptions(context.Context, *payments.GetpaymentoptionsRequest) (*payments.GetpaymentoptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getpaymentoptions not implemented")
}
func (UnimplementedPaymentsServer) Initiatepayment(context.Context, *payments.InitiatepaymentRequest) (*payments.InitiatepaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initiatepayment not implemented")
}
func (UnimplementedPaymentsServer) Checkpaymentstatus(context.Context, *payments.CheckpaymentstatusResponse) (*payments.CheckpaymentstatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpaymentstatus not implemented")
}
func (UnimplementedPaymentsServer) Nachregistration(context.Context, *payments.NachregistrationResponse) (*payments.NachregistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nachregistration not implemented")
}
func (UnimplementedPaymentsServer) Nachpresentation(context.Context, *payments.NachpresentationRequest) (*payments.NachpresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nachpresentation not implemented")
}
func (UnimplementedPaymentsServer) Fundtransfer(context.Context, *payments.FundtransferRequest) (*payments.FundtransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fundtransfer not implemented")
}
func (UnimplementedPaymentsServer) mustEmbedUnimplementedPaymentsServer() {}

// UnsafePaymentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsServer will
// result in compilation errors.
type UnsafePaymentsServer interface {
	mustEmbedUnimplementedPaymentsServer()
}

func RegisterPaymentsServer(s grpc.ServiceRegistrar, srv PaymentsServer) {
	s.RegisterService(&Payments_ServiceDesc, srv)
}

func _Payments_Getpaymentoptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payments.GetpaymentoptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServer).Getpaymentoptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.payments/getpaymentoptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServer).Getpaymentoptions(ctx, req.(*payments.GetpaymentoptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payments_Initiatepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payments.InitiatepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServer).Initiatepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.payments/initiatepayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServer).Initiatepayment(ctx, req.(*payments.InitiatepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payments_Checkpaymentstatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payments.CheckpaymentstatusResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServer).Checkpaymentstatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.payments/checkpaymentstatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServer).Checkpaymentstatus(ctx, req.(*payments.CheckpaymentstatusResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payments_Nachregistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payments.NachregistrationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServer).Nachregistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.payments/nachregistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServer).Nachregistration(ctx, req.(*payments.NachregistrationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payments_Nachpresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payments.NachpresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServer).Nachpresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.payments/nachpresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServer).Nachpresentation(ctx, req.(*payments.NachpresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payments_Fundtransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(payments.FundtransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServer).Fundtransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.payments/fundtransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServer).Fundtransfer(ctx, req.(*payments.FundtransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Payments_ServiceDesc is the grpc.ServiceDesc for Payments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.payments",
	HandlerType: (*PaymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getpaymentoptions",
			Handler:    _Payments_Getpaymentoptions_Handler,
		},
		{
			MethodName: "initiatepayment",
			Handler:    _Payments_Initiatepayment_Handler,
		},
		{
			MethodName: "checkpaymentstatus",
			Handler:    _Payments_Checkpaymentstatus_Handler,
		},
		{
			MethodName: "nachregistration",
			Handler:    _Payments_Nachregistration_Handler,
		},
		{
			MethodName: "nachpresentation",
			Handler:    _Payments_Nachpresentation_Handler,
		},
		{
			MethodName: "fundtransfer",
			Handler:    _Payments_Fundtransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payments.proto",
}
