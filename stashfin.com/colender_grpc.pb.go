// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: colender.proto

package stashfin_com

import (
	context "context"
	colender "github.com/stashfin2/grpc/stashfin.com/colender"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Colender_DisburseLoan_FullMethodName  = "/service.colender/disburseLoan"
	Colender_RepayLoan_FullMethodName     = "/service.colender/repayLoan"
	Colender_ForecloseLoan_FullMethodName = "/service.colender/forecloseLoan"
)

// ColenderClient is the client API for Colender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColenderClient interface {
	DisburseLoan(ctx context.Context, in *colender.DisburalRequest, opts ...grpc.CallOption) (*colender.DisburalResponse, error)
	RepayLoan(ctx context.Context, in *colender.RepayRequest, opts ...grpc.CallOption) (*colender.RepayResponse, error)
	ForecloseLoan(ctx context.Context, in *colender.ForecloseRequest, opts ...grpc.CallOption) (*colender.ForecloseResponse, error)
}

type colenderClient struct {
	cc grpc.ClientConnInterface
}

func NewColenderClient(cc grpc.ClientConnInterface) ColenderClient {
	return &colenderClient{cc}
}

func (c *colenderClient) DisburseLoan(ctx context.Context, in *colender.DisburalRequest, opts ...grpc.CallOption) (*colender.DisburalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(colender.DisburalResponse)
	err := c.cc.Invoke(ctx, Colender_DisburseLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colenderClient) RepayLoan(ctx context.Context, in *colender.RepayRequest, opts ...grpc.CallOption) (*colender.RepayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(colender.RepayResponse)
	err := c.cc.Invoke(ctx, Colender_RepayLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colenderClient) ForecloseLoan(ctx context.Context, in *colender.ForecloseRequest, opts ...grpc.CallOption) (*colender.ForecloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(colender.ForecloseResponse)
	err := c.cc.Invoke(ctx, Colender_ForecloseLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColenderServer is the server API for Colender service.
// All implementations must embed UnimplementedColenderServer
// for forward compatibility.
type ColenderServer interface {
	DisburseLoan(context.Context, *colender.DisburalRequest) (*colender.DisburalResponse, error)
	RepayLoan(context.Context, *colender.RepayRequest) (*colender.RepayResponse, error)
	ForecloseLoan(context.Context, *colender.ForecloseRequest) (*colender.ForecloseResponse, error)
	mustEmbedUnimplementedColenderServer()
}

// UnimplementedColenderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedColenderServer struct{}

func (UnimplementedColenderServer) DisburseLoan(context.Context, *colender.DisburalRequest) (*colender.DisburalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisburseLoan not implemented")
}
func (UnimplementedColenderServer) RepayLoan(context.Context, *colender.RepayRequest) (*colender.RepayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepayLoan not implemented")
}
func (UnimplementedColenderServer) ForecloseLoan(context.Context, *colender.ForecloseRequest) (*colender.ForecloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForecloseLoan not implemented")
}
func (UnimplementedColenderServer) mustEmbedUnimplementedColenderServer() {}
func (UnimplementedColenderServer) testEmbeddedByValue()                  {}

// UnsafeColenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColenderServer will
// result in compilation errors.
type UnsafeColenderServer interface {
	mustEmbedUnimplementedColenderServer()
}

func RegisterColenderServer(s grpc.ServiceRegistrar, srv ColenderServer) {
	// If the following call pancis, it indicates UnimplementedColenderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Colender_ServiceDesc, srv)
}

func _Colender_DisburseLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colender.DisburalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColenderServer).DisburseLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Colender_DisburseLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColenderServer).DisburseLoan(ctx, req.(*colender.DisburalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Colender_RepayLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colender.RepayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColenderServer).RepayLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Colender_RepayLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColenderServer).RepayLoan(ctx, req.(*colender.RepayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Colender_ForecloseLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(colender.ForecloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColenderServer).ForecloseLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Colender_ForecloseLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColenderServer).ForecloseLoan(ctx, req.(*colender.ForecloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Colender_ServiceDesc is the grpc.ServiceDesc for Colender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Colender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.colender",
	HandlerType: (*ColenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "disburseLoan",
			Handler:    _Colender_DisburseLoan_Handler,
		},
		{
			MethodName: "repayLoan",
			Handler:    _Colender_RepayLoan_Handler,
		},
		{
			MethodName: "forecloseLoan",
			Handler:    _Colender_ForecloseLoan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "colender.proto",
}
