// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.6
// source: loans/getlocdetails.proto

package loans

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLocDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomerId    int32                  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLocDetailsRequest) Reset() {
	*x = GetLocDetailsRequest{}
	mi := &file_loans_getlocdetails_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLocDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocDetailsRequest) ProtoMessage() {}

func (x *GetLocDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loans_getlocdetails_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetLocDetailsRequest) Descriptor() ([]byte, []int) {
	return file_loans_getlocdetails_proto_rawDescGZIP(), []int{0}
}

func (x *GetLocDetailsRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type GetLocDetailsResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Matched                bool                   `protobuf:"varint,1,opt,name=matched,proto3" json:"matched,omitempty"`
	RequestedAmount        int32                  `protobuf:"varint,2,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	Tenure                 int32                  `protobuf:"varint,3,opt,name=tenure,proto3" json:"tenure,omitempty"`
	EmiAmount              int32                  `protobuf:"varint,4,opt,name=emi_amount,json=emiAmount,proto3" json:"emi_amount,omitempty"`
	NetAmountPayable       int32                  `protobuf:"varint,5,opt,name=net_amount_payable,json=netAmountPayable,proto3" json:"net_amount_payable,omitempty"`
	FirstEmiDate           string                 `protobuf:"bytes,6,opt,name=first_emi_date,json=firstEmiDate,proto3" json:"first_emi_date,omitempty"`
	EmiDate                string                 `protobuf:"bytes,7,opt,name=emi_date,json=emiDate,proto3" json:"emi_date,omitempty"`
	FinalDisbursalAmount   int32                  `protobuf:"varint,8,opt,name=final_disbursal_amount,json=finalDisbursalAmount,proto3" json:"final_disbursal_amount,omitempty"`
	UpfrontInterest        int32                  `protobuf:"varint,9,opt,name=upfront_interest,json=upfrontInterest,proto3" json:"upfront_interest,omitempty"`
	ApprovedAmount         int32                  `protobuf:"varint,10,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
	ProcessingFees         int32                  `protobuf:"varint,11,opt,name=processing_fees,json=processingFees,proto3" json:"processing_fees,omitempty"`
	Gst                    int32                  `protobuf:"varint,12,opt,name=gst,proto3" json:"gst,omitempty"`
	LoanId                 string                 `protobuf:"bytes,13,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
	RateOfInterest         float32                `protobuf:"fixed32,14,opt,name=rate_of_interest,json=rateOfInterest,proto3" json:"rate_of_interest,omitempty"`
	BillAmount             *string                `protobuf:"bytes,15,opt,name=bill_amount,json=billAmount,proto3,oneof" json:"bill_amount,omitempty"`
	EarlyForeclosureFees   int32                  `protobuf:"varint,16,opt,name=early_foreclosure_fees,json=earlyForeclosureFees,proto3" json:"early_foreclosure_fees,omitempty"`
	ConvenienceFees        int32                  `protobuf:"varint,17,opt,name=convenience_fees,json=convenienceFees,proto3" json:"convenience_fees,omitempty"`
	TotalInterestPay       int32                  `protobuf:"varint,18,opt,name=total_interest_pay,json=totalInterestPay,proto3" json:"total_interest_pay,omitempty"`
	EffectiveAnnualRate    float32                `protobuf:"fixed32,19,opt,name=effective_annual_rate,json=effectiveAnnualRate,proto3" json:"effective_annual_rate,omitempty"`
	TransactionRate        float32                `protobuf:"fixed32,20,opt,name=transaction_rate,json=transactionRate,proto3" json:"transaction_rate,omitempty"`
	TransactionFeeAmount   int32                  `protobuf:"varint,21,opt,name=transaction_fee_amount,json=transactionFeeAmount,proto3" json:"transaction_fee_amount,omitempty"`
	EmiDateL               string                 `protobuf:"bytes,22,opt,name=emi_date_l,json=emiDateL,proto3" json:"emi_date_l,omitempty"`
	EmiAmountL             string                 `protobuf:"bytes,23,opt,name=emi_amount_l,json=emiAmountL,proto3" json:"emi_amount_l,omitempty"`
	FirstEmiDateL          string                 `protobuf:"bytes,24,opt,name=first_emi_date_l,json=firstEmiDateL,proto3" json:"first_emi_date_l,omitempty"`
	FinalDisbursalAmountL  string                 `protobuf:"bytes,25,opt,name=final_disbursal_amount_l,json=finalDisbursalAmountL,proto3" json:"final_disbursal_amount_l,omitempty"`
	UpfrontInterestL       string                 `protobuf:"bytes,26,opt,name=upfront_interest_l,json=upfrontInterestL,proto3" json:"upfront_interest_l,omitempty"`
	ProcessingFeesL        string                 `protobuf:"bytes,27,opt,name=processing_fees_l,json=processingFeesL,proto3" json:"processing_fees_l,omitempty"`
	GstL                   string                 `protobuf:"bytes,28,opt,name=gst_l,json=gstL,proto3" json:"gst_l,omitempty"`
	RateOfInterestL        string                 `protobuf:"bytes,29,opt,name=rate_of_interest_l,json=rateOfInterestL,proto3" json:"rate_of_interest_l,omitempty"`
	TransFeePlusGst        int32                  `protobuf:"varint,30,opt,name=trans_fee_plus_gst,json=transFeePlusGst,proto3" json:"trans_fee_plus_gst,omitempty"`
	ProcessingFeePlusGst   int32                  `protobuf:"varint,31,opt,name=processing_fee_plus_gst,json=processingFeePlusGst,proto3" json:"processing_fee_plus_gst,omitempty"`
	BillAmountL            string                 `protobuf:"bytes,32,opt,name=bill_amount_l,json=billAmountL,proto3" json:"bill_amount_l,omitempty"`
	EarlyForeclosureFeesL  string                 `protobuf:"bytes,33,opt,name=early_foreclosure_fees_l,json=earlyForeclosureFeesL,proto3" json:"early_foreclosure_fees_l,omitempty"`
	ConvenienceFeesL       string                 `protobuf:"bytes,34,opt,name=convenience_fees_l,json=convenienceFeesL,proto3" json:"convenience_fees_l,omitempty"`
	TotalInterestPayL      string                 `protobuf:"bytes,35,opt,name=total_interest_pay_l,json=totalInterestPayL,proto3" json:"total_interest_pay_l,omitempty"`
	EffectiveAnnualRateL   string                 `protobuf:"bytes,36,opt,name=effective_annual_rate_l,json=effectiveAnnualRateL,proto3" json:"effective_annual_rate_l,omitempty"`
	TransFeePlusGstL       string                 `protobuf:"bytes,37,opt,name=trans_fee_plus_gst_l,json=transFeePlusGstL,proto3" json:"trans_fee_plus_gst_l,omitempty"`
	ProcessingFeePlusGstL  string                 `protobuf:"bytes,38,opt,name=processing_fee_plus_gst_l,json=processingFeePlusGstL,proto3" json:"processing_fee_plus_gst_l,omitempty"`
	MaxAmountL             string                 `protobuf:"bytes,39,opt,name=max_amount_l,json=maxAmountL,proto3" json:"max_amount_l,omitempty"`
	CreditReportFeesL      string                 `protobuf:"bytes,40,opt,name=credit_report_fees_l,json=creditReportFeesL,proto3" json:"credit_report_fees_l,omitempty"`
	FeeAndChargesL         string                 `protobuf:"bytes,41,opt,name=fee_and_charges_l,json=feeAndChargesL,proto3" json:"fee_and_charges_l,omitempty"`
	FeeAndCharges          int32                  `protobuf:"varint,42,opt,name=fee_and_charges,json=feeAndCharges,proto3" json:"fee_and_charges,omitempty"`
	AddOnL                 string                 `protobuf:"bytes,43,opt,name=add_on_l,json=addOnL,proto3" json:"add_on_l,omitempty"`
	TotalLoanAmountL       string                 `protobuf:"bytes,44,opt,name=total_loan_amount_l,json=totalLoanAmountL,proto3" json:"total_loan_amount_l,omitempty"`
	LoanAmountL            string                 `protobuf:"bytes,45,opt,name=loan_amount_l,json=loanAmountL,proto3" json:"loan_amount_l,omitempty"`
	DisbursedAmountL       string                 `protobuf:"bytes,46,opt,name=disbursed_amount_l,json=disbursedAmountL,proto3" json:"disbursed_amount_l,omitempty"`
	TotalPayableAmountL    string                 `protobuf:"bytes,47,opt,name=total_payable_amount_l,json=totalPayableAmountL,proto3" json:"total_payable_amount_l,omitempty"`
	DisbursalAmountL       string                 `protobuf:"bytes,48,opt,name=disbursal_amount_l,json=disbursalAmountL,proto3" json:"disbursal_amount_l,omitempty"`
	FcpInterest            int32                  `protobuf:"varint,49,opt,name=fcp_interest,json=fcpInterest,proto3" json:"fcp_interest,omitempty"`
	NumberOfEmiL           string                 `protobuf:"bytes,50,opt,name=number_of_emi_l,json=numberOfEmiL,proto3" json:"number_of_emi_l,omitempty"`
	FirstEmiAmtL           string                 `protobuf:"bytes,51,opt,name=first_emi_amt_l,json=firstEmiAmtL,proto3" json:"first_emi_amt_l,omitempty"`
	SubsequentEmiL         string                 `protobuf:"bytes,52,opt,name=subsequent_emi_l,json=subsequentEmiL,proto3" json:"subsequent_emi_l,omitempty"`
	EffectiveRoi           float32                `protobuf:"fixed32,53,opt,name=effective_roi,json=effectiveRoi,proto3" json:"effective_roi,omitempty"`
	EffectiveRoiL          string                 `protobuf:"bytes,54,opt,name=effective_roi_l,json=effectiveRoiL,proto3" json:"effective_roi_l,omitempty"`
	EffectiveAnnualRoi     float32                `protobuf:"fixed32,55,opt,name=effective_annual_roi,json=effectiveAnnualRoi,proto3" json:"effective_annual_roi,omitempty"`
	EffectiveAnnualRoiL    string                 `protobuf:"bytes,56,opt,name=effective_annual_roi_l,json=effectiveAnnualRoiL,proto3" json:"effective_annual_roi_l,omitempty"`
	InsuranceL             string                 `protobuf:"bytes,57,opt,name=insurance_l,json=insuranceL,proto3" json:"insurance_l,omitempty"`
	EmiCardDescription     string                 `protobuf:"bytes,58,opt,name=emi_card_description,json=emiCardDescription,proto3" json:"emi_card_description,omitempty"`
	BillCardDescription    string                 `protobuf:"bytes,59,opt,name=bill_card_description,json=billCardDescription,proto3" json:"bill_card_description,omitempty"`
	InstallmentAmounts     string                 `protobuf:"bytes,60,opt,name=installment_amounts,json=installmentAmounts,proto3" json:"installment_amounts,omitempty"`
	AprTitle               string                 `protobuf:"bytes,61,opt,name=apr_title,json=aprTitle,proto3" json:"apr_title,omitempty"`
	AprValue               string                 `protobuf:"bytes,62,opt,name=apr_value,json=aprValue,proto3" json:"apr_value,omitempty"`
	AprType                string                 `protobuf:"bytes,63,opt,name=apr_type,json=aprType,proto3" json:"apr_type,omitempty"`
	CreditLineDetailsSheet string                 `protobuf:"bytes,64,opt,name=credit_line_details_sheet,json=creditLineDetailsSheet,proto3" json:"credit_line_details_sheet,omitempty"`
	Acknowledgement        string                 `protobuf:"bytes,65,opt,name=Acknowledgement,proto3" json:"Acknowledgement,omitempty"`
	PaymentUndertaking     string                 `protobuf:"bytes,66,opt,name=payment_undertaking,json=paymentUndertaking,proto3" json:"payment_undertaking,omitempty"`
	KeyFactStatement       string                 `protobuf:"bytes,67,opt,name=key_fact_statement,json=keyFactStatement,proto3" json:"key_fact_statement,omitempty"`
	SanctionLetter         string                 `protobuf:"bytes,68,opt,name=sanction_letter,json=sanctionLetter,proto3" json:"sanction_letter,omitempty"`
	FinancingDocuments     string                 `protobuf:"bytes,69,opt,name=financing_documents,json=financingDocuments,proto3" json:"financing_documents,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetLocDetailsResponse) Reset() {
	*x = GetLocDetailsResponse{}
	mi := &file_loans_getlocdetails_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLocDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocDetailsResponse) ProtoMessage() {}

func (x *GetLocDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loans_getlocdetails_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetLocDetailsResponse) Descriptor() ([]byte, []int) {
	return file_loans_getlocdetails_proto_rawDescGZIP(), []int{1}
}

func (x *GetLocDetailsResponse) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

func (x *GetLocDetailsResponse) GetRequestedAmount() int32 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *GetLocDetailsResponse) GetTenure() int32 {
	if x != nil {
		return x.Tenure
	}
	return 0
}

func (x *GetLocDetailsResponse) GetEmiAmount() int32 {
	if x != nil {
		return x.EmiAmount
	}
	return 0
}

func (x *GetLocDetailsResponse) GetNetAmountPayable() int32 {
	if x != nil {
		return x.NetAmountPayable
	}
	return 0
}

func (x *GetLocDetailsResponse) GetFirstEmiDate() string {
	if x != nil {
		return x.FirstEmiDate
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEmiDate() string {
	if x != nil {
		return x.EmiDate
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFinalDisbursalAmount() int32 {
	if x != nil {
		return x.FinalDisbursalAmount
	}
	return 0
}

func (x *GetLocDetailsResponse) GetUpfrontInterest() int32 {
	if x != nil {
		return x.UpfrontInterest
	}
	return 0
}

func (x *GetLocDetailsResponse) GetApprovedAmount() int32 {
	if x != nil {
		return x.ApprovedAmount
	}
	return 0
}

func (x *GetLocDetailsResponse) GetProcessingFees() int32 {
	if x != nil {
		return x.ProcessingFees
	}
	return 0
}

func (x *GetLocDetailsResponse) GetGst() int32 {
	if x != nil {
		return x.Gst
	}
	return 0
}

func (x *GetLocDetailsResponse) GetLoanId() string {
	if x != nil {
		return x.LoanId
	}
	return ""
}

func (x *GetLocDetailsResponse) GetRateOfInterest() float32 {
	if x != nil {
		return x.RateOfInterest
	}
	return 0
}

func (x *GetLocDetailsResponse) GetBillAmount() string {
	if x != nil && x.BillAmount != nil {
		return *x.BillAmount
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEarlyForeclosureFees() int32 {
	if x != nil {
		return x.EarlyForeclosureFees
	}
	return 0
}

func (x *GetLocDetailsResponse) GetConvenienceFees() int32 {
	if x != nil {
		return x.ConvenienceFees
	}
	return 0
}

func (x *GetLocDetailsResponse) GetTotalInterestPay() int32 {
	if x != nil {
		return x.TotalInterestPay
	}
	return 0
}

func (x *GetLocDetailsResponse) GetEffectiveAnnualRate() float32 {
	if x != nil {
		return x.EffectiveAnnualRate
	}
	return 0
}

func (x *GetLocDetailsResponse) GetTransactionRate() float32 {
	if x != nil {
		return x.TransactionRate
	}
	return 0
}

func (x *GetLocDetailsResponse) GetTransactionFeeAmount() int32 {
	if x != nil {
		return x.TransactionFeeAmount
	}
	return 0
}

func (x *GetLocDetailsResponse) GetEmiDateL() string {
	if x != nil {
		return x.EmiDateL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEmiAmountL() string {
	if x != nil {
		return x.EmiAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFirstEmiDateL() string {
	if x != nil {
		return x.FirstEmiDateL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFinalDisbursalAmountL() string {
	if x != nil {
		return x.FinalDisbursalAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetUpfrontInterestL() string {
	if x != nil {
		return x.UpfrontInterestL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetProcessingFeesL() string {
	if x != nil {
		return x.ProcessingFeesL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetGstL() string {
	if x != nil {
		return x.GstL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetRateOfInterestL() string {
	if x != nil {
		return x.RateOfInterestL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetTransFeePlusGst() int32 {
	if x != nil {
		return x.TransFeePlusGst
	}
	return 0
}

func (x *GetLocDetailsResponse) GetProcessingFeePlusGst() int32 {
	if x != nil {
		return x.ProcessingFeePlusGst
	}
	return 0
}

func (x *GetLocDetailsResponse) GetBillAmountL() string {
	if x != nil {
		return x.BillAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEarlyForeclosureFeesL() string {
	if x != nil {
		return x.EarlyForeclosureFeesL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetConvenienceFeesL() string {
	if x != nil {
		return x.ConvenienceFeesL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetTotalInterestPayL() string {
	if x != nil {
		return x.TotalInterestPayL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEffectiveAnnualRateL() string {
	if x != nil {
		return x.EffectiveAnnualRateL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetTransFeePlusGstL() string {
	if x != nil {
		return x.TransFeePlusGstL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetProcessingFeePlusGstL() string {
	if x != nil {
		return x.ProcessingFeePlusGstL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetMaxAmountL() string {
	if x != nil {
		return x.MaxAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetCreditReportFeesL() string {
	if x != nil {
		return x.CreditReportFeesL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFeeAndChargesL() string {
	if x != nil {
		return x.FeeAndChargesL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFeeAndCharges() int32 {
	if x != nil {
		return x.FeeAndCharges
	}
	return 0
}

func (x *GetLocDetailsResponse) GetAddOnL() string {
	if x != nil {
		return x.AddOnL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetTotalLoanAmountL() string {
	if x != nil {
		return x.TotalLoanAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetLoanAmountL() string {
	if x != nil {
		return x.LoanAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetDisbursedAmountL() string {
	if x != nil {
		return x.DisbursedAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetTotalPayableAmountL() string {
	if x != nil {
		return x.TotalPayableAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetDisbursalAmountL() string {
	if x != nil {
		return x.DisbursalAmountL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFcpInterest() int32 {
	if x != nil {
		return x.FcpInterest
	}
	return 0
}

func (x *GetLocDetailsResponse) GetNumberOfEmiL() string {
	if x != nil {
		return x.NumberOfEmiL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFirstEmiAmtL() string {
	if x != nil {
		return x.FirstEmiAmtL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetSubsequentEmiL() string {
	if x != nil {
		return x.SubsequentEmiL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEffectiveRoi() float32 {
	if x != nil {
		return x.EffectiveRoi
	}
	return 0
}

func (x *GetLocDetailsResponse) GetEffectiveRoiL() string {
	if x != nil {
		return x.EffectiveRoiL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEffectiveAnnualRoi() float32 {
	if x != nil {
		return x.EffectiveAnnualRoi
	}
	return 0
}

func (x *GetLocDetailsResponse) GetEffectiveAnnualRoiL() string {
	if x != nil {
		return x.EffectiveAnnualRoiL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetInsuranceL() string {
	if x != nil {
		return x.InsuranceL
	}
	return ""
}

func (x *GetLocDetailsResponse) GetEmiCardDescription() string {
	if x != nil {
		return x.EmiCardDescription
	}
	return ""
}

func (x *GetLocDetailsResponse) GetBillCardDescription() string {
	if x != nil {
		return x.BillCardDescription
	}
	return ""
}

func (x *GetLocDetailsResponse) GetInstallmentAmounts() string {
	if x != nil {
		return x.InstallmentAmounts
	}
	return ""
}

func (x *GetLocDetailsResponse) GetAprTitle() string {
	if x != nil {
		return x.AprTitle
	}
	return ""
}

func (x *GetLocDetailsResponse) GetAprValue() string {
	if x != nil {
		return x.AprValue
	}
	return ""
}

func (x *GetLocDetailsResponse) GetAprType() string {
	if x != nil {
		return x.AprType
	}
	return ""
}

func (x *GetLocDetailsResponse) GetCreditLineDetailsSheet() string {
	if x != nil {
		return x.CreditLineDetailsSheet
	}
	return ""
}

func (x *GetLocDetailsResponse) GetAcknowledgement() string {
	if x != nil {
		return x.Acknowledgement
	}
	return ""
}

func (x *GetLocDetailsResponse) GetPaymentUndertaking() string {
	if x != nil {
		return x.PaymentUndertaking
	}
	return ""
}

func (x *GetLocDetailsResponse) GetKeyFactStatement() string {
	if x != nil {
		return x.KeyFactStatement
	}
	return ""
}

func (x *GetLocDetailsResponse) GetSanctionLetter() string {
	if x != nil {
		return x.SanctionLetter
	}
	return ""
}

func (x *GetLocDetailsResponse) GetFinancingDocuments() string {
	if x != nil {
		return x.FinancingDocuments
	}
	return ""
}

var File_loans_getlocdetails_proto protoreflect.FileDescriptor

var file_loans_getlocdetails_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x6f, 0x63, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x6c, 0x6f, 0x63, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x81, 0x17, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x75, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6d, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6d, 0x69, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x69, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x67, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62,
	0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x16,
	0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x69, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x12, 0x20,
	0x0a, 0x0c, 0x65, 0x6d, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x12, 0x27, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x45, 0x6d, 0x69, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4c,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x73, 0x4c, 0x12, 0x13, 0x0a, 0x05,
	0x67, 0x73, 0x74, 0x5f, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x73, 0x74,
	0x4c, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4c, 0x12, 0x2b,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73,
	0x5f, 0x67, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x46, 0x65, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x47, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c,
	0x75, 0x73, 0x5f, 0x67, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x47,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x5f, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x73, 0x4c, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x4c, 0x12, 0x2f, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4c, 0x12, 0x35,
	0x0a, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x12, 0x2e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x67, 0x73, 0x74, 0x5f, 0x6c, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x65, 0x65, 0x50, 0x6c, 0x75,
	0x73, 0x47, 0x73, 0x74, 0x4c, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x67, 0x73, 0x74,
	0x5f, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x47, 0x73, 0x74, 0x4c, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65,
	0x73, 0x4c, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x4c, 0x12, 0x26, 0x0a,
	0x0f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x4c, 0x12,
	0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x63, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6d, 0x69, 0x4c, 0x12, 0x25, 0x0a,
	0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x6c,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6d, 0x69,
	0x41, 0x6d, 0x74, 0x4c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x69, 0x4c, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x69, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x69, 0x5f, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x69, 0x4c, 0x12, 0x30, 0x0a, 0x14, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x72, 0x6f, 0x69, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x69, 0x12, 0x33, 0x0a,
	0x16, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x69, 0x5f, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f,
	0x69, 0x4c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6d, 0x69, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x65, 0x6d, 0x69, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70,
	0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6b, 0x65, 0x79, 0x46, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_loans_getlocdetails_proto_rawDescOnce sync.Once
	file_loans_getlocdetails_proto_rawDescData []byte
)

func file_loans_getlocdetails_proto_rawDescGZIP() []byte {
	file_loans_getlocdetails_proto_rawDescOnce.Do(func() {
		file_loans_getlocdetails_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_loans_getlocdetails_proto_rawDesc), len(file_loans_getlocdetails_proto_rawDesc)))
	})
	return file_loans_getlocdetails_proto_rawDescData
}

var file_loans_getlocdetails_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_loans_getlocdetails_proto_goTypes = []any{
	(*GetLocDetailsRequest)(nil),  // 0: loans.getlocdetails.GetLocDetailsRequest
	(*GetLocDetailsResponse)(nil), // 1: loans.getlocdetails.GetLocDetailsResponse
}
var file_loans_getlocdetails_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_loans_getlocdetails_proto_init() }
func file_loans_getlocdetails_proto_init() {
	if File_loans_getlocdetails_proto != nil {
		return
	}
	file_loans_getlocdetails_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_loans_getlocdetails_proto_rawDesc), len(file_loans_getlocdetails_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_loans_getlocdetails_proto_goTypes,
		DependencyIndexes: file_loans_getlocdetails_proto_depIdxs,
		MessageInfos:      file_loans_getlocdetails_proto_msgTypes,
	}.Build()
	File_loans_getlocdetails_proto = out.File
	file_loans_getlocdetails_proto_goTypes = nil
	file_loans_getlocdetails_proto_depIdxs = nil
}
