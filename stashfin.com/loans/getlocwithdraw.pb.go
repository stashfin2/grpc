// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: loans/getlocwithdraw.proto

package loans

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLocWithdrawlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount             int32  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Tenure             int32  `protobuf:"varint,2,opt,name=tenure,proto3" json:"tenure,omitempty"`
	GatewayEnable      int32  `protobuf:"varint,3,opt,name=gateway_enable,json=gatewayEnable,proto3" json:"gateway_enable,omitempty"`
	IsFip              bool   `protobuf:"varint,4,opt,name=is_fip,json=isFip,proto3" json:"is_fip,omitempty"`
	CreditShieldEnable bool   `protobuf:"varint,5,opt,name=credit_shield_enable,json=creditShieldEnable,proto3" json:"credit_shield_enable,omitempty"`
	PcrEnable          bool   `protobuf:"varint,6,opt,name=pcr_enable,json=pcrEnable,proto3" json:"pcr_enable,omitempty"`
	GatewayType        string `protobuf:"bytes,7,opt,name=gateway_type,json=gatewayType,proto3" json:"gateway_type,omitempty"`
	CreditShieldOpt    bool   `protobuf:"varint,8,opt,name=credit_shield_opt,json=creditShieldOpt,proto3" json:"credit_shield_opt,omitempty"`
	PcrOpt             bool   `protobuf:"varint,9,opt,name=pcr_opt,json=pcrOpt,proto3" json:"pcr_opt,omitempty"`
}

func (x *GetLocWithdrawlRequest) Reset() {
	*x = GetLocWithdrawlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loans_getlocwithdraw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocWithdrawlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocWithdrawlRequest) ProtoMessage() {}

func (x *GetLocWithdrawlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loans_getlocwithdraw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocWithdrawlRequest.ProtoReflect.Descriptor instead.
func (*GetLocWithdrawlRequest) Descriptor() ([]byte, []int) {
	return file_loans_getlocwithdraw_proto_rawDescGZIP(), []int{0}
}

func (x *GetLocWithdrawlRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetLocWithdrawlRequest) GetTenure() int32 {
	if x != nil {
		return x.Tenure
	}
	return 0
}

func (x *GetLocWithdrawlRequest) GetGatewayEnable() int32 {
	if x != nil {
		return x.GatewayEnable
	}
	return 0
}

func (x *GetLocWithdrawlRequest) GetIsFip() bool {
	if x != nil {
		return x.IsFip
	}
	return false
}

func (x *GetLocWithdrawlRequest) GetCreditShieldEnable() bool {
	if x != nil {
		return x.CreditShieldEnable
	}
	return false
}

func (x *GetLocWithdrawlRequest) GetPcrEnable() bool {
	if x != nil {
		return x.PcrEnable
	}
	return false
}

func (x *GetLocWithdrawlRequest) GetGatewayType() string {
	if x != nil {
		return x.GatewayType
	}
	return ""
}

func (x *GetLocWithdrawlRequest) GetCreditShieldOpt() bool {
	if x != nil {
		return x.CreditShieldOpt
	}
	return false
}

func (x *GetLocWithdrawlRequest) GetPcrOpt() bool {
	if x != nil {
		return x.PcrOpt
	}
	return false
}

type AgreementLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required              *bool   `protobuf:"varint,1,opt,name=required,proto3,oneof" json:"required,omitempty"`
	ErrorMsg              *string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
	ApplicantPdfUrl       *string `protobuf:"bytes,3,opt,name=applicant_pdf_url,json=applicantPdfUrl,proto3,oneof" json:"applicant_pdf_url,omitempty"`
	CoApplicantPdfUrl     *string `protobuf:"bytes,4,opt,name=co_applicant_pdf_url,json=coApplicantPdfUrl,proto3,oneof" json:"co_applicant_pdf_url,omitempty"`
	ColenderAgreement     *string `protobuf:"bytes,5,opt,name=colender_agreement,json=colenderAgreement,proto3,oneof" json:"colender_agreement,omitempty"`
	Colender              *string `protobuf:"bytes,6,opt,name=colender,proto3,oneof" json:"colender,omitempty"`
	CreditLineDetailSheet *string `protobuf:"bytes,7,opt,name=credit_line_detail_sheet,json=creditLineDetailSheet,proto3,oneof" json:"credit_line_detail_sheet,omitempty"`
	PaymentUndertaking    *string `protobuf:"bytes,8,opt,name=payment_undertaking,json=paymentUndertaking,proto3,oneof" json:"payment_undertaking,omitempty"`
	TcOnlineDisbursal     *string `protobuf:"bytes,9,opt,name=tc_online_disbursal,json=tcOnlineDisbursal,proto3,oneof" json:"tc_online_disbursal,omitempty"`
	ScheduleForCharges    *string `protobuf:"bytes,10,opt,name=schedule_for_charges,json=scheduleForCharges,proto3,oneof" json:"schedule_for_charges,omitempty"`
	AcknowledgeByBorrower *string `protobuf:"bytes,11,opt,name=acknowledge_by_borrower,json=acknowledgeByBorrower,proto3,oneof" json:"acknowledge_by_borrower,omitempty"`
	VenacularDeclaration  *string `protobuf:"bytes,12,opt,name=venacular_declaration,json=venacularDeclaration,proto3,oneof" json:"venacular_declaration,omitempty"`
	Declaration           *string `protobuf:"bytes,13,opt,name=Declaration,proto3,oneof" json:"Declaration,omitempty"`
}

func (x *AgreementLinks) Reset() {
	*x = AgreementLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loans_getlocwithdraw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgreementLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgreementLinks) ProtoMessage() {}

func (x *AgreementLinks) ProtoReflect() protoreflect.Message {
	mi := &file_loans_getlocwithdraw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgreementLinks.ProtoReflect.Descriptor instead.
func (*AgreementLinks) Descriptor() ([]byte, []int) {
	return file_loans_getlocwithdraw_proto_rawDescGZIP(), []int{1}
}

func (x *AgreementLinks) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *AgreementLinks) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

func (x *AgreementLinks) GetApplicantPdfUrl() string {
	if x != nil && x.ApplicantPdfUrl != nil {
		return *x.ApplicantPdfUrl
	}
	return ""
}

func (x *AgreementLinks) GetCoApplicantPdfUrl() string {
	if x != nil && x.CoApplicantPdfUrl != nil {
		return *x.CoApplicantPdfUrl
	}
	return ""
}

func (x *AgreementLinks) GetColenderAgreement() string {
	if x != nil && x.ColenderAgreement != nil {
		return *x.ColenderAgreement
	}
	return ""
}

func (x *AgreementLinks) GetColender() string {
	if x != nil && x.Colender != nil {
		return *x.Colender
	}
	return ""
}

func (x *AgreementLinks) GetCreditLineDetailSheet() string {
	if x != nil && x.CreditLineDetailSheet != nil {
		return *x.CreditLineDetailSheet
	}
	return ""
}

func (x *AgreementLinks) GetPaymentUndertaking() string {
	if x != nil && x.PaymentUndertaking != nil {
		return *x.PaymentUndertaking
	}
	return ""
}

func (x *AgreementLinks) GetTcOnlineDisbursal() string {
	if x != nil && x.TcOnlineDisbursal != nil {
		return *x.TcOnlineDisbursal
	}
	return ""
}

func (x *AgreementLinks) GetScheduleForCharges() string {
	if x != nil && x.ScheduleForCharges != nil {
		return *x.ScheduleForCharges
	}
	return ""
}

func (x *AgreementLinks) GetAcknowledgeByBorrower() string {
	if x != nil && x.AcknowledgeByBorrower != nil {
		return *x.AcknowledgeByBorrower
	}
	return ""
}

func (x *AgreementLinks) GetVenacularDeclaration() string {
	if x != nil && x.VenacularDeclaration != nil {
		return *x.VenacularDeclaration
	}
	return ""
}

func (x *AgreementLinks) GetDeclaration() string {
	if x != nil && x.Declaration != nil {
		return *x.Declaration
	}
	return ""
}

type InsuranceDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc  *string `protobuf:"bytes,2,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	Icon  *string `protobuf:"bytes,3,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
}

func (x *InsuranceDesc) Reset() {
	*x = InsuranceDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loans_getlocwithdraw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsuranceDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsuranceDesc) ProtoMessage() {}

func (x *InsuranceDesc) ProtoReflect() protoreflect.Message {
	mi := &file_loans_getlocwithdraw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsuranceDesc.ProtoReflect.Descriptor instead.
func (*InsuranceDesc) Descriptor() ([]byte, []int) {
	return file_loans_getlocwithdraw_proto_rawDescGZIP(), []int{2}
}

func (x *InsuranceDesc) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InsuranceDesc) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *InsuranceDesc) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

type GetLocWithdrawlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayFees                *float64         `protobuf:"fixed64,1,opt,name=gateway_fees,json=gatewayFees,proto3,oneof" json:"gateway_fees,omitempty"`
	StrikedGatewayFees         *float64         `protobuf:"fixed64,2,opt,name=striked_gateway_fees,json=strikedGatewayFees,proto3,oneof" json:"striked_gateway_fees,omitempty"`
	BillDate                   string           `protobuf:"bytes,3,opt,name=bill_date,json=billDate,proto3" json:"bill_date,omitempty"`
	Matched                    bool             `protobuf:"varint,4,opt,name=matched,proto3" json:"matched,omitempty"`
	RemainingLoc               int32            `protobuf:"varint,5,opt,name=remaining_loc,json=remainingLoc,proto3" json:"remaining_loc,omitempty"`
	RequestedAmount            int32            `protobuf:"varint,6,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"`
	Tenure                     int32            `protobuf:"varint,7,opt,name=tenure,proto3" json:"tenure,omitempty"`
	EmiAmount                  int32            `protobuf:"varint,8,opt,name=emi_amount,json=emiAmount,proto3" json:"emi_amount,omitempty"`
	NetAmountPayable           int32            `protobuf:"varint,9,opt,name=net_amount_payable,json=netAmountPayable,proto3" json:"net_amount_payable,omitempty"`
	FirstEmiDate               string           `protobuf:"bytes,10,opt,name=first_emi_date,json=firstEmiDate,proto3" json:"first_emi_date,omitempty"`
	EmiDate                    string           `protobuf:"bytes,11,opt,name=emi_date,json=emiDate,proto3" json:"emi_date,omitempty"`
	FinalDisbursalAmount       int32            `protobuf:"varint,12,opt,name=final_disbursal_amount,json=finalDisbursalAmount,proto3" json:"final_disbursal_amount,omitempty"`
	UpfrontInterest            *float64         `protobuf:"fixed64,13,opt,name=upfront_interest,json=upfrontInterest,proto3,oneof" json:"upfront_interest,omitempty"`
	ApprovedAmount             int32            `protobuf:"varint,14,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`
	ProcessingFees             *int32           `protobuf:"varint,15,opt,name=processing_fees,json=processingFees,proto3,oneof" json:"processing_fees,omitempty"`
	Gst                        *int32           `protobuf:"varint,16,opt,name=gst,proto3,oneof" json:"gst,omitempty"`
	RateOfInterest             *float64         `protobuf:"fixed64,17,opt,name=rate_of_interest,json=rateOfInterest,proto3,oneof" json:"rate_of_interest,omitempty"`
	BillAmount                 int32            `protobuf:"varint,18,opt,name=bill_amount,json=billAmount,proto3" json:"bill_amount,omitempty"`
	EarlyForeclosureFees       *int32           `protobuf:"varint,19,opt,name=early_foreclosure_fees,json=earlyForeclosureFees,proto3,oneof" json:"early_foreclosure_fees,omitempty"`
	ConvenienceFees            *int32           `protobuf:"varint,20,opt,name=convenience_fees,json=convenienceFees,proto3,oneof" json:"convenience_fees,omitempty"`
	TotalInterestPay           *int32           `protobuf:"varint,21,opt,name=total_interest_pay,json=totalInterestPay,proto3,oneof" json:"total_interest_pay,omitempty"`
	EffectiveAnnualRate        *float64         `protobuf:"fixed64,22,opt,name=effective_annual_rate,json=effectiveAnnualRate,proto3,oneof" json:"effective_annual_rate,omitempty"`
	TransactionRate            *float64         `protobuf:"fixed64,23,opt,name=transaction_rate,json=transactionRate,proto3,oneof" json:"transaction_rate,omitempty"`
	TransactionFeeAmount       *int32           `protobuf:"varint,24,opt,name=transaction_fee_amount,json=transactionFeeAmount,proto3,oneof" json:"transaction_fee_amount,omitempty"`
	EmiDateL                   string           `protobuf:"bytes,25,opt,name=emi_date_l,json=emiDateL,proto3" json:"emi_date_l,omitempty"`
	EmiAmountL                 string           `protobuf:"bytes,26,opt,name=emi_amount_l,json=emiAmountL,proto3" json:"emi_amount_l,omitempty"`
	FirstEmiDateL              string           `protobuf:"bytes,27,opt,name=first_emi_date_l,json=firstEmiDateL,proto3" json:"first_emi_date_l,omitempty"`
	FinalDisbursalAmountL      string           `protobuf:"bytes,28,opt,name=final_disbursal_amount_l,json=finalDisbursalAmountL,proto3" json:"final_disbursal_amount_l,omitempty"`
	UpfrontInterestL           string           `protobuf:"bytes,29,opt,name=upfront_interest_l,json=upfrontInterestL,proto3" json:"upfront_interest_l,omitempty"`
	ProcessingFeesL            string           `protobuf:"bytes,30,opt,name=processing_fees_l,json=processingFeesL,proto3" json:"processing_fees_l,omitempty"`
	GstL                       string           `protobuf:"bytes,31,opt,name=gst_l,json=gstL,proto3" json:"gst_l,omitempty"`
	RateOfInterestL            string           `protobuf:"bytes,32,opt,name=rate_of_interest_l,json=rateOfInterestL,proto3" json:"rate_of_interest_l,omitempty"`
	BillAmountL                string           `protobuf:"bytes,33,opt,name=bill_amount_l,json=billAmountL,proto3" json:"bill_amount_l,omitempty"`
	EarlyForeclosureFeesL      string           `protobuf:"bytes,34,opt,name=early_foreclosure_fees_l,json=earlyForeclosureFeesL,proto3" json:"early_foreclosure_fees_l,omitempty"`
	ConvenienceFeesL           string           `protobuf:"bytes,35,opt,name=convenience_fees_l,json=convenienceFeesL,proto3" json:"convenience_fees_l,omitempty"`
	TotalInterestPayL          string           `protobuf:"bytes,36,opt,name=total_interest_pay_l,json=totalInterestPayL,proto3" json:"total_interest_pay_l,omitempty"`
	EffectiveAnnualRateL       string           `protobuf:"bytes,37,opt,name=effective_annual_rate_l,json=effectiveAnnualRateL,proto3" json:"effective_annual_rate_l,omitempty"`
	TransactionFeeBillAmount   *int32           `protobuf:"varint,38,opt,name=transaction_fee_bill_amount,json=transactionFeeBillAmount,proto3,oneof" json:"transaction_fee_bill_amount,omitempty"`
	ProcessingFeePlusGst       *int32           `protobuf:"varint,39,opt,name=processing_fee_plus_gst,json=processingFeePlusGst,proto3,oneof" json:"processing_fee_plus_gst,omitempty"`
	TransFeePlusGst            *int32           `protobuf:"varint,40,opt,name=trans_fee_plus_gst,json=transFeePlusGst,proto3,oneof" json:"trans_fee_plus_gst,omitempty"`
	TransFeePlusGstL           string           `protobuf:"bytes,41,opt,name=trans_fee_plus_gst_l,json=transFeePlusGstL,proto3" json:"trans_fee_plus_gst_l,omitempty"`
	ProcessingFeePlusGstL      string           `protobuf:"bytes,42,opt,name=processing_fee_plus_gst_l,json=processingFeePlusGstL,proto3" json:"processing_fee_plus_gst_l,omitempty"`
	MaxAmountL                 string           `protobuf:"bytes,43,opt,name=max_amount_l,json=maxAmountL,proto3" json:"max_amount_l,omitempty"`
	CreditReportFeesL          string           `protobuf:"bytes,44,opt,name=credit_report_fees_l,json=creditReportFeesL,proto3" json:"credit_report_fees_l,omitempty"`
	FeeAndChargesL             string           `protobuf:"bytes,45,opt,name=fee_and_charges_l,json=feeAndChargesL,proto3" json:"fee_and_charges_l,omitempty"`
	FeeAndCharges              *int32           `protobuf:"varint,46,opt,name=fee_and_charges,json=feeAndCharges,proto3,oneof" json:"fee_and_charges,omitempty"`
	FeeAndChargesBill          *int32           `protobuf:"varint,47,opt,name=fee_and_charges_bill,json=feeAndChargesBill,proto3,oneof" json:"fee_and_charges_bill,omitempty"`
	AddOnL                     string           `protobuf:"bytes,48,opt,name=add_on_l,json=addOnL,proto3" json:"add_on_l,omitempty"`
	TotalLoanAmountL           string           `protobuf:"bytes,49,opt,name=total_loan_amount_l,json=totalLoanAmountL,proto3" json:"total_loan_amount_l,omitempty"`
	LoanAmountL                string           `protobuf:"bytes,50,opt,name=loan_amount_l,json=loanAmountL,proto3" json:"loan_amount_l,omitempty"`
	DisbursedAmountL           string           `protobuf:"bytes,51,opt,name=disbursed_amount_l,json=disbursedAmountL,proto3" json:"disbursed_amount_l,omitempty"`
	TotalPayableAmountL        string           `protobuf:"bytes,52,opt,name=total_payable_amount_l,json=totalPayableAmountL,proto3" json:"total_payable_amount_l,omitempty"`
	DisbursalAmountL           string           `protobuf:"bytes,53,opt,name=disbursal_amount_l,json=disbursalAmountL,proto3" json:"disbursal_amount_l,omitempty"`
	FcpInterest                *int32           `protobuf:"varint,54,opt,name=fcp_interest,json=fcpInterest,proto3,oneof" json:"fcp_interest,omitempty"`
	NumberOfEmiL               string           `protobuf:"bytes,55,opt,name=number_of_emi_l,json=numberOfEmiL,proto3" json:"number_of_emi_l,omitempty"`
	FirstEmiAmtL               string           `protobuf:"bytes,56,opt,name=first_emi_amt_l,json=firstEmiAmtL,proto3" json:"first_emi_amt_l,omitempty"`
	SubsequentEmiL             string           `protobuf:"bytes,57,opt,name=subsequent_emi_l,json=subsequentEmiL,proto3" json:"subsequent_emi_l,omitempty"`
	EffectiveRoiL              string           `protobuf:"bytes,58,opt,name=effective_roi_l,json=effectiveRoiL,proto3" json:"effective_roi_l,omitempty"`
	EffectiveRoi               *float64         `protobuf:"fixed64,59,opt,name=effective_roi,json=effectiveRoi,proto3,oneof" json:"effective_roi,omitempty"`
	EffectiveAnnualRoiL        string           `protobuf:"bytes,60,opt,name=effective_annual_roi_l,json=effectiveAnnualRoiL,proto3" json:"effective_annual_roi_l,omitempty"`
	EffectiveAnnualRoi         *float64         `protobuf:"fixed64,61,opt,name=effective_annual_roi,json=effectiveAnnualRoi,proto3,oneof" json:"effective_annual_roi,omitempty"`
	InsuranceL                 string           `protobuf:"bytes,62,opt,name=insurance_l,json=insuranceL,proto3" json:"insurance_l,omitempty"`
	EmiCardDescription         string           `protobuf:"bytes,63,opt,name=emi_card_description,json=emiCardDescription,proto3" json:"emi_card_description,omitempty"`
	BillCardDescription        string           `protobuf:"bytes,64,opt,name=bill_card_description,json=billCardDescription,proto3" json:"bill_card_description,omitempty"`
	LoanId                     string           `protobuf:"bytes,65,opt,name=loan_id,json=loanId,proto3" json:"loan_id,omitempty"`
	InstallmentAmounts         string           `protobuf:"bytes,66,opt,name=installment_amounts,json=installmentAmounts,proto3" json:"installment_amounts,omitempty"`
	AprTitle                   string           `protobuf:"bytes,67,opt,name=apr_title,json=aprTitle,proto3" json:"apr_title,omitempty"`
	AprValue                   string           `protobuf:"bytes,68,opt,name=apr_value,json=aprValue,proto3" json:"apr_value,omitempty"`
	AprType                    string           `protobuf:"bytes,69,opt,name=apr_type,json=aprType,proto3" json:"apr_type,omitempty"`
	ColenderId                 *int32           `protobuf:"varint,70,opt,name=colender_id,json=colenderId,proto3,oneof" json:"colender_id,omitempty"`
	CreditLineDetailsSheet     *string          `protobuf:"bytes,71,opt,name=credit_line_details_sheet,json=creditLineDetailsSheet,proto3,oneof" json:"credit_line_details_sheet,omitempty"`
	Acknowledgement            *string          `protobuf:"bytes,72,opt,name=Acknowledgement,proto3,oneof" json:"Acknowledgement,omitempty"`
	PaymentUndertaking         *string          `protobuf:"bytes,73,opt,name=payment_undertaking,json=paymentUndertaking,proto3,oneof" json:"payment_undertaking,omitempty"`
	KeyFactStatement           *string          `protobuf:"bytes,74,opt,name=key_fact_statement,json=keyFactStatement,proto3,oneof" json:"key_fact_statement,omitempty"`
	SanctionLetter             *string          `protobuf:"bytes,75,opt,name=sanction_letter,json=sanctionLetter,proto3,oneof" json:"sanction_letter,omitempty"`
	FinancingDocuments         *string          `protobuf:"bytes,76,opt,name=financing_documents,json=financingDocuments,proto3,oneof" json:"financing_documents,omitempty"`
	LandersCreditFacilityForm  *string          `protobuf:"bytes,77,opt,name=landers_credit_facility_form,json=landersCreditFacilityForm,proto3,oneof" json:"landers_credit_facility_form,omitempty"`
	AgreementLinks             *AgreementLinks  `protobuf:"bytes,78,opt,name=agreement_links,json=agreementLinks,proto3" json:"agreement_links,omitempty"`
	MaxAmount                  *int32           `protobuf:"varint,79,opt,name=max_amount,json=maxAmount,proto3,oneof" json:"max_amount,omitempty"`
	CreditReportFees           *int32           `protobuf:"varint,80,opt,name=credit_report_fees,json=creditReportFees,proto3,oneof" json:"credit_report_fees,omitempty"`
	CreditReportActualFees     *int32           `protobuf:"varint,81,opt,name=credit_report_actual_fees,json=creditReportActualFees,proto3,oneof" json:"credit_report_actual_fees,omitempty"`
	PlanId                     *int32           `protobuf:"varint,82,opt,name=plan_id,json=planId,proto3,oneof" json:"plan_id,omitempty"`
	LenderName                 *string          `protobuf:"bytes,83,opt,name=lender_name,json=lenderName,proto3,oneof" json:"lender_name,omitempty"`
	FreeLocEligibleBank        *string          `protobuf:"bytes,84,opt,name=free_loc_eligible_bank,json=freeLocEligibleBank,proto3,oneof" json:"free_loc_eligible_bank,omitempty"`
	InsuranceTitle             *string          `protobuf:"bytes,85,opt,name=insurance_title,json=insuranceTitle,proto3,oneof" json:"insurance_title,omitempty"`
	InsuranceDesc              []*InsuranceDesc `protobuf:"bytes,86,rep,name=insurance_desc,json=insuranceDesc,proto3" json:"insurance_desc,omitempty"`
	UpfrontInterestDescription *string          `protobuf:"bytes,87,opt,name=upfront_interest_description,json=upfrontInterestDescription,proto3,oneof" json:"upfront_interest_description,omitempty"`
	TxnId                      *string          `protobuf:"bytes,88,opt,name=txn_id,json=txnId,proto3,oneof" json:"txn_id,omitempty"`
}

func (x *GetLocWithdrawlResponse) Reset() {
	*x = GetLocWithdrawlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loans_getlocwithdraw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocWithdrawlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocWithdrawlResponse) ProtoMessage() {}

func (x *GetLocWithdrawlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_loans_getlocwithdraw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocWithdrawlResponse.ProtoReflect.Descriptor instead.
func (*GetLocWithdrawlResponse) Descriptor() ([]byte, []int) {
	return file_loans_getlocwithdraw_proto_rawDescGZIP(), []int{3}
}

func (x *GetLocWithdrawlResponse) GetGatewayFees() float64 {
	if x != nil && x.GatewayFees != nil {
		return *x.GatewayFees
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetStrikedGatewayFees() float64 {
	if x != nil && x.StrikedGatewayFees != nil {
		return *x.StrikedGatewayFees
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetBillDate() string {
	if x != nil {
		return x.BillDate
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

func (x *GetLocWithdrawlResponse) GetRemainingLoc() int32 {
	if x != nil {
		return x.RemainingLoc
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetRequestedAmount() int32 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetTenure() int32 {
	if x != nil {
		return x.Tenure
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetEmiAmount() int32 {
	if x != nil {
		return x.EmiAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetNetAmountPayable() int32 {
	if x != nil {
		return x.NetAmountPayable
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetFirstEmiDate() string {
	if x != nil {
		return x.FirstEmiDate
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEmiDate() string {
	if x != nil {
		return x.EmiDate
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFinalDisbursalAmount() int32 {
	if x != nil {
		return x.FinalDisbursalAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetUpfrontInterest() float64 {
	if x != nil && x.UpfrontInterest != nil {
		return *x.UpfrontInterest
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetApprovedAmount() int32 {
	if x != nil {
		return x.ApprovedAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetProcessingFees() int32 {
	if x != nil && x.ProcessingFees != nil {
		return *x.ProcessingFees
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetGst() int32 {
	if x != nil && x.Gst != nil {
		return *x.Gst
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetRateOfInterest() float64 {
	if x != nil && x.RateOfInterest != nil {
		return *x.RateOfInterest
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetBillAmount() int32 {
	if x != nil {
		return x.BillAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetEarlyForeclosureFees() int32 {
	if x != nil && x.EarlyForeclosureFees != nil {
		return *x.EarlyForeclosureFees
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetConvenienceFees() int32 {
	if x != nil && x.ConvenienceFees != nil {
		return *x.ConvenienceFees
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetTotalInterestPay() int32 {
	if x != nil && x.TotalInterestPay != nil {
		return *x.TotalInterestPay
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetEffectiveAnnualRate() float64 {
	if x != nil && x.EffectiveAnnualRate != nil {
		return *x.EffectiveAnnualRate
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetTransactionRate() float64 {
	if x != nil && x.TransactionRate != nil {
		return *x.TransactionRate
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetTransactionFeeAmount() int32 {
	if x != nil && x.TransactionFeeAmount != nil {
		return *x.TransactionFeeAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetEmiDateL() string {
	if x != nil {
		return x.EmiDateL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEmiAmountL() string {
	if x != nil {
		return x.EmiAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFirstEmiDateL() string {
	if x != nil {
		return x.FirstEmiDateL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFinalDisbursalAmountL() string {
	if x != nil {
		return x.FinalDisbursalAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetUpfrontInterestL() string {
	if x != nil {
		return x.UpfrontInterestL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetProcessingFeesL() string {
	if x != nil {
		return x.ProcessingFeesL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetGstL() string {
	if x != nil {
		return x.GstL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetRateOfInterestL() string {
	if x != nil {
		return x.RateOfInterestL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetBillAmountL() string {
	if x != nil {
		return x.BillAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEarlyForeclosureFeesL() string {
	if x != nil {
		return x.EarlyForeclosureFeesL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetConvenienceFeesL() string {
	if x != nil {
		return x.ConvenienceFeesL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetTotalInterestPayL() string {
	if x != nil {
		return x.TotalInterestPayL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEffectiveAnnualRateL() string {
	if x != nil {
		return x.EffectiveAnnualRateL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetTransactionFeeBillAmount() int32 {
	if x != nil && x.TransactionFeeBillAmount != nil {
		return *x.TransactionFeeBillAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetProcessingFeePlusGst() int32 {
	if x != nil && x.ProcessingFeePlusGst != nil {
		return *x.ProcessingFeePlusGst
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetTransFeePlusGst() int32 {
	if x != nil && x.TransFeePlusGst != nil {
		return *x.TransFeePlusGst
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetTransFeePlusGstL() string {
	if x != nil {
		return x.TransFeePlusGstL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetProcessingFeePlusGstL() string {
	if x != nil {
		return x.ProcessingFeePlusGstL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetMaxAmountL() string {
	if x != nil {
		return x.MaxAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetCreditReportFeesL() string {
	if x != nil {
		return x.CreditReportFeesL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFeeAndChargesL() string {
	if x != nil {
		return x.FeeAndChargesL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFeeAndCharges() int32 {
	if x != nil && x.FeeAndCharges != nil {
		return *x.FeeAndCharges
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetFeeAndChargesBill() int32 {
	if x != nil && x.FeeAndChargesBill != nil {
		return *x.FeeAndChargesBill
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetAddOnL() string {
	if x != nil {
		return x.AddOnL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetTotalLoanAmountL() string {
	if x != nil {
		return x.TotalLoanAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetLoanAmountL() string {
	if x != nil {
		return x.LoanAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetDisbursedAmountL() string {
	if x != nil {
		return x.DisbursedAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetTotalPayableAmountL() string {
	if x != nil {
		return x.TotalPayableAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetDisbursalAmountL() string {
	if x != nil {
		return x.DisbursalAmountL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFcpInterest() int32 {
	if x != nil && x.FcpInterest != nil {
		return *x.FcpInterest
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetNumberOfEmiL() string {
	if x != nil {
		return x.NumberOfEmiL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFirstEmiAmtL() string {
	if x != nil {
		return x.FirstEmiAmtL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetSubsequentEmiL() string {
	if x != nil {
		return x.SubsequentEmiL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEffectiveRoiL() string {
	if x != nil {
		return x.EffectiveRoiL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEffectiveRoi() float64 {
	if x != nil && x.EffectiveRoi != nil {
		return *x.EffectiveRoi
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetEffectiveAnnualRoiL() string {
	if x != nil {
		return x.EffectiveAnnualRoiL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEffectiveAnnualRoi() float64 {
	if x != nil && x.EffectiveAnnualRoi != nil {
		return *x.EffectiveAnnualRoi
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetInsuranceL() string {
	if x != nil {
		return x.InsuranceL
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetEmiCardDescription() string {
	if x != nil {
		return x.EmiCardDescription
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetBillCardDescription() string {
	if x != nil {
		return x.BillCardDescription
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetLoanId() string {
	if x != nil {
		return x.LoanId
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetInstallmentAmounts() string {
	if x != nil {
		return x.InstallmentAmounts
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetAprTitle() string {
	if x != nil {
		return x.AprTitle
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetAprValue() string {
	if x != nil {
		return x.AprValue
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetAprType() string {
	if x != nil {
		return x.AprType
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetColenderId() int32 {
	if x != nil && x.ColenderId != nil {
		return *x.ColenderId
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetCreditLineDetailsSheet() string {
	if x != nil && x.CreditLineDetailsSheet != nil {
		return *x.CreditLineDetailsSheet
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetAcknowledgement() string {
	if x != nil && x.Acknowledgement != nil {
		return *x.Acknowledgement
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetPaymentUndertaking() string {
	if x != nil && x.PaymentUndertaking != nil {
		return *x.PaymentUndertaking
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetKeyFactStatement() string {
	if x != nil && x.KeyFactStatement != nil {
		return *x.KeyFactStatement
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetSanctionLetter() string {
	if x != nil && x.SanctionLetter != nil {
		return *x.SanctionLetter
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFinancingDocuments() string {
	if x != nil && x.FinancingDocuments != nil {
		return *x.FinancingDocuments
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetLandersCreditFacilityForm() string {
	if x != nil && x.LandersCreditFacilityForm != nil {
		return *x.LandersCreditFacilityForm
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetAgreementLinks() *AgreementLinks {
	if x != nil {
		return x.AgreementLinks
	}
	return nil
}

func (x *GetLocWithdrawlResponse) GetMaxAmount() int32 {
	if x != nil && x.MaxAmount != nil {
		return *x.MaxAmount
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetCreditReportFees() int32 {
	if x != nil && x.CreditReportFees != nil {
		return *x.CreditReportFees
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetCreditReportActualFees() int32 {
	if x != nil && x.CreditReportActualFees != nil {
		return *x.CreditReportActualFees
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetPlanId() int32 {
	if x != nil && x.PlanId != nil {
		return *x.PlanId
	}
	return 0
}

func (x *GetLocWithdrawlResponse) GetLenderName() string {
	if x != nil && x.LenderName != nil {
		return *x.LenderName
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetFreeLocEligibleBank() string {
	if x != nil && x.FreeLocEligibleBank != nil {
		return *x.FreeLocEligibleBank
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetInsuranceTitle() string {
	if x != nil && x.InsuranceTitle != nil {
		return *x.InsuranceTitle
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetInsuranceDesc() []*InsuranceDesc {
	if x != nil {
		return x.InsuranceDesc
	}
	return nil
}

func (x *GetLocWithdrawlResponse) GetUpfrontInterestDescription() string {
	if x != nil && x.UpfrontInterestDescription != nil {
		return *x.UpfrontInterestDescription
	}
	return ""
}

func (x *GetLocWithdrawlResponse) GetTxnId() string {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return ""
}

var File_loans_getlocwithdraw_proto protoreflect.FileDescriptor

var file_loans_getlocwithdraw_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x6c, 0x6f, 0x63, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x6c, 0x6f, 0x63, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x22, 0xbf, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x46, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x63, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x63, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x63, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x63,
	0x72, 0x4f, 0x70, 0x74, 0x22, 0xa7, 0x07, 0x0a, 0x0e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x64, 0x66, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x63,
	0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x64, 0x66, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x11, 0x63, 0x6f, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x15, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x63,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11, 0x74, 0x63, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x15, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x79, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x15, 0x76, 0x65, 0x6e, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x14, 0x76, 0x65, 0x6e, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x64,
	0x66, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x64, 0x66, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6c, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x63, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x76, 0x65, 0x6e, 0x61, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69,
	0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xda, 0x25, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x12, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x65, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x6e, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x6e,
	0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6d, 0x69, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6e, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45,
	0x6d, 0x69, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x69, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75,
	0x72, 0x73, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x70, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x0f, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x67, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x03, 0x67,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x05, 0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x16, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x14, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x09, 0x52, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x6d, 0x69, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x69,
	0x44, 0x61, 0x74, 0x65, 0x4c, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6d, 0x69, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x69,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x27, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6d, 0x69, 0x44, 0x61, 0x74, 0x65, 0x4c,
	0x12, 0x37, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72,
	0x73, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x65, 0x73, 0x4c, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x73, 0x74, 0x5f, 0x6c, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x73, 0x74, 0x4c, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x4c, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69,
	0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65,
	0x73, 0x4c, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x4c,
	0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x4c, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x12, 0x42, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x67, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x50, 0x6c,
	0x75, 0x73, 0x47, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x67, 0x73, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x65, 0x65,
	0x50, 0x6c, 0x75, 0x73, 0x47, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x67, 0x73, 0x74,
	0x5f, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46,
	0x65, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x47, 0x73, 0x74, 0x4c, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x67, 0x73, 0x74, 0x5f, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x50, 0x6c, 0x75, 0x73,
	0x47, 0x73, 0x74, 0x4c, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x65, 0x65, 0x73, 0x4c, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x6c, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x4c, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0d, 0x66,
	0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x14, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52,
	0x11, 0x66, 0x65, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x69,
	0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6c, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x4c, 0x12,
	0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0b, 0x66, 0x63, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x6c, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6d,
	0x69, 0x4c, 0x12, 0x25, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x5f,
	0x61, 0x6d, 0x74, 0x5f, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x45, 0x6d, 0x69, 0x41, 0x6d, 0x74, 0x4c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x6c, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x69, 0x4c, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x69, 0x5f, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x69, 0x4c, 0x12, 0x28, 0x0a, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x69, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x12, 0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x69, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x69, 0x5f, 0x6c, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x69, 0x4c, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x69, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x69, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6d, 0x69, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x6d, 0x69, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x70, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x19, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x15, 0x52, 0x16, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x68, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x0f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x12, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x10, 0x6b, 0x65, 0x79, 0x46, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19,
	0x52, 0x0e, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x6c, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1b, 0x52, 0x19, 0x6c, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x0f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2e, 0x67, 0x65, 0x74, 0x6c, 0x6f, 0x63, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x2e,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0e,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1c, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d,
	0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x16, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1f, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0a, 0x6c, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x13, 0x66, 0x72, 0x65,
	0x65, 0x4c, 0x6f, 0x63, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x67, 0x65, 0x74, 0x6c, 0x6f, 0x63, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x45, 0x0a,
	0x1c, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x23, 0x52, 0x1a, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75,
	0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x67, 0x73, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73,
	0x5f, 0x67, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x69, 0x6c,
	0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x69, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x69, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x6f, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6c,
	0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x75,
	0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_loans_getlocwithdraw_proto_rawDescOnce sync.Once
	file_loans_getlocwithdraw_proto_rawDescData = file_loans_getlocwithdraw_proto_rawDesc
)

func file_loans_getlocwithdraw_proto_rawDescGZIP() []byte {
	file_loans_getlocwithdraw_proto_rawDescOnce.Do(func() {
		file_loans_getlocwithdraw_proto_rawDescData = protoimpl.X.CompressGZIP(file_loans_getlocwithdraw_proto_rawDescData)
	})
	return file_loans_getlocwithdraw_proto_rawDescData
}

var file_loans_getlocwithdraw_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_loans_getlocwithdraw_proto_goTypes = []interface{}{
	(*GetLocWithdrawlRequest)(nil),  // 0: loans.getlocwithdraw.GetLocWithdrawlRequest
	(*AgreementLinks)(nil),          // 1: loans.getlocwithdraw.AgreementLinks
	(*InsuranceDesc)(nil),           // 2: loans.getlocwithdraw.InsuranceDesc
	(*GetLocWithdrawlResponse)(nil), // 3: loans.getlocwithdraw.GetLocWithdrawlResponse
}
var file_loans_getlocwithdraw_proto_depIdxs = []int32{
	1, // 0: loans.getlocwithdraw.GetLocWithdrawlResponse.agreement_links:type_name -> loans.getlocwithdraw.AgreementLinks
	2, // 1: loans.getlocwithdraw.GetLocWithdrawlResponse.insurance_desc:type_name -> loans.getlocwithdraw.InsuranceDesc
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_loans_getlocwithdraw_proto_init() }
func file_loans_getlocwithdraw_proto_init() {
	if File_loans_getlocwithdraw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_loans_getlocwithdraw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocWithdrawlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loans_getlocwithdraw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgreementLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loans_getlocwithdraw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsuranceDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loans_getlocwithdraw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocWithdrawlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_loans_getlocwithdraw_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_loans_getlocwithdraw_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_loans_getlocwithdraw_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_loans_getlocwithdraw_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_loans_getlocwithdraw_proto_goTypes,
		DependencyIndexes: file_loans_getlocwithdraw_proto_depIdxs,
		MessageInfos:      file_loans_getlocwithdraw_proto_msgTypes,
	}.Build()
	File_loans_getlocwithdraw_proto = out.File
	file_loans_getlocwithdraw_proto_rawDesc = nil
	file_loans_getlocwithdraw_proto_goTypes = nil
	file_loans_getlocwithdraw_proto_depIdxs = nil
}
