// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: banking.proto

package stashfin_com

import (
	context "context"
	aa "github.com/stashfin2/grpc/stashfin.com/banking/aa"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankingClient is the client API for Banking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankingClient interface {
	GetBankList(ctx context.Context, in *aa.GetBankListRequest, opts ...grpc.CallOption) (*aa.GetBankListResponse, error)
	InitiateRequest(ctx context.Context, in *aa.InitiateRequest, opts ...grpc.CallOption) (*aa.InitiateResponse, error)
	GetRpdLink(ctx context.Context, in *aa.CreateRpdLinkRequest, opts ...grpc.CallOption) (*aa.CreateRpdLinkResponse, error)
	GetAASupport(ctx context.Context, in *aa.GetAASupportRequest, opts ...grpc.CallOption) (*aa.GetAASupportResponse, error)
	InitiatePennyDrop(ctx context.Context, in *aa.PennyDropRequest, opts ...grpc.CallOption) (*aa.PennyDropResponse, error)
	GetCustomerBank(ctx context.Context, in *aa.GetCustomerBankRequest, opts ...grpc.CallOption) (*aa.GetCustomerBankResponse, error)
	NetBankingInitiate(ctx context.Context, in *aa.InputPerfiosRequest, opts ...grpc.CallOption) (*aa.OutputPerfiosResponse, error)
	GetRPDStatus(ctx context.Context, in *aa.GetRPDPollingStatusRequest, opts ...grpc.CallOption) (*aa.GetRPDPollingStatusResponse, error)
}

type bankingClient struct {
	cc grpc.ClientConnInterface
}

func NewBankingClient(cc grpc.ClientConnInterface) BankingClient {
	return &bankingClient{cc}
}

func (c *bankingClient) GetBankList(ctx context.Context, in *aa.GetBankListRequest, opts ...grpc.CallOption) (*aa.GetBankListResponse, error) {
	out := new(aa.GetBankListResponse)
	err := c.cc.Invoke(ctx, "/service.banking/getBankList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) InitiateRequest(ctx context.Context, in *aa.InitiateRequest, opts ...grpc.CallOption) (*aa.InitiateResponse, error) {
	out := new(aa.InitiateResponse)
	err := c.cc.Invoke(ctx, "/service.banking/initiateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) GetRpdLink(ctx context.Context, in *aa.CreateRpdLinkRequest, opts ...grpc.CallOption) (*aa.CreateRpdLinkResponse, error) {
	out := new(aa.CreateRpdLinkResponse)
	err := c.cc.Invoke(ctx, "/service.banking/getRpdLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) GetAASupport(ctx context.Context, in *aa.GetAASupportRequest, opts ...grpc.CallOption) (*aa.GetAASupportResponse, error) {
	out := new(aa.GetAASupportResponse)
	err := c.cc.Invoke(ctx, "/service.banking/getAASupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) InitiatePennyDrop(ctx context.Context, in *aa.PennyDropRequest, opts ...grpc.CallOption) (*aa.PennyDropResponse, error) {
	out := new(aa.PennyDropResponse)
	err := c.cc.Invoke(ctx, "/service.banking/initiatePennyDrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) GetCustomerBank(ctx context.Context, in *aa.GetCustomerBankRequest, opts ...grpc.CallOption) (*aa.GetCustomerBankResponse, error) {
	out := new(aa.GetCustomerBankResponse)
	err := c.cc.Invoke(ctx, "/service.banking/getCustomerBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) NetBankingInitiate(ctx context.Context, in *aa.InputPerfiosRequest, opts ...grpc.CallOption) (*aa.OutputPerfiosResponse, error) {
	out := new(aa.OutputPerfiosResponse)
	err := c.cc.Invoke(ctx, "/service.banking/netBankingInitiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) GetRPDStatus(ctx context.Context, in *aa.GetRPDPollingStatusRequest, opts ...grpc.CallOption) (*aa.GetRPDPollingStatusResponse, error) {
	out := new(aa.GetRPDPollingStatusResponse)
	err := c.cc.Invoke(ctx, "/service.banking/getRPDStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankingServer is the server API for Banking service.
// All implementations must embed UnimplementedBankingServer
// for forward compatibility
type BankingServer interface {
	GetBankList(context.Context, *aa.GetBankListRequest) (*aa.GetBankListResponse, error)
	InitiateRequest(context.Context, *aa.InitiateRequest) (*aa.InitiateResponse, error)
	GetRpdLink(context.Context, *aa.CreateRpdLinkRequest) (*aa.CreateRpdLinkResponse, error)
	GetAASupport(context.Context, *aa.GetAASupportRequest) (*aa.GetAASupportResponse, error)
	InitiatePennyDrop(context.Context, *aa.PennyDropRequest) (*aa.PennyDropResponse, error)
	GetCustomerBank(context.Context, *aa.GetCustomerBankRequest) (*aa.GetCustomerBankResponse, error)
	NetBankingInitiate(context.Context, *aa.InputPerfiosRequest) (*aa.OutputPerfiosResponse, error)
	GetRPDStatus(context.Context, *aa.GetRPDPollingStatusRequest) (*aa.GetRPDPollingStatusResponse, error)
	mustEmbedUnimplementedBankingServer()
}

// UnimplementedBankingServer must be embedded to have forward compatible implementations.
type UnimplementedBankingServer struct {
}

func (UnimplementedBankingServer) GetBankList(context.Context, *aa.GetBankListRequest) (*aa.GetBankListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankList not implemented")
}
func (UnimplementedBankingServer) InitiateRequest(context.Context, *aa.InitiateRequest) (*aa.InitiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateRequest not implemented")
}
func (UnimplementedBankingServer) GetRpdLink(context.Context, *aa.CreateRpdLinkRequest) (*aa.CreateRpdLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRpdLink not implemented")
}
func (UnimplementedBankingServer) GetAASupport(context.Context, *aa.GetAASupportRequest) (*aa.GetAASupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAASupport not implemented")
}
func (UnimplementedBankingServer) InitiatePennyDrop(context.Context, *aa.PennyDropRequest) (*aa.PennyDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePennyDrop not implemented")
}
func (UnimplementedBankingServer) GetCustomerBank(context.Context, *aa.GetCustomerBankRequest) (*aa.GetCustomerBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerBank not implemented")
}
func (UnimplementedBankingServer) NetBankingInitiate(context.Context, *aa.InputPerfiosRequest) (*aa.OutputPerfiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetBankingInitiate not implemented")
}
func (UnimplementedBankingServer) GetRPDStatus(context.Context, *aa.GetRPDPollingStatusRequest) (*aa.GetRPDPollingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRPDStatus not implemented")
}
func (UnimplementedBankingServer) mustEmbedUnimplementedBankingServer() {}

// UnsafeBankingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankingServer will
// result in compilation errors.
type UnsafeBankingServer interface {
	mustEmbedUnimplementedBankingServer()
}

func RegisterBankingServer(s grpc.ServiceRegistrar, srv BankingServer) {
	s.RegisterService(&Banking_ServiceDesc, srv)
}

func _Banking_GetBankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.GetBankListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetBankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/getBankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetBankList(ctx, req.(*aa.GetBankListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_InitiateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.InitiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).InitiateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/initiateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).InitiateRequest(ctx, req.(*aa.InitiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_GetRpdLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.CreateRpdLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetRpdLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/getRpdLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetRpdLink(ctx, req.(*aa.CreateRpdLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_GetAASupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.GetAASupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetAASupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/getAASupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetAASupport(ctx, req.(*aa.GetAASupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_InitiatePennyDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.PennyDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).InitiatePennyDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/initiatePennyDrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).InitiatePennyDrop(ctx, req.(*aa.PennyDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_GetCustomerBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.GetCustomerBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetCustomerBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/getCustomerBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetCustomerBank(ctx, req.(*aa.GetCustomerBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_NetBankingInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.InputPerfiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).NetBankingInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/netBankingInitiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).NetBankingInitiate(ctx, req.(*aa.InputPerfiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_GetRPDStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aa.GetRPDPollingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).GetRPDStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.banking/getRPDStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).GetRPDStatus(ctx, req.(*aa.GetRPDPollingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Banking_ServiceDesc is the grpc.ServiceDesc for Banking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Banking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.banking",
	HandlerType: (*BankingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBankList",
			Handler:    _Banking_GetBankList_Handler,
		},
		{
			MethodName: "initiateRequest",
			Handler:    _Banking_InitiateRequest_Handler,
		},
		{
			MethodName: "getRpdLink",
			Handler:    _Banking_GetRpdLink_Handler,
		},
		{
			MethodName: "getAASupport",
			Handler:    _Banking_GetAASupport_Handler,
		},
		{
			MethodName: "initiatePennyDrop",
			Handler:    _Banking_InitiatePennyDrop_Handler,
		},
		{
			MethodName: "getCustomerBank",
			Handler:    _Banking_GetCustomerBank_Handler,
		},
		{
			MethodName: "netBankingInitiate",
			Handler:    _Banking_NetBankingInitiate_Handler,
		},
		{
			MethodName: "getRPDStatus",
			Handler:    _Banking_GetRPDStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banking.proto",
}
