// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: growth.proto

package stashfin_com

import (
	context "context"
	growth "github.com/stashfin2/grpc/stashfin.com/growth"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Growth_Notifychrpayment_FullMethodName      = "/service.growth/notifychrpayment"
	Growth_Checkplanstatus_FullMethodName       = "/service.growth/checkplanstatus"
	Growth_Getattachplandetails_FullMethodName  = "/service.growth/getattachplandetails"
	Growth_Getchrplans_FullMethodName           = "/service.growth/getchrplans"
	Growth_Getcredithealthreport_FullMethodName = "/service.growth/getcredithealthreport"
	Growth_Initiatepayment_FullMethodName       = "/service.growth/initiatepayment"
	Growth_Getchrpaymentstatus_FullMethodName   = "/service.growth/getchrpaymentstatus"
)

// GrowthClient is the client API for Growth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrowthClient interface {
	Notifychrpayment(ctx context.Context, in *growth.Notifychrrequest, opts ...grpc.CallOption) (*growth.Notifychrresponse, error)
	Checkplanstatus(ctx context.Context, in *growth.Chrplansstatusrequest, opts ...grpc.CallOption) (*growth.Chrplanstatusresponse, error)
	Getattachplandetails(ctx context.Context, in *growth.Chrattachplanrequest, opts ...grpc.CallOption) (*growth.Chrattachplanresponse, error)
	Getchrplans(ctx context.Context, in *growth.Chrplansrequest, opts ...grpc.CallOption) (*growth.Chrplansresponse, error)
	Getcredithealthreport(ctx context.Context, in *growth.Credithealthreportrequest, opts ...grpc.CallOption) (*growth.Credithealthreportresponse, error)
	Initiatepayment(ctx context.Context, in *growth.Initiatepaymentrequest, opts ...grpc.CallOption) (*growth.Initiatepaymentresponse, error)
	Getchrpaymentstatus(ctx context.Context, in *growth.Paymentstatusrequest, opts ...grpc.CallOption) (*growth.Paymentstatusresponse, error)
}

type growthClient struct {
	cc grpc.ClientConnInterface
}

func NewGrowthClient(cc grpc.ClientConnInterface) GrowthClient {
	return &growthClient{cc}
}

func (c *growthClient) Notifychrpayment(ctx context.Context, in *growth.Notifychrrequest, opts ...grpc.CallOption) (*growth.Notifychrresponse, error) {
	out := new(growth.Notifychrresponse)
	err := c.cc.Invoke(ctx, Growth_Notifychrpayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthClient) Checkplanstatus(ctx context.Context, in *growth.Chrplansstatusrequest, opts ...grpc.CallOption) (*growth.Chrplanstatusresponse, error) {
	out := new(growth.Chrplanstatusresponse)
	err := c.cc.Invoke(ctx, Growth_Checkplanstatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthClient) Getattachplandetails(ctx context.Context, in *growth.Chrattachplanrequest, opts ...grpc.CallOption) (*growth.Chrattachplanresponse, error) {
	out := new(growth.Chrattachplanresponse)
	err := c.cc.Invoke(ctx, Growth_Getattachplandetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthClient) Getchrplans(ctx context.Context, in *growth.Chrplansrequest, opts ...grpc.CallOption) (*growth.Chrplansresponse, error) {
	out := new(growth.Chrplansresponse)
	err := c.cc.Invoke(ctx, Growth_Getchrplans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthClient) Getcredithealthreport(ctx context.Context, in *growth.Credithealthreportrequest, opts ...grpc.CallOption) (*growth.Credithealthreportresponse, error) {
	out := new(growth.Credithealthreportresponse)
	err := c.cc.Invoke(ctx, Growth_Getcredithealthreport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthClient) Initiatepayment(ctx context.Context, in *growth.Initiatepaymentrequest, opts ...grpc.CallOption) (*growth.Initiatepaymentresponse, error) {
	out := new(growth.Initiatepaymentresponse)
	err := c.cc.Invoke(ctx, Growth_Initiatepayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *growthClient) Getchrpaymentstatus(ctx context.Context, in *growth.Paymentstatusrequest, opts ...grpc.CallOption) (*growth.Paymentstatusresponse, error) {
	out := new(growth.Paymentstatusresponse)
	err := c.cc.Invoke(ctx, Growth_Getchrpaymentstatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrowthServer is the server API for Growth service.
// All implementations must embed UnimplementedGrowthServer
// for forward compatibility
type GrowthServer interface {
	Notifychrpayment(context.Context, *growth.Notifychrrequest) (*growth.Notifychrresponse, error)
	Checkplanstatus(context.Context, *growth.Chrplansstatusrequest) (*growth.Chrplanstatusresponse, error)
	Getattachplandetails(context.Context, *growth.Chrattachplanrequest) (*growth.Chrattachplanresponse, error)
	Getchrplans(context.Context, *growth.Chrplansrequest) (*growth.Chrplansresponse, error)
	Getcredithealthreport(context.Context, *growth.Credithealthreportrequest) (*growth.Credithealthreportresponse, error)
	Initiatepayment(context.Context, *growth.Initiatepaymentrequest) (*growth.Initiatepaymentresponse, error)
	Getchrpaymentstatus(context.Context, *growth.Paymentstatusrequest) (*growth.Paymentstatusresponse, error)
	mustEmbedUnimplementedGrowthServer()
}

// UnimplementedGrowthServer must be embedded to have forward compatible implementations.
type UnimplementedGrowthServer struct {
}

func (UnimplementedGrowthServer) Notifychrpayment(context.Context, *growth.Notifychrrequest) (*growth.Notifychrresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notifychrpayment not implemented")
}
func (UnimplementedGrowthServer) Checkplanstatus(context.Context, *growth.Chrplansstatusrequest) (*growth.Chrplanstatusresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkplanstatus not implemented")
}
func (UnimplementedGrowthServer) Getattachplandetails(context.Context, *growth.Chrattachplanrequest) (*growth.Chrattachplanresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getattachplandetails not implemented")
}
func (UnimplementedGrowthServer) Getchrplans(context.Context, *growth.Chrplansrequest) (*growth.Chrplansresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getchrplans not implemented")
}
func (UnimplementedGrowthServer) Getcredithealthreport(context.Context, *growth.Credithealthreportrequest) (*growth.Credithealthreportresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getcredithealthreport not implemented")
}
func (UnimplementedGrowthServer) Initiatepayment(context.Context, *growth.Initiatepaymentrequest) (*growth.Initiatepaymentresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initiatepayment not implemented")
}
func (UnimplementedGrowthServer) Getchrpaymentstatus(context.Context, *growth.Paymentstatusrequest) (*growth.Paymentstatusresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getchrpaymentstatus not implemented")
}
func (UnimplementedGrowthServer) mustEmbedUnimplementedGrowthServer() {}

// UnsafeGrowthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrowthServer will
// result in compilation errors.
type UnsafeGrowthServer interface {
	mustEmbedUnimplementedGrowthServer()
}

func RegisterGrowthServer(s grpc.ServiceRegistrar, srv GrowthServer) {
	s.RegisterService(&Growth_ServiceDesc, srv)
}

func _Growth_Notifychrpayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(growth.Notifychrrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthServer).Notifychrpayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Growth_Notifychrpayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthServer).Notifychrpayment(ctx, req.(*growth.Notifychrrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Growth_Checkplanstatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(growth.Chrplansstatusrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthServer).Checkplanstatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Growth_Checkplanstatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthServer).Checkplanstatus(ctx, req.(*growth.Chrplansstatusrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Growth_Getattachplandetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(growth.Chrattachplanrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthServer).Getattachplandetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Growth_Getattachplandetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthServer).Getattachplandetails(ctx, req.(*growth.Chrattachplanrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Growth_Getchrplans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(growth.Chrplansrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthServer).Getchrplans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Growth_Getchrplans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthServer).Getchrplans(ctx, req.(*growth.Chrplansrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Growth_Getcredithealthreport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(growth.Credithealthreportrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthServer).Getcredithealthreport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Growth_Getcredithealthreport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthServer).Getcredithealthreport(ctx, req.(*growth.Credithealthreportrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Growth_Initiatepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(growth.Initiatepaymentrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthServer).Initiatepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Growth_Initiatepayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthServer).Initiatepayment(ctx, req.(*growth.Initiatepaymentrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Growth_Getchrpaymentstatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(growth.Paymentstatusrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrowthServer).Getchrpaymentstatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Growth_Getchrpaymentstatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrowthServer).Getchrpaymentstatus(ctx, req.(*growth.Paymentstatusrequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Growth_ServiceDesc is the grpc.ServiceDesc for Growth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Growth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.growth",
	HandlerType: (*GrowthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notifychrpayment",
			Handler:    _Growth_Notifychrpayment_Handler,
		},
		{
			MethodName: "checkplanstatus",
			Handler:    _Growth_Checkplanstatus_Handler,
		},
		{
			MethodName: "getattachplandetails",
			Handler:    _Growth_Getattachplandetails_Handler,
		},
		{
			MethodName: "getchrplans",
			Handler:    _Growth_Getchrplans_Handler,
		},
		{
			MethodName: "getcredithealthreport",
			Handler:    _Growth_Getcredithealthreport_Handler,
		},
		{
			MethodName: "initiatepayment",
			Handler:    _Growth_Initiatepayment_Handler,
		},
		{
			MethodName: "getchrpaymentstatus",
			Handler:    _Growth_Getchrpaymentstatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "growth.proto",
}
