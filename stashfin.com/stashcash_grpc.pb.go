// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: stashcash.proto

package stashfin_com

import (
	context "context"
	stashcash "github.com/stashfin2/grpc/stashfin.com/stashcash"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Stashcash_Getscbalance_FullMethodName = "/service.stashcash/getscbalance"
	Stashcash_Creditsc_FullMethodName     = "/service.stashcash/creditsc"
	Stashcash_Reversesc_FullMethodName    = "/service.stashcash/reversesc"
	Stashcash_Getschistory_FullMethodName = "/service.stashcash/getschistory"
	Stashcash_Debitsc_FullMethodName      = "/service.stashcash/debitsc"
)

// StashcashClient is the client API for Stashcash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StashcashClient interface {
	Getscbalance(ctx context.Context, in *stashcash.GetScBalanceRequest, opts ...grpc.CallOption) (*stashcash.GetScBalanceResponse, error)
	Creditsc(ctx context.Context, in *stashcash.CreditScRequest, opts ...grpc.CallOption) (*stashcash.CreditScResponse, error)
	Reversesc(ctx context.Context, in *stashcash.ReverseScRequest, opts ...grpc.CallOption) (*stashcash.ReverseScResponse, error)
	Getschistory(ctx context.Context, in *stashcash.GetScHistoryRequest, opts ...grpc.CallOption) (*stashcash.GetScHistoryResponse, error)
	Debitsc(ctx context.Context, in *stashcash.DebitScRequest, opts ...grpc.CallOption) (*stashcash.DebitScResponse, error)
}

type stashcashClient struct {
	cc grpc.ClientConnInterface
}

func NewStashcashClient(cc grpc.ClientConnInterface) StashcashClient {
	return &stashcashClient{cc}
}

func (c *stashcashClient) Getscbalance(ctx context.Context, in *stashcash.GetScBalanceRequest, opts ...grpc.CallOption) (*stashcash.GetScBalanceResponse, error) {
	out := new(stashcash.GetScBalanceResponse)
	err := c.cc.Invoke(ctx, Stashcash_Getscbalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashcashClient) Creditsc(ctx context.Context, in *stashcash.CreditScRequest, opts ...grpc.CallOption) (*stashcash.CreditScResponse, error) {
	out := new(stashcash.CreditScResponse)
	err := c.cc.Invoke(ctx, Stashcash_Creditsc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashcashClient) Reversesc(ctx context.Context, in *stashcash.ReverseScRequest, opts ...grpc.CallOption) (*stashcash.ReverseScResponse, error) {
	out := new(stashcash.ReverseScResponse)
	err := c.cc.Invoke(ctx, Stashcash_Reversesc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashcashClient) Getschistory(ctx context.Context, in *stashcash.GetScHistoryRequest, opts ...grpc.CallOption) (*stashcash.GetScHistoryResponse, error) {
	out := new(stashcash.GetScHistoryResponse)
	err := c.cc.Invoke(ctx, Stashcash_Getschistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stashcashClient) Debitsc(ctx context.Context, in *stashcash.DebitScRequest, opts ...grpc.CallOption) (*stashcash.DebitScResponse, error) {
	out := new(stashcash.DebitScResponse)
	err := c.cc.Invoke(ctx, Stashcash_Debitsc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StashcashServer is the server API for Stashcash service.
// All implementations must embed UnimplementedStashcashServer
// for forward compatibility
type StashcashServer interface {
	Getscbalance(context.Context, *stashcash.GetScBalanceRequest) (*stashcash.GetScBalanceResponse, error)
	Creditsc(context.Context, *stashcash.CreditScRequest) (*stashcash.CreditScResponse, error)
	Reversesc(context.Context, *stashcash.ReverseScRequest) (*stashcash.ReverseScResponse, error)
	Getschistory(context.Context, *stashcash.GetScHistoryRequest) (*stashcash.GetScHistoryResponse, error)
	Debitsc(context.Context, *stashcash.DebitScRequest) (*stashcash.DebitScResponse, error)
	mustEmbedUnimplementedStashcashServer()
}

// UnimplementedStashcashServer must be embedded to have forward compatible implementations.
type UnimplementedStashcashServer struct {
}

func (UnimplementedStashcashServer) Getscbalance(context.Context, *stashcash.GetScBalanceRequest) (*stashcash.GetScBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getscbalance not implemented")
}
func (UnimplementedStashcashServer) Creditsc(context.Context, *stashcash.CreditScRequest) (*stashcash.CreditScResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Creditsc not implemented")
}
func (UnimplementedStashcashServer) Reversesc(context.Context, *stashcash.ReverseScRequest) (*stashcash.ReverseScResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reversesc not implemented")
}
func (UnimplementedStashcashServer) Getschistory(context.Context, *stashcash.GetScHistoryRequest) (*stashcash.GetScHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getschistory not implemented")
}
func (UnimplementedStashcashServer) Debitsc(context.Context, *stashcash.DebitScRequest) (*stashcash.DebitScResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debitsc not implemented")
}
func (UnimplementedStashcashServer) mustEmbedUnimplementedStashcashServer() {}

// UnsafeStashcashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StashcashServer will
// result in compilation errors.
type UnsafeStashcashServer interface {
	mustEmbedUnimplementedStashcashServer()
}

func RegisterStashcashServer(s grpc.ServiceRegistrar, srv StashcashServer) {
	s.RegisterService(&Stashcash_ServiceDesc, srv)
}

func _Stashcash_Getscbalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stashcash.GetScBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashcashServer).Getscbalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stashcash_Getscbalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashcashServer).Getscbalance(ctx, req.(*stashcash.GetScBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stashcash_Creditsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stashcash.CreditScRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashcashServer).Creditsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stashcash_Creditsc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashcashServer).Creditsc(ctx, req.(*stashcash.CreditScRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stashcash_Reversesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stashcash.ReverseScRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashcashServer).Reversesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stashcash_Reversesc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashcashServer).Reversesc(ctx, req.(*stashcash.ReverseScRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stashcash_Getschistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stashcash.GetScHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashcashServer).Getschistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stashcash_Getschistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashcashServer).Getschistory(ctx, req.(*stashcash.GetScHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stashcash_Debitsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stashcash.DebitScRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StashcashServer).Debitsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stashcash_Debitsc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StashcashServer).Debitsc(ctx, req.(*stashcash.DebitScRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stashcash_ServiceDesc is the grpc.ServiceDesc for Stashcash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stashcash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.stashcash",
	HandlerType: (*StashcashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getscbalance",
			Handler:    _Stashcash_Getscbalance_Handler,
		},
		{
			MethodName: "creditsc",
			Handler:    _Stashcash_Creditsc_Handler,
		},
		{
			MethodName: "reversesc",
			Handler:    _Stashcash_Reversesc_Handler,
		},
		{
			MethodName: "getschistory",
			Handler:    _Stashcash_Getschistory_Handler,
		},
		{
			MethodName: "debitsc",
			Handler:    _Stashcash_Debitsc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stashcash.proto",
}
