// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.6
// source: upi/validateifsc.proto

package upi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidateIFSCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ifsc          string                 `protobuf:"bytes,1,opt,name=ifsc,proto3" json:"ifsc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateIFSCRequest) Reset() {
	*x = ValidateIFSCRequest{}
	mi := &file_upi_validateifsc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateIFSCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateIFSCRequest) ProtoMessage() {}

func (x *ValidateIFSCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upi_validateifsc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateIFSCRequest.ProtoReflect.Descriptor instead.
func (*ValidateIFSCRequest) Descriptor() ([]byte, []int) {
	return file_upi_validateifsc_proto_rawDescGZIP(), []int{0}
}

func (x *ValidateIFSCRequest) GetIfsc() string {
	if x != nil {
		return x.Ifsc
	}
	return ""
}

type BankData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MICR          *string                `protobuf:"bytes,1,opt,name=MICR,proto3,oneof" json:"MICR,omitempty"`
	BRANCH        *string                `protobuf:"bytes,2,opt,name=BRANCH,proto3,oneof" json:"BRANCH,omitempty"`
	ADDRESS       *string                `protobuf:"bytes,3,opt,name=ADDRESS,proto3,oneof" json:"ADDRESS,omitempty"`
	STATE         *string                `protobuf:"bytes,4,opt,name=STATE,proto3,oneof" json:"STATE,omitempty"`
	CONTACT       *string                `protobuf:"bytes,5,opt,name=CONTACT,proto3,oneof" json:"CONTACT,omitempty"`
	UPI           *bool                  `protobuf:"varint,6,opt,name=UPI,proto3,oneof" json:"UPI,omitempty"`
	RTGS          *bool                  `protobuf:"varint,7,opt,name=RTGS,proto3,oneof" json:"RTGS,omitempty"`
	CITY          *string                `protobuf:"bytes,8,opt,name=CITY,proto3,oneof" json:"CITY,omitempty"`
	CENTRE        *string                `protobuf:"bytes,9,opt,name=CENTRE,proto3,oneof" json:"CENTRE,omitempty"`
	DISTRICT      *string                `protobuf:"bytes,10,opt,name=DISTRICT,proto3,oneof" json:"DISTRICT,omitempty"`
	NEFT          *bool                  `protobuf:"varint,11,opt,name=NEFT,proto3,oneof" json:"NEFT,omitempty"`
	IMPS          *bool                  `protobuf:"varint,12,opt,name=IMPS,proto3,oneof" json:"IMPS,omitempty"`
	SWIFT         *string                `protobuf:"bytes,13,opt,name=SWIFT,proto3,oneof" json:"SWIFT,omitempty"`
	ISO3166       *string                `protobuf:"bytes,14,opt,name=ISO3166,proto3,oneof" json:"ISO3166,omitempty"`
	BANK          *string                `protobuf:"bytes,15,opt,name=BANK,proto3,oneof" json:"BANK,omitempty"`
	BANKCODE      *string                `protobuf:"bytes,16,opt,name=BANKCODE,proto3,oneof" json:"BANKCODE,omitempty"`
	IFSC          *string                `protobuf:"bytes,17,opt,name=IFSC,proto3,oneof" json:"IFSC,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BankData) Reset() {
	*x = BankData{}
	mi := &file_upi_validateifsc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankData) ProtoMessage() {}

func (x *BankData) ProtoReflect() protoreflect.Message {
	mi := &file_upi_validateifsc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankData.ProtoReflect.Descriptor instead.
func (*BankData) Descriptor() ([]byte, []int) {
	return file_upi_validateifsc_proto_rawDescGZIP(), []int{1}
}

func (x *BankData) GetMICR() string {
	if x != nil && x.MICR != nil {
		return *x.MICR
	}
	return ""
}

func (x *BankData) GetBRANCH() string {
	if x != nil && x.BRANCH != nil {
		return *x.BRANCH
	}
	return ""
}

func (x *BankData) GetADDRESS() string {
	if x != nil && x.ADDRESS != nil {
		return *x.ADDRESS
	}
	return ""
}

func (x *BankData) GetSTATE() string {
	if x != nil && x.STATE != nil {
		return *x.STATE
	}
	return ""
}

func (x *BankData) GetCONTACT() string {
	if x != nil && x.CONTACT != nil {
		return *x.CONTACT
	}
	return ""
}

func (x *BankData) GetUPI() bool {
	if x != nil && x.UPI != nil {
		return *x.UPI
	}
	return false
}

func (x *BankData) GetRTGS() bool {
	if x != nil && x.RTGS != nil {
		return *x.RTGS
	}
	return false
}

func (x *BankData) GetCITY() string {
	if x != nil && x.CITY != nil {
		return *x.CITY
	}
	return ""
}

func (x *BankData) GetCENTRE() string {
	if x != nil && x.CENTRE != nil {
		return *x.CENTRE
	}
	return ""
}

func (x *BankData) GetDISTRICT() string {
	if x != nil && x.DISTRICT != nil {
		return *x.DISTRICT
	}
	return ""
}

func (x *BankData) GetNEFT() bool {
	if x != nil && x.NEFT != nil {
		return *x.NEFT
	}
	return false
}

func (x *BankData) GetIMPS() bool {
	if x != nil && x.IMPS != nil {
		return *x.IMPS
	}
	return false
}

func (x *BankData) GetSWIFT() string {
	if x != nil && x.SWIFT != nil {
		return *x.SWIFT
	}
	return ""
}

func (x *BankData) GetISO3166() string {
	if x != nil && x.ISO3166 != nil {
		return *x.ISO3166
	}
	return ""
}

func (x *BankData) GetBANK() string {
	if x != nil && x.BANK != nil {
		return *x.BANK
	}
	return ""
}

func (x *BankData) GetBANKCODE() string {
	if x != nil && x.BANKCODE != nil {
		return *x.BANKCODE
	}
	return ""
}

func (x *BankData) GetIFSC() string {
	if x != nil && x.IFSC != nil {
		return *x.IFSC
	}
	return ""
}

type ValidateIFSCResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *BankData              `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateIFSCResponse) Reset() {
	*x = ValidateIFSCResponse{}
	mi := &file_upi_validateifsc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateIFSCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateIFSCResponse) ProtoMessage() {}

func (x *ValidateIFSCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_upi_validateifsc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateIFSCResponse.ProtoReflect.Descriptor instead.
func (*ValidateIFSCResponse) Descriptor() ([]byte, []int) {
	return file_upi_validateifsc_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateIFSCResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ValidateIFSCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateIFSCResponse) GetData() *BankData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_upi_validateifsc_proto protoreflect.FileDescriptor

var file_upi_validateifsc_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x75, 0x70, 0x69, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x69, 0x66,
	0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x75, 0x70, 0x69, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x46, 0x53, 0x43, 0x22, 0x29, 0x0a, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x46, 0x53, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x66, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x66, 0x73, 0x63, 0x22, 0x8e, 0x05, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x4d, 0x49, 0x43, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x4d, 0x49, 0x43, 0x52, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42,
	0x52, 0x41, 0x4e, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x42,
	0x52, 0x41, 0x4e, 0x43, 0x48, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x55, 0x50, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05,
	0x52, 0x03, 0x55, 0x50, 0x49, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x52, 0x54, 0x47, 0x53,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x04, 0x52, 0x54, 0x47, 0x53, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x43, 0x49, 0x54, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x04, 0x43, 0x49, 0x54, 0x59, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x43, 0x45,
	0x4e, 0x54, 0x52, 0x45, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x43, 0x45,
	0x4e, 0x54, 0x52, 0x45, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x45, 0x46, 0x54,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x04, 0x4e, 0x45, 0x46, 0x54, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x49, 0x4d, 0x50, 0x53, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0b, 0x52, 0x04, 0x49, 0x4d, 0x50, 0x53, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53, 0x57,
	0x49, 0x46, 0x54, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x53, 0x57, 0x49,
	0x46, 0x54, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x49, 0x53, 0x4f, 0x33, 0x31, 0x36, 0x36,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x07, 0x49, 0x53, 0x4f, 0x33, 0x31, 0x36,
	0x36, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x42, 0x41, 0x4e, 0x4b, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x04, 0x42, 0x41, 0x4e, 0x4b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x42, 0x41, 0x4e, 0x4b, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x08, 0x42, 0x41, 0x4e, 0x4b, 0x43, 0x4f, 0x44, 0x45, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x49, 0x46, 0x53, 0x43, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x04,
	0x49, 0x46, 0x53, 0x43, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4d, 0x49, 0x43, 0x52,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x55, 0x50, 0x49, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x52, 0x54, 0x47, 0x53, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x43, 0x45, 0x4e, 0x54,
	0x52, 0x45, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x45, 0x46, 0x54, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x49, 0x4d, 0x50,
	0x53, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x57, 0x49, 0x46, 0x54, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x49, 0x53, 0x4f, 0x33, 0x31, 0x36, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x49, 0x46, 0x53, 0x43, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x46, 0x53, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x75, 0x70, 0x69, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x46,
	0x53, 0x43, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_upi_validateifsc_proto_rawDescOnce sync.Once
	file_upi_validateifsc_proto_rawDescData []byte
)

func file_upi_validateifsc_proto_rawDescGZIP() []byte {
	file_upi_validateifsc_proto_rawDescOnce.Do(func() {
		file_upi_validateifsc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_upi_validateifsc_proto_rawDesc), len(file_upi_validateifsc_proto_rawDesc)))
	})
	return file_upi_validateifsc_proto_rawDescData
}

var file_upi_validateifsc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_upi_validateifsc_proto_goTypes = []any{
	(*ValidateIFSCRequest)(nil),  // 0: upi.validateIFSC.validateIFSCRequest
	(*BankData)(nil),             // 1: upi.validateIFSC.BankData
	(*ValidateIFSCResponse)(nil), // 2: upi.validateIFSC.validateIFSCResponse
}
var file_upi_validateifsc_proto_depIdxs = []int32{
	1, // 0: upi.validateIFSC.validateIFSCResponse.data:type_name -> upi.validateIFSC.BankData
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_upi_validateifsc_proto_init() }
func file_upi_validateifsc_proto_init() {
	if File_upi_validateifsc_proto != nil {
		return
	}
	file_upi_validateifsc_proto_msgTypes[1].OneofWrappers = []any{}
	file_upi_validateifsc_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_upi_validateifsc_proto_rawDesc), len(file_upi_validateifsc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_upi_validateifsc_proto_goTypes,
		DependencyIndexes: file_upi_validateifsc_proto_depIdxs,
		MessageInfos:      file_upi_validateifsc_proto_msgTypes,
	}.Build()
	File_upi_validateifsc_proto = out.File
	file_upi_validateifsc_proto_goTypes = nil
	file_upi_validateifsc_proto_depIdxs = nil
}
