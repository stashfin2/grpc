// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.6
// source: upi/getmandatedetails.proto

package upi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetMandatesDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxnId         string                 `protobuf:"bytes,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	Umn           string                 `protobuf:"bytes,2,opt,name=umn,proto3" json:"umn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMandatesDetailsRequest) Reset() {
	*x = GetMandatesDetailsRequest{}
	mi := &file_upi_getmandatedetails_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMandatesDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMandatesDetailsRequest) ProtoMessage() {}

func (x *GetMandatesDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_upi_getmandatedetails_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMandatesDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetMandatesDetailsRequest) Descriptor() ([]byte, []int) {
	return file_upi_getmandatedetails_proto_rawDescGZIP(), []int{0}
}

func (x *GetMandatesDetailsRequest) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *GetMandatesDetailsRequest) GetUmn() string {
	if x != nil {
		return x.Umn
	}
	return ""
}

type GetMandateDetailsReponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *PayeeMetaData         `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMandateDetailsReponse) Reset() {
	*x = GetMandateDetailsReponse{}
	mi := &file_upi_getmandatedetails_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMandateDetailsReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMandateDetailsReponse) ProtoMessage() {}

func (x *GetMandateDetailsReponse) ProtoReflect() protoreflect.Message {
	mi := &file_upi_getmandatedetails_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMandateDetailsReponse.ProtoReflect.Descriptor instead.
func (*GetMandateDetailsReponse) Descriptor() ([]byte, []int) {
	return file_upi_getmandatedetails_proto_rawDescGZIP(), []int{1}
}

func (x *GetMandateDetailsReponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetMandateDetailsReponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMandateDetailsReponse) GetData() *PayeeMetaData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayeeMetaData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayeeDetails   *PayeeDetails          `protobuf:"bytes,1,opt,name=payee_details,json=payeeDetails,proto3,oneof" json:"payee_details,omitempty"`
	PayerDetails   *PayerDetails          `protobuf:"bytes,2,opt,name=payer_details,json=payerDetails,proto3,oneof" json:"payer_details,omitempty"`
	MandateDetails *MandateDetails        `protobuf:"bytes,3,opt,name=mandate_details,json=mandateDetails,proto3,oneof" json:"mandate_details,omitempty"`
	Amount         *float32               `protobuf:"fixed32,4,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	PayeeMobile    *string                `protobuf:"bytes,5,opt,name=payee_mobile,json=payeeMobile,proto3,oneof" json:"payee_mobile,omitempty"`
	Status         *string                `protobuf:"bytes,6,opt,name=status,proto3,oneof" json:"status,omitempty"`
	StartDate      *string                `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate        *string                `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	Note           *string                `protobuf:"bytes,9,opt,name=note,proto3,oneof" json:"note,omitempty"`
	TxnId          *string                `protobuf:"bytes,10,opt,name=txn_id,json=txnId,proto3,oneof" json:"txn_id,omitempty"`
	Umn            *string                `protobuf:"bytes,11,opt,name=umn,proto3,oneof" json:"umn,omitempty"`
	Expiry         *string                `protobuf:"bytes,12,opt,name=expiry,proto3,oneof" json:"expiry,omitempty"`
	CustomerId     *int32                 `protobuf:"varint,13,opt,name=customer_id,json=customerId,proto3,oneof" json:"customer_id,omitempty"`
	Vpa            *string                `protobuf:"bytes,14,opt,name=vpa,proto3,oneof" json:"vpa,omitempty"` // Virtual Payment Address
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PayeeMetaData) Reset() {
	*x = PayeeMetaData{}
	mi := &file_upi_getmandatedetails_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayeeMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayeeMetaData) ProtoMessage() {}

func (x *PayeeMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_upi_getmandatedetails_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayeeMetaData.ProtoReflect.Descriptor instead.
func (*PayeeMetaData) Descriptor() ([]byte, []int) {
	return file_upi_getmandatedetails_proto_rawDescGZIP(), []int{2}
}

func (x *PayeeMetaData) GetPayeeDetails() *PayeeDetails {
	if x != nil {
		return x.PayeeDetails
	}
	return nil
}

func (x *PayeeMetaData) GetPayerDetails() *PayerDetails {
	if x != nil {
		return x.PayerDetails
	}
	return nil
}

func (x *PayeeMetaData) GetMandateDetails() *MandateDetails {
	if x != nil {
		return x.MandateDetails
	}
	return nil
}

func (x *PayeeMetaData) GetAmount() float32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *PayeeMetaData) GetPayeeMobile() string {
	if x != nil && x.PayeeMobile != nil {
		return *x.PayeeMobile
	}
	return ""
}

func (x *PayeeMetaData) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *PayeeMetaData) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

func (x *PayeeMetaData) GetEndDate() string {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return ""
}

func (x *PayeeMetaData) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

func (x *PayeeMetaData) GetTxnId() string {
	if x != nil && x.TxnId != nil {
		return *x.TxnId
	}
	return ""
}

func (x *PayeeMetaData) GetUmn() string {
	if x != nil && x.Umn != nil {
		return *x.Umn
	}
	return ""
}

func (x *PayeeMetaData) GetExpiry() string {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return ""
}

func (x *PayeeMetaData) GetCustomerId() int32 {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return 0
}

func (x *PayeeMetaData) GetVpa() string {
	if x != nil && x.Vpa != nil {
		return *x.Vpa
	}
	return ""
}

type PayeeDetails struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             *string                `protobuf:"bytes,1,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Mobile           *string                `protobuf:"bytes,2,opt,name=Mobile,proto3,oneof" json:"Mobile,omitempty"`
	VA               *string                `protobuf:"bytes,3,opt,name=VA,proto3,oneof" json:"VA,omitempty"` // Virtual Address
	RespCode         *string                `protobuf:"bytes,4,opt,name=RespCode,proto3,oneof" json:"RespCode,omitempty"`
	MccCode          *string                `protobuf:"bytes,5,opt,name=MccCode,proto3,oneof" json:"MccCode,omitempty"`
	MccType          *string                `protobuf:"bytes,6,opt,name=MccType,proto3,oneof" json:"MccType,omitempty"`
	AccountNo        *string                `protobuf:"bytes,7,opt,name=AccountNo,proto3,oneof" json:"AccountNo,omitempty"`
	Ifsc             *string                `protobuf:"bytes,8,opt,name=Ifsc,proto3,oneof" json:"Ifsc,omitempty"`
	RevRespCode      *string                `protobuf:"bytes,9,opt,name=RevRespCode,proto3,oneof" json:"RevRespCode,omitempty"`
	VerifiedMerchant *string                `protobuf:"bytes,10,opt,name=VerifiedMerchant,proto3,oneof" json:"VerifiedMerchant,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayeeDetails) Reset() {
	*x = PayeeDetails{}
	mi := &file_upi_getmandatedetails_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayeeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayeeDetails) ProtoMessage() {}

func (x *PayeeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_upi_getmandatedetails_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayeeDetails.ProtoReflect.Descriptor instead.
func (*PayeeDetails) Descriptor() ([]byte, []int) {
	return file_upi_getmandatedetails_proto_rawDescGZIP(), []int{3}
}

func (x *PayeeDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PayeeDetails) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *PayeeDetails) GetVA() string {
	if x != nil && x.VA != nil {
		return *x.VA
	}
	return ""
}

func (x *PayeeDetails) GetRespCode() string {
	if x != nil && x.RespCode != nil {
		return *x.RespCode
	}
	return ""
}

func (x *PayeeDetails) GetMccCode() string {
	if x != nil && x.MccCode != nil {
		return *x.MccCode
	}
	return ""
}

func (x *PayeeDetails) GetMccType() string {
	if x != nil && x.MccType != nil {
		return *x.MccType
	}
	return ""
}

func (x *PayeeDetails) GetAccountNo() string {
	if x != nil && x.AccountNo != nil {
		return *x.AccountNo
	}
	return ""
}

func (x *PayeeDetails) GetIfsc() string {
	if x != nil && x.Ifsc != nil {
		return *x.Ifsc
	}
	return ""
}

func (x *PayeeDetails) GetRevRespCode() string {
	if x != nil && x.RevRespCode != nil {
		return *x.RevRespCode
	}
	return ""
}

func (x *PayeeDetails) GetVerifiedMerchant() string {
	if x != nil && x.VerifiedMerchant != nil {
		return *x.VerifiedMerchant
	}
	return ""
}

type PayerDetails struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   *string                `protobuf:"bytes,1,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Mobile                 *string                `protobuf:"bytes,2,opt,name=Mobile,proto3,oneof" json:"Mobile,omitempty"`
	VA                     *string                `protobuf:"bytes,3,opt,name=VA,proto3,oneof" json:"VA,omitempty"` // Virtual Address
	AccountNo              *string                `protobuf:"bytes,4,opt,name=AccountNo,proto3,oneof" json:"AccountNo,omitempty"`
	Ifsc                   *string                `protobuf:"bytes,5,opt,name=Ifsc,proto3,oneof" json:"Ifsc,omitempty"`
	AccountType            *string                `protobuf:"bytes,6,opt,name=AccountType,proto3,oneof" json:"AccountType,omitempty"`
	RespCode               *string                `protobuf:"bytes,7,opt,name=RespCode,proto3,oneof" json:"RespCode,omitempty"`
	RevRespCode            *string                `protobuf:"bytes,8,opt,name=RevRespCode,proto3,oneof" json:"RevRespCode,omitempty"`
	GstIncentiveApplicable *string                `protobuf:"bytes,9,opt,name=GstIncentiveApplicable,proto3,oneof" json:"GstIncentiveApplicable,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PayerDetails) Reset() {
	*x = PayerDetails{}
	mi := &file_upi_getmandatedetails_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayerDetails) ProtoMessage() {}

func (x *PayerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_upi_getmandatedetails_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayerDetails.ProtoReflect.Descriptor instead.
func (*PayerDetails) Descriptor() ([]byte, []int) {
	return file_upi_getmandatedetails_proto_rawDescGZIP(), []int{4}
}

func (x *PayerDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PayerDetails) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *PayerDetails) GetVA() string {
	if x != nil && x.VA != nil {
		return *x.VA
	}
	return ""
}

func (x *PayerDetails) GetAccountNo() string {
	if x != nil && x.AccountNo != nil {
		return *x.AccountNo
	}
	return ""
}

func (x *PayerDetails) GetIfsc() string {
	if x != nil && x.Ifsc != nil {
		return *x.Ifsc
	}
	return ""
}

func (x *PayerDetails) GetAccountType() string {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ""
}

func (x *PayerDetails) GetRespCode() string {
	if x != nil && x.RespCode != nil {
		return *x.RespCode
	}
	return ""
}

func (x *PayerDetails) GetRevRespCode() string {
	if x != nil && x.RevRespCode != nil {
		return *x.RevRespCode
	}
	return ""
}

func (x *PayerDetails) GetGstIncentiveApplicable() string {
	if x != nil && x.GstIncentiveApplicable != nil {
		return *x.GstIncentiveApplicable
	}
	return ""
}

type MandateDetails struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MandateName          *string                `protobuf:"bytes,1,opt,name=MandateName,proto3,oneof" json:"MandateName,omitempty"`
	MandateType          *string                `protobuf:"bytes,2,opt,name=MandateType,proto3,oneof" json:"MandateType,omitempty"`
	ValidityStart        *string                `protobuf:"bytes,3,opt,name=ValidityStart,proto3,oneof" json:"ValidityStart,omitempty"` // Timestamp format
	ValidityEnd          *string                `protobuf:"bytes,4,opt,name=ValidityEnd,proto3,oneof" json:"ValidityEnd,omitempty"`     // Timestamp format
	MandateAmount        *string                `protobuf:"bytes,5,opt,name=MandateAmount,proto3,oneof" json:"MandateAmount,omitempty"`
	Frequency            *string                `protobuf:"bytes,6,opt,name=Frequency,proto3,oneof" json:"Frequency,omitempty"`
	Revokeable           *string                `protobuf:"bytes,7,opt,name=Revokeable,proto3,oneof" json:"Revokeable,omitempty"`
	DebitDay             *string                `protobuf:"bytes,8,opt,name=DebitDay,proto3,oneof" json:"DebitDay,omitempty"`
	DebitRule            *string                `protobuf:"bytes,9,opt,name=DebitRule,proto3,oneof" json:"DebitRule,omitempty"`
	AmountRule           *string                `protobuf:"bytes,10,opt,name=AmountRule,proto3,oneof" json:"AmountRule,omitempty"`
	PurposeCode          *string                `protobuf:"bytes,11,opt,name=PurposeCode,proto3,oneof" json:"PurposeCode,omitempty"`
	BlockFund            *string                `protobuf:"bytes,12,opt,name=BlockFund,proto3,oneof" json:"BlockFund,omitempty"`
	UMN                  *string                `protobuf:"bytes,13,opt,name=UMN,proto3,oneof" json:"UMN,omitempty"`
	MandateNote          *string                `protobuf:"bytes,14,opt,name=MandateNote,proto3,oneof" json:"MandateNote,omitempty"`
	MandateOriginalTxnId *string                `protobuf:"bytes,15,opt,name=MandateOriginalTxnId,proto3,oneof" json:"MandateOriginalTxnId,omitempty"`
	CreatedDate          *string                `protobuf:"bytes,16,opt,name=CreatedDate,proto3,oneof" json:"CreatedDate,omitempty"`
	RefUrl               *string                `protobuf:"bytes,17,opt,name=RefUrl,proto3,oneof" json:"RefUrl,omitempty"`
	PauseStart           *string                `protobuf:"bytes,18,opt,name=PauseStart,proto3,oneof" json:"PauseStart,omitempty"`
	PauseEnd             *string                `protobuf:"bytes,19,opt,name=PauseEnd,proto3,oneof" json:"PauseEnd,omitempty"`
	TotalDebit           *int32                 `protobuf:"varint,20,opt,name=TotalDebit,proto3,oneof" json:"TotalDebit,omitempty"`
	SuccessfulDebit      *int32                 `protobuf:"varint,21,opt,name=SuccessfulDebit,proto3,oneof" json:"SuccessfulDebit,omitempty"`
	UnsuccessfulDebit    *int32                 `protobuf:"varint,22,opt,name=UnsuccessfulDebit,proto3,oneof" json:"UnsuccessfulDebit,omitempty"`
	RemainingDebit       *int32                 `protobuf:"varint,23,opt,name=RemainingDebit,proto3,oneof" json:"RemainingDebit,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MandateDetails) Reset() {
	*x = MandateDetails{}
	mi := &file_upi_getmandatedetails_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MandateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MandateDetails) ProtoMessage() {}

func (x *MandateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_upi_getmandatedetails_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MandateDetails.ProtoReflect.Descriptor instead.
func (*MandateDetails) Descriptor() ([]byte, []int) {
	return file_upi_getmandatedetails_proto_rawDescGZIP(), []int{5}
}

func (x *MandateDetails) GetMandateName() string {
	if x != nil && x.MandateName != nil {
		return *x.MandateName
	}
	return ""
}

func (x *MandateDetails) GetMandateType() string {
	if x != nil && x.MandateType != nil {
		return *x.MandateType
	}
	return ""
}

func (x *MandateDetails) GetValidityStart() string {
	if x != nil && x.ValidityStart != nil {
		return *x.ValidityStart
	}
	return ""
}

func (x *MandateDetails) GetValidityEnd() string {
	if x != nil && x.ValidityEnd != nil {
		return *x.ValidityEnd
	}
	return ""
}

func (x *MandateDetails) GetMandateAmount() string {
	if x != nil && x.MandateAmount != nil {
		return *x.MandateAmount
	}
	return ""
}

func (x *MandateDetails) GetFrequency() string {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return ""
}

func (x *MandateDetails) GetRevokeable() string {
	if x != nil && x.Revokeable != nil {
		return *x.Revokeable
	}
	return ""
}

func (x *MandateDetails) GetDebitDay() string {
	if x != nil && x.DebitDay != nil {
		return *x.DebitDay
	}
	return ""
}

func (x *MandateDetails) GetDebitRule() string {
	if x != nil && x.DebitRule != nil {
		return *x.DebitRule
	}
	return ""
}

func (x *MandateDetails) GetAmountRule() string {
	if x != nil && x.AmountRule != nil {
		return *x.AmountRule
	}
	return ""
}

func (x *MandateDetails) GetPurposeCode() string {
	if x != nil && x.PurposeCode != nil {
		return *x.PurposeCode
	}
	return ""
}

func (x *MandateDetails) GetBlockFund() string {
	if x != nil && x.BlockFund != nil {
		return *x.BlockFund
	}
	return ""
}

func (x *MandateDetails) GetUMN() string {
	if x != nil && x.UMN != nil {
		return *x.UMN
	}
	return ""
}

func (x *MandateDetails) GetMandateNote() string {
	if x != nil && x.MandateNote != nil {
		return *x.MandateNote
	}
	return ""
}

func (x *MandateDetails) GetMandateOriginalTxnId() string {
	if x != nil && x.MandateOriginalTxnId != nil {
		return *x.MandateOriginalTxnId
	}
	return ""
}

func (x *MandateDetails) GetCreatedDate() string {
	if x != nil && x.CreatedDate != nil {
		return *x.CreatedDate
	}
	return ""
}

func (x *MandateDetails) GetRefUrl() string {
	if x != nil && x.RefUrl != nil {
		return *x.RefUrl
	}
	return ""
}

func (x *MandateDetails) GetPauseStart() string {
	if x != nil && x.PauseStart != nil {
		return *x.PauseStart
	}
	return ""
}

func (x *MandateDetails) GetPauseEnd() string {
	if x != nil && x.PauseEnd != nil {
		return *x.PauseEnd
	}
	return ""
}

func (x *MandateDetails) GetTotalDebit() int32 {
	if x != nil && x.TotalDebit != nil {
		return *x.TotalDebit
	}
	return 0
}

func (x *MandateDetails) GetSuccessfulDebit() int32 {
	if x != nil && x.SuccessfulDebit != nil {
		return *x.SuccessfulDebit
	}
	return 0
}

func (x *MandateDetails) GetUnsuccessfulDebit() int32 {
	if x != nil && x.UnsuccessfulDebit != nil {
		return *x.UnsuccessfulDebit
	}
	return 0
}

func (x *MandateDetails) GetRemainingDebit() int32 {
	if x != nil && x.RemainingDebit != nil {
		return *x.RemainingDebit
	}
	return 0
}

var File_upi_getmandatedetails_proto protoreflect.FileDescriptor

var file_upi_getmandatedetails_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x75, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x75,
	0x70, 0x69, 0x2e, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x44, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x6d, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x67,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x70, 0x69, 0x2e, 0x67, 0x65,
	0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x70, 0x61, 0x79, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x88, 0x06, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x70, 0x69,
	0x2e, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x70, 0x69, 0x2e,
	0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01,
	0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x53, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x70, 0x69,
	0x2e, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x48, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x65, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a,
	0x52, 0x03, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x76,
	0x70, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x03, 0x76, 0x70, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x6d, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x70, 0x61, 0x22, 0xc8, 0x03, 0x0a,
	0x0c, 0x50, 0x61, 0x79, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x56, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x02, 0x56, 0x41, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4d, 0x63, 0x63,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x4d, 0x63,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4d, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x4d, 0x63, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x49, 0x66,
	0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x49, 0x66, 0x73, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x52,
	0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x56, 0x41, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x49, 0x66,
	0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x56, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x56, 0x41,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x49, 0x66, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x49, 0x66, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x52, 0x65,
	0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b,
	0x52, 0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x16, 0x47, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x16, 0x47, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x56, 0x41, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x49, 0x66, 0x73, 0x63, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52,
	0x65, 0x76, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x47,
	0x73, 0x74, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf8, 0x09, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0d, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x44, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x08, 0x44, 0x65, 0x62, 0x69, 0x74, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x09, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0a, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x55, 0x4d, 0x4e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x03, 0x55,
	0x4d, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x78, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x14, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x52, 0x65, 0x66, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06,
	0x52, 0x65, 0x66, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0a, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52,
	0x0f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x55, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15,
	0x52, 0x11, 0x55, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16,
	0x52, 0x0e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x65, 0x62, 0x69, 0x74, 0x44, 0x61,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x44, 0x65, 0x62, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x55, 0x4d, 0x4e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x52, 0x65, 0x66, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x45, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x44, 0x65, 0x62, 0x69, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x55, 0x6e, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x44, 0x65, 0x62, 0x69, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x69, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_upi_getmandatedetails_proto_rawDescOnce sync.Once
	file_upi_getmandatedetails_proto_rawDescData []byte
)

func file_upi_getmandatedetails_proto_rawDescGZIP() []byte {
	file_upi_getmandatedetails_proto_rawDescOnce.Do(func() {
		file_upi_getmandatedetails_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_upi_getmandatedetails_proto_rawDesc), len(file_upi_getmandatedetails_proto_rawDesc)))
	})
	return file_upi_getmandatedetails_proto_rawDescData
}

var file_upi_getmandatedetails_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_upi_getmandatedetails_proto_goTypes = []any{
	(*GetMandatesDetailsRequest)(nil), // 0: upi.getMandateDetails.getMandatesDetailsRequest
	(*GetMandateDetailsReponse)(nil),  // 1: upi.getMandateDetails.getMandateDetailsReponse
	(*PayeeMetaData)(nil),             // 2: upi.getMandateDetails.payeeMetaData
	(*PayeeDetails)(nil),              // 3: upi.getMandateDetails.PayeeDetails
	(*PayerDetails)(nil),              // 4: upi.getMandateDetails.PayerDetails
	(*MandateDetails)(nil),            // 5: upi.getMandateDetails.MandateDetails
}
var file_upi_getmandatedetails_proto_depIdxs = []int32{
	2, // 0: upi.getMandateDetails.getMandateDetailsReponse.data:type_name -> upi.getMandateDetails.payeeMetaData
	3, // 1: upi.getMandateDetails.payeeMetaData.payee_details:type_name -> upi.getMandateDetails.PayeeDetails
	4, // 2: upi.getMandateDetails.payeeMetaData.payer_details:type_name -> upi.getMandateDetails.PayerDetails
	5, // 3: upi.getMandateDetails.payeeMetaData.mandate_details:type_name -> upi.getMandateDetails.MandateDetails
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_upi_getmandatedetails_proto_init() }
func file_upi_getmandatedetails_proto_init() {
	if File_upi_getmandatedetails_proto != nil {
		return
	}
	file_upi_getmandatedetails_proto_msgTypes[1].OneofWrappers = []any{}
	file_upi_getmandatedetails_proto_msgTypes[2].OneofWrappers = []any{}
	file_upi_getmandatedetails_proto_msgTypes[3].OneofWrappers = []any{}
	file_upi_getmandatedetails_proto_msgTypes[4].OneofWrappers = []any{}
	file_upi_getmandatedetails_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_upi_getmandatedetails_proto_rawDesc), len(file_upi_getmandatedetails_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_upi_getmandatedetails_proto_goTypes,
		DependencyIndexes: file_upi_getmandatedetails_proto_depIdxs,
		MessageInfos:      file_upi_getmandatedetails_proto_msgTypes,
	}.Build()
	File_upi_getmandatedetails_proto = out.File
	file_upi_getmandatedetails_proto_goTypes = nil
	file_upi_getmandatedetails_proto_depIdxs = nil
}
