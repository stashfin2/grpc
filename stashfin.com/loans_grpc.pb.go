// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: loans.proto

package stashfin_com

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	loans "stashfin.com/loans"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoansClient is the client API for Loans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoansClient interface {
	Creditlimit(ctx context.Context, in *loans.CreditLimitRequest, opts ...grpc.CallOption) (*loans.CreditLimitResponse, error)
	Calculateemi(ctx context.Context, in *loans.CalculateEmiRequest, opts ...grpc.CallOption) (*loans.CalculateEmiResponse, error)
	Banklist(ctx context.Context, in *loans.BankListRequest, opts ...grpc.CallOption) (*loans.BankListResponse, error)
	ApproveLoan(ctx context.Context, in *loans.ApproveLoanRequest, opts ...grpc.CallOption) (*loans.ApproveLoanResponse, error)
	Updateloan(ctx context.Context, in *loans.UpdateLoanRequest, opts ...grpc.CallOption) (*loans.UpdateLoanResponse, error)
	UpdateInstallments(ctx context.Context, in *loans.UpdateInstallmentsRequest, opts ...grpc.CallOption) (*loans.UpdateInstallmentsResponse, error)
	RestructureLoan(ctx context.Context, in *loans.RestructureLoanRequest, opts ...grpc.CallOption) (*loans.RestructureLoanResponse, error)
	TransactionList(ctx context.Context, in *loans.TransactionListRequest, opts ...grpc.CallOption) (*loans.TransactionListResponse, error)
	PaymentAllocation(ctx context.Context, in *loans.PaymentAllocationRequest, opts ...grpc.CallOption) (*loans.PaymentAllocationResponse, error)
	LoanSummary(ctx context.Context, in *loans.LoanSummaryRequest, opts ...grpc.CallOption) (*loans.LoanSummaryResponse, error)
	GetCustomerLoanStatus(ctx context.Context, in *loans.GetCustomerLoanStatusRequest, opts ...grpc.CallOption) (*loans.GetCustomerLoanStatusResponse, error)
	SendEmail(ctx context.Context, in *loans.SendEmailRequest, opts ...grpc.CallOption) (*loans.SendEmailResponse, error)
	SendNocEmail(ctx context.Context, in *loans.SendNocEmailRequest, opts ...grpc.CallOption) (*loans.SendNocEmailResponse, error)
	GetPendingEmiAmount(ctx context.Context, in *loans.GetPendingEmiAmountRequest, opts ...grpc.CallOption) (*loans.GetPendingEmiAmountResponse, error)
	GetSummaryStaticFields(ctx context.Context, in *loans.GetSummaryStaticFieldsRequest, opts ...grpc.CallOption) (*loans.GetSummaryStaticFieldsResponse, error)
	PaymentHistory(ctx context.Context, in *loans.PaymentHistoryRequest, opts ...grpc.CallOption) (*loans.PaymentHistoryResponse, error)
	EmiMoreDetails(ctx context.Context, in *loans.EmiMoreDetailsRequest, opts ...grpc.CallOption) (*loans.EmiMoreDetailsResponse, error)
	GetLoanbyId(ctx context.Context, in *loans.GetLoanByIdRequest, opts ...grpc.CallOption) (*loans.GetLoanByIdResponse, error)
	GetBillDetails(ctx context.Context, in *loans.GetBillDetailsRequest, opts ...grpc.CallOption) (*loans.GetBillDetailsResponse, error)
	GetNextDueAmount(ctx context.Context, in *loans.GetNextdueAmountRequest, opts ...grpc.CallOption) (*loans.GetNextdueAmountResponse, error)
	PayNow(ctx context.Context, in *loans.PayNowRequest, opts ...grpc.CallOption) (*loans.PayNowResponse, error)
	Amortization(ctx context.Context, in *loans.AmortizationRequest, opts ...grpc.CallOption) (*loans.AmortizationResponse, error)
	FcpPayment(ctx context.Context, in *loans.FcpPaymentRequest, opts ...grpc.CallOption) (*loans.FcpPaymentResponse, error)
	GetForecloseAmount(ctx context.Context, in *loans.GetForecloseAmountRequest, opts ...grpc.CallOption) (*loans.GetForecloseAmountResponse, error)
	ForeclosePayment(ctx context.Context, in *loans.ForeclosePaymentRequest, opts ...grpc.CallOption) (*loans.ForeclosePaymentResponse, error)
	Refund(ctx context.Context, in *loans.RefundRequest, opts ...grpc.CallOption) (*loans.RefundResponse, error)
	Rollback(ctx context.Context, in *loans.RollbackRequest, opts ...grpc.CallOption) (*loans.RollbackResponse, error)
	GetVirtualBankInfo(ctx context.Context, in *loans.GetVirtualBankInfoRequest, opts ...grpc.CallOption) (*loans.GetVirtualBankInfoResponse, error)
	Gettransactionstatus(ctx context.Context, in *loans.GetTransactionStatusRequest, opts ...grpc.CallOption) (*loans.GetTransactionStatusResponse, error)
	Updatetransactionstatus(ctx context.Context, in *loans.UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*loans.UpdateTransactionStatusResponse, error)
	GetUsedLimit(ctx context.Context, in *loans.GetUsedLimitfoRequest, opts ...grpc.CallOption) (*loans.GetUsedLimitfoResponse, error)
	GetChrDetails(ctx context.Context, in *loans.GetChrDetailsRequest, opts ...grpc.CallOption) (*loans.GetChrDetailsResponse, error)
	GetSetuBillDetails(ctx context.Context, in *loans.GetSetuBillDetailsRequest, opts ...grpc.CallOption) (*loans.GetSetuBillDetailsResponse, error)
	Getpaymentoptions(ctx context.Context, in *loans.GetPaymentOptionsRequest, opts ...grpc.CallOption) (*loans.GetPaymentOptionsResponse, error)
	CbLoan(ctx context.Context, in *loans.CbLoanRequest, opts ...grpc.CallOption) (*loans.CbLoanResponse, error)
	GetAddonsList(ctx context.Context, in *loans.GetAddonsListRequest, opts ...grpc.CallOption) (*loans.GetAddonsListResponse, error)
	UpdateCollectionview(ctx context.Context, in *loans.UpdateCollectionViewRequest, opts ...grpc.CallOption) (*loans.UpdateCollectionViewResponse, error)
	CreatePenalty(ctx context.Context, in *loans.CreatePenaltyRequest, opts ...grpc.CallOption) (*loans.CreatePenaltyResponse, error)
	GetCBloanDetails(ctx context.Context, in *loans.GetCBloanDetailsRequest, opts ...grpc.CallOption) (*loans.GetCBloanDetailsResponse, error)
	CreateLAMFloan(ctx context.Context, in *loans.CreateLamfLoanRequest, opts ...grpc.CallOption) (*loans.CreateLamfLoanResponse, error)
	ManualPaymentAllocation(ctx context.Context, in *loans.ManualPaymentAllocationRequest, opts ...grpc.CallOption) (*loans.ManualPaymentAllocationResponse, error)
	AddCustomerReference(ctx context.Context, in *loans.CustomerReferencesRequest, opts ...grpc.CallOption) (*loans.CustomerReferencesResponse, error)
	GetWithdrawForm(ctx context.Context, in *loans.GetLocWithdrawFormRequest, opts ...grpc.CallOption) (*loans.GetLocWithdrawFormResponse, error)
	GetLocTenure(ctx context.Context, in *loans.GetLocTenureRequest, opts ...grpc.CallOption) (*loans.GetLocTenureResponse, error)
	GetLocWithdraw(ctx context.Context, in *loans.GetLocWithdrawlRequest, opts ...grpc.CallOption) (*loans.GetLocWithdrawlResponse, error)
	GetLocConfirms(ctx context.Context, in *loans.GetLocConfirmRequest, opts ...grpc.CallOption) (*loans.GetLocConfirmResponse, error)
	GetBankDetails(ctx context.Context, in *loans.GetBankDetailsRequest, opts ...grpc.CallOption) (*loans.GetBankDetailsResponse, error)
	GetLocDetails(ctx context.Context, in *loans.GetLocDetailsRequest, opts ...grpc.CallOption) (*loans.GetLocDetailsResponse, error)
	GetLocDisburse(ctx context.Context, in *loans.GetLocDisburseRequest, opts ...grpc.CallOption) (*loans.GetLocDisburseResponse, error)
}

type loansClient struct {
	cc grpc.ClientConnInterface
}

func NewLoansClient(cc grpc.ClientConnInterface) LoansClient {
	return &loansClient{cc}
}

func (c *loansClient) Creditlimit(ctx context.Context, in *loans.CreditLimitRequest, opts ...grpc.CallOption) (*loans.CreditLimitResponse, error) {
	out := new(loans.CreditLimitResponse)
	err := c.cc.Invoke(ctx, "/service.loans/creditlimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Calculateemi(ctx context.Context, in *loans.CalculateEmiRequest, opts ...grpc.CallOption) (*loans.CalculateEmiResponse, error) {
	out := new(loans.CalculateEmiResponse)
	err := c.cc.Invoke(ctx, "/service.loans/calculateemi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Banklist(ctx context.Context, in *loans.BankListRequest, opts ...grpc.CallOption) (*loans.BankListResponse, error) {
	out := new(loans.BankListResponse)
	err := c.cc.Invoke(ctx, "/service.loans/banklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) ApproveLoan(ctx context.Context, in *loans.ApproveLoanRequest, opts ...grpc.CallOption) (*loans.ApproveLoanResponse, error) {
	out := new(loans.ApproveLoanResponse)
	err := c.cc.Invoke(ctx, "/service.loans/approveLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Updateloan(ctx context.Context, in *loans.UpdateLoanRequest, opts ...grpc.CallOption) (*loans.UpdateLoanResponse, error) {
	out := new(loans.UpdateLoanResponse)
	err := c.cc.Invoke(ctx, "/service.loans/updateloan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) UpdateInstallments(ctx context.Context, in *loans.UpdateInstallmentsRequest, opts ...grpc.CallOption) (*loans.UpdateInstallmentsResponse, error) {
	out := new(loans.UpdateInstallmentsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/updateInstallments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) RestructureLoan(ctx context.Context, in *loans.RestructureLoanRequest, opts ...grpc.CallOption) (*loans.RestructureLoanResponse, error) {
	out := new(loans.RestructureLoanResponse)
	err := c.cc.Invoke(ctx, "/service.loans/restructureLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) TransactionList(ctx context.Context, in *loans.TransactionListRequest, opts ...grpc.CallOption) (*loans.TransactionListResponse, error) {
	out := new(loans.TransactionListResponse)
	err := c.cc.Invoke(ctx, "/service.loans/transactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) PaymentAllocation(ctx context.Context, in *loans.PaymentAllocationRequest, opts ...grpc.CallOption) (*loans.PaymentAllocationResponse, error) {
	out := new(loans.PaymentAllocationResponse)
	err := c.cc.Invoke(ctx, "/service.loans/paymentAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) LoanSummary(ctx context.Context, in *loans.LoanSummaryRequest, opts ...grpc.CallOption) (*loans.LoanSummaryResponse, error) {
	out := new(loans.LoanSummaryResponse)
	err := c.cc.Invoke(ctx, "/service.loans/loanSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetCustomerLoanStatus(ctx context.Context, in *loans.GetCustomerLoanStatusRequest, opts ...grpc.CallOption) (*loans.GetCustomerLoanStatusResponse, error) {
	out := new(loans.GetCustomerLoanStatusResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getCustomerLoanStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) SendEmail(ctx context.Context, in *loans.SendEmailRequest, opts ...grpc.CallOption) (*loans.SendEmailResponse, error) {
	out := new(loans.SendEmailResponse)
	err := c.cc.Invoke(ctx, "/service.loans/sendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) SendNocEmail(ctx context.Context, in *loans.SendNocEmailRequest, opts ...grpc.CallOption) (*loans.SendNocEmailResponse, error) {
	out := new(loans.SendNocEmailResponse)
	err := c.cc.Invoke(ctx, "/service.loans/sendNocEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetPendingEmiAmount(ctx context.Context, in *loans.GetPendingEmiAmountRequest, opts ...grpc.CallOption) (*loans.GetPendingEmiAmountResponse, error) {
	out := new(loans.GetPendingEmiAmountResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getPendingEmiAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetSummaryStaticFields(ctx context.Context, in *loans.GetSummaryStaticFieldsRequest, opts ...grpc.CallOption) (*loans.GetSummaryStaticFieldsResponse, error) {
	out := new(loans.GetSummaryStaticFieldsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getSummaryStaticFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) PaymentHistory(ctx context.Context, in *loans.PaymentHistoryRequest, opts ...grpc.CallOption) (*loans.PaymentHistoryResponse, error) {
	out := new(loans.PaymentHistoryResponse)
	err := c.cc.Invoke(ctx, "/service.loans/paymentHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) EmiMoreDetails(ctx context.Context, in *loans.EmiMoreDetailsRequest, opts ...grpc.CallOption) (*loans.EmiMoreDetailsResponse, error) {
	out := new(loans.EmiMoreDetailsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/emiMoreDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetLoanbyId(ctx context.Context, in *loans.GetLoanByIdRequest, opts ...grpc.CallOption) (*loans.GetLoanByIdResponse, error) {
	out := new(loans.GetLoanByIdResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getLoanbyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetBillDetails(ctx context.Context, in *loans.GetBillDetailsRequest, opts ...grpc.CallOption) (*loans.GetBillDetailsResponse, error) {
	out := new(loans.GetBillDetailsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getBillDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetNextDueAmount(ctx context.Context, in *loans.GetNextdueAmountRequest, opts ...grpc.CallOption) (*loans.GetNextdueAmountResponse, error) {
	out := new(loans.GetNextdueAmountResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getNextDueAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) PayNow(ctx context.Context, in *loans.PayNowRequest, opts ...grpc.CallOption) (*loans.PayNowResponse, error) {
	out := new(loans.PayNowResponse)
	err := c.cc.Invoke(ctx, "/service.loans/payNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Amortization(ctx context.Context, in *loans.AmortizationRequest, opts ...grpc.CallOption) (*loans.AmortizationResponse, error) {
	out := new(loans.AmortizationResponse)
	err := c.cc.Invoke(ctx, "/service.loans/amortization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) FcpPayment(ctx context.Context, in *loans.FcpPaymentRequest, opts ...grpc.CallOption) (*loans.FcpPaymentResponse, error) {
	out := new(loans.FcpPaymentResponse)
	err := c.cc.Invoke(ctx, "/service.loans/fcpPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetForecloseAmount(ctx context.Context, in *loans.GetForecloseAmountRequest, opts ...grpc.CallOption) (*loans.GetForecloseAmountResponse, error) {
	out := new(loans.GetForecloseAmountResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getForecloseAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) ForeclosePayment(ctx context.Context, in *loans.ForeclosePaymentRequest, opts ...grpc.CallOption) (*loans.ForeclosePaymentResponse, error) {
	out := new(loans.ForeclosePaymentResponse)
	err := c.cc.Invoke(ctx, "/service.loans/foreclosePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Refund(ctx context.Context, in *loans.RefundRequest, opts ...grpc.CallOption) (*loans.RefundResponse, error) {
	out := new(loans.RefundResponse)
	err := c.cc.Invoke(ctx, "/service.loans/refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Rollback(ctx context.Context, in *loans.RollbackRequest, opts ...grpc.CallOption) (*loans.RollbackResponse, error) {
	out := new(loans.RollbackResponse)
	err := c.cc.Invoke(ctx, "/service.loans/rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetVirtualBankInfo(ctx context.Context, in *loans.GetVirtualBankInfoRequest, opts ...grpc.CallOption) (*loans.GetVirtualBankInfoResponse, error) {
	out := new(loans.GetVirtualBankInfoResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getVirtualBankInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Gettransactionstatus(ctx context.Context, in *loans.GetTransactionStatusRequest, opts ...grpc.CallOption) (*loans.GetTransactionStatusResponse, error) {
	out := new(loans.GetTransactionStatusResponse)
	err := c.cc.Invoke(ctx, "/service.loans/gettransactionstatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Updatetransactionstatus(ctx context.Context, in *loans.UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*loans.UpdateTransactionStatusResponse, error) {
	out := new(loans.UpdateTransactionStatusResponse)
	err := c.cc.Invoke(ctx, "/service.loans/updatetransactionstatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetUsedLimit(ctx context.Context, in *loans.GetUsedLimitfoRequest, opts ...grpc.CallOption) (*loans.GetUsedLimitfoResponse, error) {
	out := new(loans.GetUsedLimitfoResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getUsedLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetChrDetails(ctx context.Context, in *loans.GetChrDetailsRequest, opts ...grpc.CallOption) (*loans.GetChrDetailsResponse, error) {
	out := new(loans.GetChrDetailsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getChrDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetSetuBillDetails(ctx context.Context, in *loans.GetSetuBillDetailsRequest, opts ...grpc.CallOption) (*loans.GetSetuBillDetailsResponse, error) {
	out := new(loans.GetSetuBillDetailsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getSetuBillDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) Getpaymentoptions(ctx context.Context, in *loans.GetPaymentOptionsRequest, opts ...grpc.CallOption) (*loans.GetPaymentOptionsResponse, error) {
	out := new(loans.GetPaymentOptionsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getpaymentoptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) CbLoan(ctx context.Context, in *loans.CbLoanRequest, opts ...grpc.CallOption) (*loans.CbLoanResponse, error) {
	out := new(loans.CbLoanResponse)
	err := c.cc.Invoke(ctx, "/service.loans/cbLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetAddonsList(ctx context.Context, in *loans.GetAddonsListRequest, opts ...grpc.CallOption) (*loans.GetAddonsListResponse, error) {
	out := new(loans.GetAddonsListResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getAddonsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) UpdateCollectionview(ctx context.Context, in *loans.UpdateCollectionViewRequest, opts ...grpc.CallOption) (*loans.UpdateCollectionViewResponse, error) {
	out := new(loans.UpdateCollectionViewResponse)
	err := c.cc.Invoke(ctx, "/service.loans/updateCollectionview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) CreatePenalty(ctx context.Context, in *loans.CreatePenaltyRequest, opts ...grpc.CallOption) (*loans.CreatePenaltyResponse, error) {
	out := new(loans.CreatePenaltyResponse)
	err := c.cc.Invoke(ctx, "/service.loans/createPenalty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetCBloanDetails(ctx context.Context, in *loans.GetCBloanDetailsRequest, opts ...grpc.CallOption) (*loans.GetCBloanDetailsResponse, error) {
	out := new(loans.GetCBloanDetailsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getCBloanDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) CreateLAMFloan(ctx context.Context, in *loans.CreateLamfLoanRequest, opts ...grpc.CallOption) (*loans.CreateLamfLoanResponse, error) {
	out := new(loans.CreateLamfLoanResponse)
	err := c.cc.Invoke(ctx, "/service.loans/createLAMFloan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) ManualPaymentAllocation(ctx context.Context, in *loans.ManualPaymentAllocationRequest, opts ...grpc.CallOption) (*loans.ManualPaymentAllocationResponse, error) {
	out := new(loans.ManualPaymentAllocationResponse)
	err := c.cc.Invoke(ctx, "/service.loans/manualPaymentAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) AddCustomerReference(ctx context.Context, in *loans.CustomerReferencesRequest, opts ...grpc.CallOption) (*loans.CustomerReferencesResponse, error) {
	out := new(loans.CustomerReferencesResponse)
	err := c.cc.Invoke(ctx, "/service.loans/addCustomerReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetWithdrawForm(ctx context.Context, in *loans.GetLocWithdrawFormRequest, opts ...grpc.CallOption) (*loans.GetLocWithdrawFormResponse, error) {
	out := new(loans.GetLocWithdrawFormResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getWithdrawForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetLocTenure(ctx context.Context, in *loans.GetLocTenureRequest, opts ...grpc.CallOption) (*loans.GetLocTenureResponse, error) {
	out := new(loans.GetLocTenureResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getLocTenure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetLocWithdraw(ctx context.Context, in *loans.GetLocWithdrawlRequest, opts ...grpc.CallOption) (*loans.GetLocWithdrawlResponse, error) {
	out := new(loans.GetLocWithdrawlResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getLocWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetLocConfirms(ctx context.Context, in *loans.GetLocConfirmRequest, opts ...grpc.CallOption) (*loans.GetLocConfirmResponse, error) {
	out := new(loans.GetLocConfirmResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getLocConfirms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetBankDetails(ctx context.Context, in *loans.GetBankDetailsRequest, opts ...grpc.CallOption) (*loans.GetBankDetailsResponse, error) {
	out := new(loans.GetBankDetailsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/getBankDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetLocDetails(ctx context.Context, in *loans.GetLocDetailsRequest, opts ...grpc.CallOption) (*loans.GetLocDetailsResponse, error) {
	out := new(loans.GetLocDetailsResponse)
	err := c.cc.Invoke(ctx, "/service.loans/GetLocDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansClient) GetLocDisburse(ctx context.Context, in *loans.GetLocDisburseRequest, opts ...grpc.CallOption) (*loans.GetLocDisburseResponse, error) {
	out := new(loans.GetLocDisburseResponse)
	err := c.cc.Invoke(ctx, "/service.loans/GetLocDisburse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoansServer is the server API for Loans service.
// All implementations must embed UnimplementedLoansServer
// for forward compatibility
type LoansServer interface {
	Creditlimit(context.Context, *loans.CreditLimitRequest) (*loans.CreditLimitResponse, error)
	Calculateemi(context.Context, *loans.CalculateEmiRequest) (*loans.CalculateEmiResponse, error)
	Banklist(context.Context, *loans.BankListRequest) (*loans.BankListResponse, error)
	ApproveLoan(context.Context, *loans.ApproveLoanRequest) (*loans.ApproveLoanResponse, error)
	Updateloan(context.Context, *loans.UpdateLoanRequest) (*loans.UpdateLoanResponse, error)
	UpdateInstallments(context.Context, *loans.UpdateInstallmentsRequest) (*loans.UpdateInstallmentsResponse, error)
	RestructureLoan(context.Context, *loans.RestructureLoanRequest) (*loans.RestructureLoanResponse, error)
	TransactionList(context.Context, *loans.TransactionListRequest) (*loans.TransactionListResponse, error)
	PaymentAllocation(context.Context, *loans.PaymentAllocationRequest) (*loans.PaymentAllocationResponse, error)
	LoanSummary(context.Context, *loans.LoanSummaryRequest) (*loans.LoanSummaryResponse, error)
	GetCustomerLoanStatus(context.Context, *loans.GetCustomerLoanStatusRequest) (*loans.GetCustomerLoanStatusResponse, error)
	SendEmail(context.Context, *loans.SendEmailRequest) (*loans.SendEmailResponse, error)
	SendNocEmail(context.Context, *loans.SendNocEmailRequest) (*loans.SendNocEmailResponse, error)
	GetPendingEmiAmount(context.Context, *loans.GetPendingEmiAmountRequest) (*loans.GetPendingEmiAmountResponse, error)
	GetSummaryStaticFields(context.Context, *loans.GetSummaryStaticFieldsRequest) (*loans.GetSummaryStaticFieldsResponse, error)
	PaymentHistory(context.Context, *loans.PaymentHistoryRequest) (*loans.PaymentHistoryResponse, error)
	EmiMoreDetails(context.Context, *loans.EmiMoreDetailsRequest) (*loans.EmiMoreDetailsResponse, error)
	GetLoanbyId(context.Context, *loans.GetLoanByIdRequest) (*loans.GetLoanByIdResponse, error)
	GetBillDetails(context.Context, *loans.GetBillDetailsRequest) (*loans.GetBillDetailsResponse, error)
	GetNextDueAmount(context.Context, *loans.GetNextdueAmountRequest) (*loans.GetNextdueAmountResponse, error)
	PayNow(context.Context, *loans.PayNowRequest) (*loans.PayNowResponse, error)
	Amortization(context.Context, *loans.AmortizationRequest) (*loans.AmortizationResponse, error)
	FcpPayment(context.Context, *loans.FcpPaymentRequest) (*loans.FcpPaymentResponse, error)
	GetForecloseAmount(context.Context, *loans.GetForecloseAmountRequest) (*loans.GetForecloseAmountResponse, error)
	ForeclosePayment(context.Context, *loans.ForeclosePaymentRequest) (*loans.ForeclosePaymentResponse, error)
	Refund(context.Context, *loans.RefundRequest) (*loans.RefundResponse, error)
	Rollback(context.Context, *loans.RollbackRequest) (*loans.RollbackResponse, error)
	GetVirtualBankInfo(context.Context, *loans.GetVirtualBankInfoRequest) (*loans.GetVirtualBankInfoResponse, error)
	Gettransactionstatus(context.Context, *loans.GetTransactionStatusRequest) (*loans.GetTransactionStatusResponse, error)
	Updatetransactionstatus(context.Context, *loans.UpdateTransactionStatusRequest) (*loans.UpdateTransactionStatusResponse, error)
	GetUsedLimit(context.Context, *loans.GetUsedLimitfoRequest) (*loans.GetUsedLimitfoResponse, error)
	GetChrDetails(context.Context, *loans.GetChrDetailsRequest) (*loans.GetChrDetailsResponse, error)
	GetSetuBillDetails(context.Context, *loans.GetSetuBillDetailsRequest) (*loans.GetSetuBillDetailsResponse, error)
	Getpaymentoptions(context.Context, *loans.GetPaymentOptionsRequest) (*loans.GetPaymentOptionsResponse, error)
	CbLoan(context.Context, *loans.CbLoanRequest) (*loans.CbLoanResponse, error)
	GetAddonsList(context.Context, *loans.GetAddonsListRequest) (*loans.GetAddonsListResponse, error)
	UpdateCollectionview(context.Context, *loans.UpdateCollectionViewRequest) (*loans.UpdateCollectionViewResponse, error)
	CreatePenalty(context.Context, *loans.CreatePenaltyRequest) (*loans.CreatePenaltyResponse, error)
	GetCBloanDetails(context.Context, *loans.GetCBloanDetailsRequest) (*loans.GetCBloanDetailsResponse, error)
	CreateLAMFloan(context.Context, *loans.CreateLamfLoanRequest) (*loans.CreateLamfLoanResponse, error)
	ManualPaymentAllocation(context.Context, *loans.ManualPaymentAllocationRequest) (*loans.ManualPaymentAllocationResponse, error)
	AddCustomerReference(context.Context, *loans.CustomerReferencesRequest) (*loans.CustomerReferencesResponse, error)
	GetWithdrawForm(context.Context, *loans.GetLocWithdrawFormRequest) (*loans.GetLocWithdrawFormResponse, error)
	GetLocTenure(context.Context, *loans.GetLocTenureRequest) (*loans.GetLocTenureResponse, error)
	GetLocWithdraw(context.Context, *loans.GetLocWithdrawlRequest) (*loans.GetLocWithdrawlResponse, error)
	GetLocConfirms(context.Context, *loans.GetLocConfirmRequest) (*loans.GetLocConfirmResponse, error)
	GetBankDetails(context.Context, *loans.GetBankDetailsRequest) (*loans.GetBankDetailsResponse, error)
	GetLocDetails(context.Context, *loans.GetLocDetailsRequest) (*loans.GetLocDetailsResponse, error)
	GetLocDisburse(context.Context, *loans.GetLocDisburseRequest) (*loans.GetLocDisburseResponse, error)
	mustEmbedUnimplementedLoansServer()
}

// UnimplementedLoansServer must be embedded to have forward compatible implementations.
type UnimplementedLoansServer struct {
}

func (UnimplementedLoansServer) Creditlimit(context.Context, *loans.CreditLimitRequest) (*loans.CreditLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Creditlimit not implemented")
}
func (UnimplementedLoansServer) Calculateemi(context.Context, *loans.CalculateEmiRequest) (*loans.CalculateEmiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculateemi not implemented")
}
func (UnimplementedLoansServer) Banklist(context.Context, *loans.BankListRequest) (*loans.BankListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Banklist not implemented")
}
func (UnimplementedLoansServer) ApproveLoan(context.Context, *loans.ApproveLoanRequest) (*loans.ApproveLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLoan not implemented")
}
func (UnimplementedLoansServer) Updateloan(context.Context, *loans.UpdateLoanRequest) (*loans.UpdateLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updateloan not implemented")
}
func (UnimplementedLoansServer) UpdateInstallments(context.Context, *loans.UpdateInstallmentsRequest) (*loans.UpdateInstallmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstallments not implemented")
}
func (UnimplementedLoansServer) RestructureLoan(context.Context, *loans.RestructureLoanRequest) (*loans.RestructureLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestructureLoan not implemented")
}
func (UnimplementedLoansServer) TransactionList(context.Context, *loans.TransactionListRequest) (*loans.TransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionList not implemented")
}
func (UnimplementedLoansServer) PaymentAllocation(context.Context, *loans.PaymentAllocationRequest) (*loans.PaymentAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAllocation not implemented")
}
func (UnimplementedLoansServer) LoanSummary(context.Context, *loans.LoanSummaryRequest) (*loans.LoanSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanSummary not implemented")
}
func (UnimplementedLoansServer) GetCustomerLoanStatus(context.Context, *loans.GetCustomerLoanStatusRequest) (*loans.GetCustomerLoanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerLoanStatus not implemented")
}
func (UnimplementedLoansServer) SendEmail(context.Context, *loans.SendEmailRequest) (*loans.SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedLoansServer) SendNocEmail(context.Context, *loans.SendNocEmailRequest) (*loans.SendNocEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNocEmail not implemented")
}
func (UnimplementedLoansServer) GetPendingEmiAmount(context.Context, *loans.GetPendingEmiAmountRequest) (*loans.GetPendingEmiAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingEmiAmount not implemented")
}
func (UnimplementedLoansServer) GetSummaryStaticFields(context.Context, *loans.GetSummaryStaticFieldsRequest) (*loans.GetSummaryStaticFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryStaticFields not implemented")
}
func (UnimplementedLoansServer) PaymentHistory(context.Context, *loans.PaymentHistoryRequest) (*loans.PaymentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentHistory not implemented")
}
func (UnimplementedLoansServer) EmiMoreDetails(context.Context, *loans.EmiMoreDetailsRequest) (*loans.EmiMoreDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmiMoreDetails not implemented")
}
func (UnimplementedLoansServer) GetLoanbyId(context.Context, *loans.GetLoanByIdRequest) (*loans.GetLoanByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanbyId not implemented")
}
func (UnimplementedLoansServer) GetBillDetails(context.Context, *loans.GetBillDetailsRequest) (*loans.GetBillDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillDetails not implemented")
}
func (UnimplementedLoansServer) GetNextDueAmount(context.Context, *loans.GetNextdueAmountRequest) (*loans.GetNextdueAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextDueAmount not implemented")
}
func (UnimplementedLoansServer) PayNow(context.Context, *loans.PayNowRequest) (*loans.PayNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNow not implemented")
}
func (UnimplementedLoansServer) Amortization(context.Context, *loans.AmortizationRequest) (*loans.AmortizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Amortization not implemented")
}
func (UnimplementedLoansServer) FcpPayment(context.Context, *loans.FcpPaymentRequest) (*loans.FcpPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FcpPayment not implemented")
}
func (UnimplementedLoansServer) GetForecloseAmount(context.Context, *loans.GetForecloseAmountRequest) (*loans.GetForecloseAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecloseAmount not implemented")
}
func (UnimplementedLoansServer) ForeclosePayment(context.Context, *loans.ForeclosePaymentRequest) (*loans.ForeclosePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForeclosePayment not implemented")
}
func (UnimplementedLoansServer) Refund(context.Context, *loans.RefundRequest) (*loans.RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedLoansServer) Rollback(context.Context, *loans.RollbackRequest) (*loans.RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedLoansServer) GetVirtualBankInfo(context.Context, *loans.GetVirtualBankInfoRequest) (*loans.GetVirtualBankInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualBankInfo not implemented")
}
func (UnimplementedLoansServer) Gettransactionstatus(context.Context, *loans.GetTransactionStatusRequest) (*loans.GetTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gettransactionstatus not implemented")
}
func (UnimplementedLoansServer) Updatetransactionstatus(context.Context, *loans.UpdateTransactionStatusRequest) (*loans.UpdateTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatetransactionstatus not implemented")
}
func (UnimplementedLoansServer) GetUsedLimit(context.Context, *loans.GetUsedLimitfoRequest) (*loans.GetUsedLimitfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsedLimit not implemented")
}
func (UnimplementedLoansServer) GetChrDetails(context.Context, *loans.GetChrDetailsRequest) (*loans.GetChrDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChrDetails not implemented")
}
func (UnimplementedLoansServer) GetSetuBillDetails(context.Context, *loans.GetSetuBillDetailsRequest) (*loans.GetSetuBillDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetuBillDetails not implemented")
}
func (UnimplementedLoansServer) Getpaymentoptions(context.Context, *loans.GetPaymentOptionsRequest) (*loans.GetPaymentOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getpaymentoptions not implemented")
}
func (UnimplementedLoansServer) CbLoan(context.Context, *loans.CbLoanRequest) (*loans.CbLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CbLoan not implemented")
}
func (UnimplementedLoansServer) GetAddonsList(context.Context, *loans.GetAddonsListRequest) (*loans.GetAddonsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddonsList not implemented")
}
func (UnimplementedLoansServer) UpdateCollectionview(context.Context, *loans.UpdateCollectionViewRequest) (*loans.UpdateCollectionViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionview not implemented")
}
func (UnimplementedLoansServer) CreatePenalty(context.Context, *loans.CreatePenaltyRequest) (*loans.CreatePenaltyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePenalty not implemented")
}
func (UnimplementedLoansServer) GetCBloanDetails(context.Context, *loans.GetCBloanDetailsRequest) (*loans.GetCBloanDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCBloanDetails not implemented")
}
func (UnimplementedLoansServer) CreateLAMFloan(context.Context, *loans.CreateLamfLoanRequest) (*loans.CreateLamfLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLAMFloan not implemented")
}
func (UnimplementedLoansServer) ManualPaymentAllocation(context.Context, *loans.ManualPaymentAllocationRequest) (*loans.ManualPaymentAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualPaymentAllocation not implemented")
}
func (UnimplementedLoansServer) AddCustomerReference(context.Context, *loans.CustomerReferencesRequest) (*loans.CustomerReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerReference not implemented")
}
func (UnimplementedLoansServer) GetWithdrawForm(context.Context, *loans.GetLocWithdrawFormRequest) (*loans.GetLocWithdrawFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawForm not implemented")
}
func (UnimplementedLoansServer) GetLocTenure(context.Context, *loans.GetLocTenureRequest) (*loans.GetLocTenureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocTenure not implemented")
}
func (UnimplementedLoansServer) GetLocWithdraw(context.Context, *loans.GetLocWithdrawlRequest) (*loans.GetLocWithdrawlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocWithdraw not implemented")
}
func (UnimplementedLoansServer) GetLocConfirms(context.Context, *loans.GetLocConfirmRequest) (*loans.GetLocConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocConfirms not implemented")
}
func (UnimplementedLoansServer) GetBankDetails(context.Context, *loans.GetBankDetailsRequest) (*loans.GetBankDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetails not implemented")
}
func (UnimplementedLoansServer) GetLocDetails(context.Context, *loans.GetLocDetailsRequest) (*loans.GetLocDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocDetails not implemented")
}
func (UnimplementedLoansServer) GetLocDisburse(context.Context, *loans.GetLocDisburseRequest) (*loans.GetLocDisburseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocDisburse not implemented")
}
func (UnimplementedLoansServer) mustEmbedUnimplementedLoansServer() {}

// UnsafeLoansServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoansServer will
// result in compilation errors.
type UnsafeLoansServer interface {
	mustEmbedUnimplementedLoansServer()
}

func RegisterLoansServer(s grpc.ServiceRegistrar, srv LoansServer) {
	s.RegisterService(&Loans_ServiceDesc, srv)
}

func _Loans_Creditlimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.CreditLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Creditlimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/creditlimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Creditlimit(ctx, req.(*loans.CreditLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Calculateemi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.CalculateEmiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Calculateemi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/calculateemi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Calculateemi(ctx, req.(*loans.CalculateEmiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Banklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.BankListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Banklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/banklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Banklist(ctx, req.(*loans.BankListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_ApproveLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.ApproveLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).ApproveLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/approveLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).ApproveLoan(ctx, req.(*loans.ApproveLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Updateloan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.UpdateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Updateloan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/updateloan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Updateloan(ctx, req.(*loans.UpdateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_UpdateInstallments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.UpdateInstallmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).UpdateInstallments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/updateInstallments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).UpdateInstallments(ctx, req.(*loans.UpdateInstallmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_RestructureLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.RestructureLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).RestructureLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/restructureLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).RestructureLoan(ctx, req.(*loans.RestructureLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_TransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.TransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).TransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/transactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).TransactionList(ctx, req.(*loans.TransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_PaymentAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.PaymentAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).PaymentAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/paymentAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).PaymentAllocation(ctx, req.(*loans.PaymentAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_LoanSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.LoanSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).LoanSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/loanSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).LoanSummary(ctx, req.(*loans.LoanSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetCustomerLoanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetCustomerLoanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetCustomerLoanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getCustomerLoanStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetCustomerLoanStatus(ctx, req.(*loans.GetCustomerLoanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/sendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).SendEmail(ctx, req.(*loans.SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_SendNocEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.SendNocEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).SendNocEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/sendNocEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).SendNocEmail(ctx, req.(*loans.SendNocEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetPendingEmiAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetPendingEmiAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetPendingEmiAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getPendingEmiAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetPendingEmiAmount(ctx, req.(*loans.GetPendingEmiAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetSummaryStaticFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetSummaryStaticFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetSummaryStaticFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getSummaryStaticFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetSummaryStaticFields(ctx, req.(*loans.GetSummaryStaticFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_PaymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.PaymentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).PaymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/paymentHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).PaymentHistory(ctx, req.(*loans.PaymentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_EmiMoreDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.EmiMoreDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).EmiMoreDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/emiMoreDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).EmiMoreDetails(ctx, req.(*loans.EmiMoreDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetLoanbyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetLoanByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetLoanbyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getLoanbyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetLoanbyId(ctx, req.(*loans.GetLoanByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetBillDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetBillDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetBillDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getBillDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetBillDetails(ctx, req.(*loans.GetBillDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetNextDueAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetNextdueAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetNextDueAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getNextDueAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetNextDueAmount(ctx, req.(*loans.GetNextdueAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_PayNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.PayNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).PayNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/payNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).PayNow(ctx, req.(*loans.PayNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Amortization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.AmortizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Amortization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/amortization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Amortization(ctx, req.(*loans.AmortizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_FcpPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.FcpPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).FcpPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/fcpPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).FcpPayment(ctx, req.(*loans.FcpPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetForecloseAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetForecloseAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetForecloseAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getForecloseAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetForecloseAmount(ctx, req.(*loans.GetForecloseAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_ForeclosePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.ForeclosePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).ForeclosePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/foreclosePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).ForeclosePayment(ctx, req.(*loans.ForeclosePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Refund(ctx, req.(*loans.RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Rollback(ctx, req.(*loans.RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetVirtualBankInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetVirtualBankInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetVirtualBankInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getVirtualBankInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetVirtualBankInfo(ctx, req.(*loans.GetVirtualBankInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Gettransactionstatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Gettransactionstatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/gettransactionstatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Gettransactionstatus(ctx, req.(*loans.GetTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Updatetransactionstatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.UpdateTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Updatetransactionstatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/updatetransactionstatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Updatetransactionstatus(ctx, req.(*loans.UpdateTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetUsedLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetUsedLimitfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetUsedLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getUsedLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetUsedLimit(ctx, req.(*loans.GetUsedLimitfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetChrDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetChrDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetChrDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getChrDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetChrDetails(ctx, req.(*loans.GetChrDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetSetuBillDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetSetuBillDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetSetuBillDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getSetuBillDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetSetuBillDetails(ctx, req.(*loans.GetSetuBillDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_Getpaymentoptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetPaymentOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).Getpaymentoptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getpaymentoptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).Getpaymentoptions(ctx, req.(*loans.GetPaymentOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_CbLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.CbLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).CbLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/cbLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).CbLoan(ctx, req.(*loans.CbLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetAddonsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetAddonsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetAddonsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getAddonsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetAddonsList(ctx, req.(*loans.GetAddonsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_UpdateCollectionview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.UpdateCollectionViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).UpdateCollectionview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/updateCollectionview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).UpdateCollectionview(ctx, req.(*loans.UpdateCollectionViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_CreatePenalty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.CreatePenaltyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).CreatePenalty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/createPenalty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).CreatePenalty(ctx, req.(*loans.CreatePenaltyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetCBloanDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetCBloanDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetCBloanDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getCBloanDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetCBloanDetails(ctx, req.(*loans.GetCBloanDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_CreateLAMFloan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.CreateLamfLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).CreateLAMFloan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/createLAMFloan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).CreateLAMFloan(ctx, req.(*loans.CreateLamfLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_ManualPaymentAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.ManualPaymentAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).ManualPaymentAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/manualPaymentAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).ManualPaymentAllocation(ctx, req.(*loans.ManualPaymentAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_AddCustomerReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.CustomerReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).AddCustomerReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/addCustomerReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).AddCustomerReference(ctx, req.(*loans.CustomerReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetWithdrawForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetLocWithdrawFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetWithdrawForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getWithdrawForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetWithdrawForm(ctx, req.(*loans.GetLocWithdrawFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetLocTenure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetLocTenureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetLocTenure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getLocTenure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetLocTenure(ctx, req.(*loans.GetLocTenureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetLocWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetLocWithdrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetLocWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getLocWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetLocWithdraw(ctx, req.(*loans.GetLocWithdrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetLocConfirms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetLocConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetLocConfirms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getLocConfirms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetLocConfirms(ctx, req.(*loans.GetLocConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetBankDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetBankDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetBankDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/getBankDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetBankDetails(ctx, req.(*loans.GetBankDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetLocDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetLocDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetLocDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/GetLocDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetLocDetails(ctx, req.(*loans.GetLocDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loans_GetLocDisburse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(loans.GetLocDisburseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServer).GetLocDisburse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.loans/GetLocDisburse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServer).GetLocDisburse(ctx, req.(*loans.GetLocDisburseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Loans_ServiceDesc is the grpc.ServiceDesc for Loans service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loans_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.loans",
	HandlerType: (*LoansServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "creditlimit",
			Handler:    _Loans_Creditlimit_Handler,
		},
		{
			MethodName: "calculateemi",
			Handler:    _Loans_Calculateemi_Handler,
		},
		{
			MethodName: "banklist",
			Handler:    _Loans_Banklist_Handler,
		},
		{
			MethodName: "approveLoan",
			Handler:    _Loans_ApproveLoan_Handler,
		},
		{
			MethodName: "updateloan",
			Handler:    _Loans_Updateloan_Handler,
		},
		{
			MethodName: "updateInstallments",
			Handler:    _Loans_UpdateInstallments_Handler,
		},
		{
			MethodName: "restructureLoan",
			Handler:    _Loans_RestructureLoan_Handler,
		},
		{
			MethodName: "transactionList",
			Handler:    _Loans_TransactionList_Handler,
		},
		{
			MethodName: "paymentAllocation",
			Handler:    _Loans_PaymentAllocation_Handler,
		},
		{
			MethodName: "loanSummary",
			Handler:    _Loans_LoanSummary_Handler,
		},
		{
			MethodName: "getCustomerLoanStatus",
			Handler:    _Loans_GetCustomerLoanStatus_Handler,
		},
		{
			MethodName: "sendEmail",
			Handler:    _Loans_SendEmail_Handler,
		},
		{
			MethodName: "sendNocEmail",
			Handler:    _Loans_SendNocEmail_Handler,
		},
		{
			MethodName: "getPendingEmiAmount",
			Handler:    _Loans_GetPendingEmiAmount_Handler,
		},
		{
			MethodName: "getSummaryStaticFields",
			Handler:    _Loans_GetSummaryStaticFields_Handler,
		},
		{
			MethodName: "paymentHistory",
			Handler:    _Loans_PaymentHistory_Handler,
		},
		{
			MethodName: "emiMoreDetails",
			Handler:    _Loans_EmiMoreDetails_Handler,
		},
		{
			MethodName: "getLoanbyId",
			Handler:    _Loans_GetLoanbyId_Handler,
		},
		{
			MethodName: "getBillDetails",
			Handler:    _Loans_GetBillDetails_Handler,
		},
		{
			MethodName: "getNextDueAmount",
			Handler:    _Loans_GetNextDueAmount_Handler,
		},
		{
			MethodName: "payNow",
			Handler:    _Loans_PayNow_Handler,
		},
		{
			MethodName: "amortization",
			Handler:    _Loans_Amortization_Handler,
		},
		{
			MethodName: "fcpPayment",
			Handler:    _Loans_FcpPayment_Handler,
		},
		{
			MethodName: "getForecloseAmount",
			Handler:    _Loans_GetForecloseAmount_Handler,
		},
		{
			MethodName: "foreclosePayment",
			Handler:    _Loans_ForeclosePayment_Handler,
		},
		{
			MethodName: "refund",
			Handler:    _Loans_Refund_Handler,
		},
		{
			MethodName: "rollback",
			Handler:    _Loans_Rollback_Handler,
		},
		{
			MethodName: "getVirtualBankInfo",
			Handler:    _Loans_GetVirtualBankInfo_Handler,
		},
		{
			MethodName: "gettransactionstatus",
			Handler:    _Loans_Gettransactionstatus_Handler,
		},
		{
			MethodName: "updatetransactionstatus",
			Handler:    _Loans_Updatetransactionstatus_Handler,
		},
		{
			MethodName: "getUsedLimit",
			Handler:    _Loans_GetUsedLimit_Handler,
		},
		{
			MethodName: "getChrDetails",
			Handler:    _Loans_GetChrDetails_Handler,
		},
		{
			MethodName: "getSetuBillDetails",
			Handler:    _Loans_GetSetuBillDetails_Handler,
		},
		{
			MethodName: "getpaymentoptions",
			Handler:    _Loans_Getpaymentoptions_Handler,
		},
		{
			MethodName: "cbLoan",
			Handler:    _Loans_CbLoan_Handler,
		},
		{
			MethodName: "getAddonsList",
			Handler:    _Loans_GetAddonsList_Handler,
		},
		{
			MethodName: "updateCollectionview",
			Handler:    _Loans_UpdateCollectionview_Handler,
		},
		{
			MethodName: "createPenalty",
			Handler:    _Loans_CreatePenalty_Handler,
		},
		{
			MethodName: "getCBloanDetails",
			Handler:    _Loans_GetCBloanDetails_Handler,
		},
		{
			MethodName: "createLAMFloan",
			Handler:    _Loans_CreateLAMFloan_Handler,
		},
		{
			MethodName: "manualPaymentAllocation",
			Handler:    _Loans_ManualPaymentAllocation_Handler,
		},
		{
			MethodName: "addCustomerReference",
			Handler:    _Loans_AddCustomerReference_Handler,
		},
		{
			MethodName: "getWithdrawForm",
			Handler:    _Loans_GetWithdrawForm_Handler,
		},
		{
			MethodName: "getLocTenure",
			Handler:    _Loans_GetLocTenure_Handler,
		},
		{
			MethodName: "getLocWithdraw",
			Handler:    _Loans_GetLocWithdraw_Handler,
		},
		{
			MethodName: "getLocConfirms",
			Handler:    _Loans_GetLocConfirms_Handler,
		},
		{
			MethodName: "getBankDetails",
			Handler:    _Loans_GetBankDetails_Handler,
		},
		{
			MethodName: "GetLocDetails",
			Handler:    _Loans_GetLocDetails_Handler,
		},
		{
			MethodName: "GetLocDisburse",
			Handler:    _Loans_GetLocDisburse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loans.proto",
}
