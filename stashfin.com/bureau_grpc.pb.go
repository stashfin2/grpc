// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: bureau.proto

package stashfin_com

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	bureau "stashfin.com/bureau"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BureauClient is the client API for Bureau service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BureauClient interface {
	GetBasicDetails(ctx context.Context, in *bureau.DetailsRequest, opts ...grpc.CallOption) (*bureau.DetailsResponse, error)
	GetReport(ctx context.Context, in *bureau.BureauRequest, opts ...grpc.CallOption) (*bureau.BureauResponse, error)
	GetDemogs(ctx context.Context, in *bureau.DemogsRequest, opts ...grpc.CallOption) (*bureau.DemogsResponse, error)
	GetObligationData(ctx context.Context, in *bureau.ObligationRequest, opts ...grpc.CallOption) (*bureau.ObligationResponse, error)
	GetColendingDBR(ctx context.Context, in *bureau.DbrRequest, opts ...grpc.CallOption) (*bureau.DbrResponse, error)
	GetCibilWebToken(ctx context.Context, in *bureau.WebTokenRequest, opts ...grpc.CallOption) (*bureau.WebTokenResponse, error)
}

type bureauClient struct {
	cc grpc.ClientConnInterface
}

func NewBureauClient(cc grpc.ClientConnInterface) BureauClient {
	return &bureauClient{cc}
}

func (c *bureauClient) GetBasicDetails(ctx context.Context, in *bureau.DetailsRequest, opts ...grpc.CallOption) (*bureau.DetailsResponse, error) {
	out := new(bureau.DetailsResponse)
	err := c.cc.Invoke(ctx, "/service.bureau/getBasicDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bureauClient) GetReport(ctx context.Context, in *bureau.BureauRequest, opts ...grpc.CallOption) (*bureau.BureauResponse, error) {
	out := new(bureau.BureauResponse)
	err := c.cc.Invoke(ctx, "/service.bureau/getReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bureauClient) GetDemogs(ctx context.Context, in *bureau.DemogsRequest, opts ...grpc.CallOption) (*bureau.DemogsResponse, error) {
	out := new(bureau.DemogsResponse)
	err := c.cc.Invoke(ctx, "/service.bureau/getDemogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bureauClient) GetObligationData(ctx context.Context, in *bureau.ObligationRequest, opts ...grpc.CallOption) (*bureau.ObligationResponse, error) {
	out := new(bureau.ObligationResponse)
	err := c.cc.Invoke(ctx, "/service.bureau/getObligationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bureauClient) GetColendingDBR(ctx context.Context, in *bureau.DbrRequest, opts ...grpc.CallOption) (*bureau.DbrResponse, error) {
	out := new(bureau.DbrResponse)
	err := c.cc.Invoke(ctx, "/service.bureau/getColendingDBR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bureauClient) GetCibilWebToken(ctx context.Context, in *bureau.WebTokenRequest, opts ...grpc.CallOption) (*bureau.WebTokenResponse, error) {
	out := new(bureau.WebTokenResponse)
	err := c.cc.Invoke(ctx, "/service.bureau/getCibilWebToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BureauServer is the server API for Bureau service.
// All implementations must embed UnimplementedBureauServer
// for forward compatibility
type BureauServer interface {
	GetBasicDetails(context.Context, *bureau.DetailsRequest) (*bureau.DetailsResponse, error)
	GetReport(context.Context, *bureau.BureauRequest) (*bureau.BureauResponse, error)
	GetDemogs(context.Context, *bureau.DemogsRequest) (*bureau.DemogsResponse, error)
	GetObligationData(context.Context, *bureau.ObligationRequest) (*bureau.ObligationResponse, error)
	GetColendingDBR(context.Context, *bureau.DbrRequest) (*bureau.DbrResponse, error)
	GetCibilWebToken(context.Context, *bureau.WebTokenRequest) (*bureau.WebTokenResponse, error)
	mustEmbedUnimplementedBureauServer()
}

// UnimplementedBureauServer must be embedded to have forward compatible implementations.
type UnimplementedBureauServer struct {
}

func (UnimplementedBureauServer) GetBasicDetails(context.Context, *bureau.DetailsRequest) (*bureau.DetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicDetails not implemented")
}
func (UnimplementedBureauServer) GetReport(context.Context, *bureau.BureauRequest) (*bureau.BureauResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedBureauServer) GetDemogs(context.Context, *bureau.DemogsRequest) (*bureau.DemogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemogs not implemented")
}
func (UnimplementedBureauServer) GetObligationData(context.Context, *bureau.ObligationRequest) (*bureau.ObligationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObligationData not implemented")
}
func (UnimplementedBureauServer) GetColendingDBR(context.Context, *bureau.DbrRequest) (*bureau.DbrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColendingDBR not implemented")
}
func (UnimplementedBureauServer) GetCibilWebToken(context.Context, *bureau.WebTokenRequest) (*bureau.WebTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCibilWebToken not implemented")
}
func (UnimplementedBureauServer) mustEmbedUnimplementedBureauServer() {}

// UnsafeBureauServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BureauServer will
// result in compilation errors.
type UnsafeBureauServer interface {
	mustEmbedUnimplementedBureauServer()
}

func RegisterBureauServer(s grpc.ServiceRegistrar, srv BureauServer) {
	s.RegisterService(&Bureau_ServiceDesc, srv)
}

func _Bureau_GetBasicDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bureau.DetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BureauServer).GetBasicDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.bureau/getBasicDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BureauServer).GetBasicDetails(ctx, req.(*bureau.DetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bureau_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bureau.BureauRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BureauServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.bureau/getReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BureauServer).GetReport(ctx, req.(*bureau.BureauRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bureau_GetDemogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bureau.DemogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BureauServer).GetDemogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.bureau/getDemogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BureauServer).GetDemogs(ctx, req.(*bureau.DemogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bureau_GetObligationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bureau.ObligationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BureauServer).GetObligationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.bureau/getObligationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BureauServer).GetObligationData(ctx, req.(*bureau.ObligationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bureau_GetColendingDBR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bureau.DbrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BureauServer).GetColendingDBR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.bureau/getColendingDBR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BureauServer).GetColendingDBR(ctx, req.(*bureau.DbrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bureau_GetCibilWebToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bureau.WebTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BureauServer).GetCibilWebToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.bureau/getCibilWebToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BureauServer).GetCibilWebToken(ctx, req.(*bureau.WebTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bureau_ServiceDesc is the grpc.ServiceDesc for Bureau service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bureau_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.bureau",
	HandlerType: (*BureauServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBasicDetails",
			Handler:    _Bureau_GetBasicDetails_Handler,
		},
		{
			MethodName: "getReport",
			Handler:    _Bureau_GetReport_Handler,
		},
		{
			MethodName: "getDemogs",
			Handler:    _Bureau_GetDemogs_Handler,
		},
		{
			MethodName: "getObligationData",
			Handler:    _Bureau_GetObligationData_Handler,
		},
		{
			MethodName: "getColendingDBR",
			Handler:    _Bureau_GetColendingDBR_Handler,
		},
		{
			MethodName: "getCibilWebToken",
			Handler:    _Bureau_GetCibilWebToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bureau.proto",
}
