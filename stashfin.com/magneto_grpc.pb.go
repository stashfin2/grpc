// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: magneto.proto

package stashfin_com

import (
	context "context"
	magneto "github.com/stashfin2/grpc/stashfin.com/magneto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Magneto_NotifyInsurancePayment_FullMethodName = "/service.magneto/notifyInsurancePayment"
)

// MagnetoClient is the client API for Magneto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MagnetoClient interface {
	NotifyInsurancePayment(ctx context.Context, in *magneto.NotifyInsurancePaymentRequest, opts ...grpc.CallOption) (*magneto.NotifyInsurancePaymentResponse, error)
}

type magnetoClient struct {
	cc grpc.ClientConnInterface
}

func NewMagnetoClient(cc grpc.ClientConnInterface) MagnetoClient {
	return &magnetoClient{cc}
}

func (c *magnetoClient) NotifyInsurancePayment(ctx context.Context, in *magneto.NotifyInsurancePaymentRequest, opts ...grpc.CallOption) (*magneto.NotifyInsurancePaymentResponse, error) {
	out := new(magneto.NotifyInsurancePaymentResponse)
	err := c.cc.Invoke(ctx, Magneto_NotifyInsurancePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagnetoServer is the server API for Magneto service.
// All implementations must embed UnimplementedMagnetoServer
// for forward compatibility
type MagnetoServer interface {
	NotifyInsurancePayment(context.Context, *magneto.NotifyInsurancePaymentRequest) (*magneto.NotifyInsurancePaymentResponse, error)
	mustEmbedUnimplementedMagnetoServer()
}

// UnimplementedMagnetoServer must be embedded to have forward compatible implementations.
type UnimplementedMagnetoServer struct {
}

func (UnimplementedMagnetoServer) NotifyInsurancePayment(context.Context, *magneto.NotifyInsurancePaymentRequest) (*magneto.NotifyInsurancePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyInsurancePayment not implemented")
}
func (UnimplementedMagnetoServer) mustEmbedUnimplementedMagnetoServer() {}

// UnsafeMagnetoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MagnetoServer will
// result in compilation errors.
type UnsafeMagnetoServer interface {
	mustEmbedUnimplementedMagnetoServer()
}

func RegisterMagnetoServer(s grpc.ServiceRegistrar, srv MagnetoServer) {
	s.RegisterService(&Magneto_ServiceDesc, srv)
}

func _Magneto_NotifyInsurancePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(magneto.NotifyInsurancePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetoServer).NotifyInsurancePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Magneto_NotifyInsurancePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetoServer).NotifyInsurancePayment(ctx, req.(*magneto.NotifyInsurancePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Magneto_ServiceDesc is the grpc.ServiceDesc for Magneto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Magneto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.magneto",
	HandlerType: (*MagnetoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notifyInsurancePayment",
			Handler:    _Magneto_NotifyInsurancePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magneto.proto",
}
