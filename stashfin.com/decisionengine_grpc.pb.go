// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: decisionengine.proto

package stashfin_com

import (
	context "context"
	decisionengine "github.com/stashfin2/grpc/stashfin.com/decisionengine"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DecisionEngineClient is the client API for DecisionEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecisionEngineClient interface {
	ValidateLocDisbursal(ctx context.Context, in *decisionengine.ValidateDisbursalRequest, opts ...grpc.CallOption) (*decisionengine.ValidateDisbursalResponse, error)
	DecisionEngineTrigger(ctx context.Context, in *decisionengine.DecisionEngineTriggerRequest, opts ...grpc.CallOption) (*decisionengine.DecisionEngineTriggerResponse, error)
	SaveConsent(ctx context.Context, in *decisionengine.SaveConsentRequest, opts ...grpc.CallOption) (*decisionengine.SaveConsentResponse, error)
}

type decisionEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewDecisionEngineClient(cc grpc.ClientConnInterface) DecisionEngineClient {
	return &decisionEngineClient{cc}
}

func (c *decisionEngineClient) ValidateLocDisbursal(ctx context.Context, in *decisionengine.ValidateDisbursalRequest, opts ...grpc.CallOption) (*decisionengine.ValidateDisbursalResponse, error) {
	out := new(decisionengine.ValidateDisbursalResponse)
	err := c.cc.Invoke(ctx, "/service.decision_engine/validateLocDisbursal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionEngineClient) DecisionEngineTrigger(ctx context.Context, in *decisionengine.DecisionEngineTriggerRequest, opts ...grpc.CallOption) (*decisionengine.DecisionEngineTriggerResponse, error) {
	out := new(decisionengine.DecisionEngineTriggerResponse)
	err := c.cc.Invoke(ctx, "/service.decision_engine/decisionEngineTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *decisionEngineClient) SaveConsent(ctx context.Context, in *decisionengine.SaveConsentRequest, opts ...grpc.CallOption) (*decisionengine.SaveConsentResponse, error) {
	out := new(decisionengine.SaveConsentResponse)
	err := c.cc.Invoke(ctx, "/service.decision_engine/saveConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecisionEngineServer is the server API for DecisionEngine service.
// All implementations must embed UnimplementedDecisionEngineServer
// for forward compatibility
type DecisionEngineServer interface {
	ValidateLocDisbursal(context.Context, *decisionengine.ValidateDisbursalRequest) (*decisionengine.ValidateDisbursalResponse, error)
	DecisionEngineTrigger(context.Context, *decisionengine.DecisionEngineTriggerRequest) (*decisionengine.DecisionEngineTriggerResponse, error)
	SaveConsent(context.Context, *decisionengine.SaveConsentRequest) (*decisionengine.SaveConsentResponse, error)
	mustEmbedUnimplementedDecisionEngineServer()
}

// UnimplementedDecisionEngineServer must be embedded to have forward compatible implementations.
type UnimplementedDecisionEngineServer struct {
}

func (UnimplementedDecisionEngineServer) ValidateLocDisbursal(context.Context, *decisionengine.ValidateDisbursalRequest) (*decisionengine.ValidateDisbursalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateLocDisbursal not implemented")
}
func (UnimplementedDecisionEngineServer) DecisionEngineTrigger(context.Context, *decisionengine.DecisionEngineTriggerRequest) (*decisionengine.DecisionEngineTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionEngineTrigger not implemented")
}
func (UnimplementedDecisionEngineServer) SaveConsent(context.Context, *decisionengine.SaveConsentRequest) (*decisionengine.SaveConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConsent not implemented")
}
func (UnimplementedDecisionEngineServer) mustEmbedUnimplementedDecisionEngineServer() {}

// UnsafeDecisionEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecisionEngineServer will
// result in compilation errors.
type UnsafeDecisionEngineServer interface {
	mustEmbedUnimplementedDecisionEngineServer()
}

func RegisterDecisionEngineServer(s grpc.ServiceRegistrar, srv DecisionEngineServer) {
	s.RegisterService(&DecisionEngine_ServiceDesc, srv)
}

func _DecisionEngine_ValidateLocDisbursal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(decisionengine.ValidateDisbursalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionEngineServer).ValidateLocDisbursal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.decision_engine/validateLocDisbursal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionEngineServer).ValidateLocDisbursal(ctx, req.(*decisionengine.ValidateDisbursalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionEngine_DecisionEngineTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(decisionengine.DecisionEngineTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionEngineServer).DecisionEngineTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.decision_engine/decisionEngineTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionEngineServer).DecisionEngineTrigger(ctx, req.(*decisionengine.DecisionEngineTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DecisionEngine_SaveConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(decisionengine.SaveConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecisionEngineServer).SaveConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.decision_engine/saveConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecisionEngineServer).SaveConsent(ctx, req.(*decisionengine.SaveConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DecisionEngine_ServiceDesc is the grpc.ServiceDesc for DecisionEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecisionEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.decision_engine",
	HandlerType: (*DecisionEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "validateLocDisbursal",
			Handler:    _DecisionEngine_ValidateLocDisbursal_Handler,
		},
		{
			MethodName: "decisionEngineTrigger",
			Handler:    _DecisionEngine_DecisionEngineTrigger_Handler,
		},
		{
			MethodName: "saveConsent",
			Handler:    _DecisionEngine_SaveConsent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "decisionengine.proto",
}
