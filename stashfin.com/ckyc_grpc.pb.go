// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: ckyc.proto

package stashfin_com

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	ckyc "stashfin.com/ckyc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CkycClient is the client API for Ckyc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CkycClient interface {
	CkycSearch(ctx context.Context, in *ckyc.CkycSearchRequest, opts ...grpc.CallOption) (*ckyc.CkycSearchResponse, error)
	CkycDownload(ctx context.Context, in *ckyc.CkycDownloadRequest, opts ...grpc.CallOption) (*ckyc.CkycDownloadResponse, error)
}

type ckycClient struct {
	cc grpc.ClientConnInterface
}

func NewCkycClient(cc grpc.ClientConnInterface) CkycClient {
	return &ckycClient{cc}
}

func (c *ckycClient) CkycSearch(ctx context.Context, in *ckyc.CkycSearchRequest, opts ...grpc.CallOption) (*ckyc.CkycSearchResponse, error) {
	out := new(ckyc.CkycSearchResponse)
	err := c.cc.Invoke(ctx, "/service.ckyc/ckycSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ckycClient) CkycDownload(ctx context.Context, in *ckyc.CkycDownloadRequest, opts ...grpc.CallOption) (*ckyc.CkycDownloadResponse, error) {
	out := new(ckyc.CkycDownloadResponse)
	err := c.cc.Invoke(ctx, "/service.ckyc/ckycDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CkycServer is the server API for Ckyc service.
// All implementations must embed UnimplementedCkycServer
// for forward compatibility
type CkycServer interface {
	CkycSearch(context.Context, *ckyc.CkycSearchRequest) (*ckyc.CkycSearchResponse, error)
	CkycDownload(context.Context, *ckyc.CkycDownloadRequest) (*ckyc.CkycDownloadResponse, error)
	mustEmbedUnimplementedCkycServer()
}

// UnimplementedCkycServer must be embedded to have forward compatible implementations.
type UnimplementedCkycServer struct {
}

func (UnimplementedCkycServer) CkycSearch(context.Context, *ckyc.CkycSearchRequest) (*ckyc.CkycSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CkycSearch not implemented")
}
func (UnimplementedCkycServer) CkycDownload(context.Context, *ckyc.CkycDownloadRequest) (*ckyc.CkycDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CkycDownload not implemented")
}
func (UnimplementedCkycServer) mustEmbedUnimplementedCkycServer() {}

// UnsafeCkycServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CkycServer will
// result in compilation errors.
type UnsafeCkycServer interface {
	mustEmbedUnimplementedCkycServer()
}

func RegisterCkycServer(s grpc.ServiceRegistrar, srv CkycServer) {
	s.RegisterService(&Ckyc_ServiceDesc, srv)
}

func _Ckyc_CkycSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ckyc.CkycSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CkycServer).CkycSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ckyc/ckycSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CkycServer).CkycSearch(ctx, req.(*ckyc.CkycSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ckyc_CkycDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ckyc.CkycDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CkycServer).CkycDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ckyc/ckycDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CkycServer).CkycDownload(ctx, req.(*ckyc.CkycDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ckyc_ServiceDesc is the grpc.ServiceDesc for Ckyc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ckyc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ckyc",
	HandlerType: (*CkycServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ckycSearch",
			Handler:    _Ckyc_CkycSearch_Handler,
		},
		{
			MethodName: "ckycDownload",
			Handler:    _Ckyc_CkycDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ckyc.proto",
}
