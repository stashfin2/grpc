// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.6
// source: customers/getcustomerbyid.proto

package customers

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCustomerByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId int32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerByIdRequest) Reset() {
	*x = GetCustomerByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customers_getcustomerbyid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerByIdRequest) ProtoMessage() {}

func (x *GetCustomerByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customers_getcustomerbyid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerByIdRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerByIdRequest) Descriptor() ([]byte, []int) {
	return file_customers_getcustomerbyid_proto_rawDescGZIP(), []int{0}
}

func (x *GetCustomerByIdRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type GetCustomerByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile              string            `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email               string            `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FirstName           string            `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName          string            `protobuf:"bytes,4,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	LastName            string            `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	FatherName          string            `protobuf:"bytes,6,opt,name=father_name,json=fatherName,proto3" json:"father_name,omitempty"`
	MotherMaidenName    string            `protobuf:"bytes,7,opt,name=mother_maiden_name,json=motherMaidenName,proto3" json:"mother_maiden_name,omitempty"`
	Dob                 string            `protobuf:"bytes,8,opt,name=dob,proto3" json:"dob,omitempty"`
	CompanyName         string            `protobuf:"bytes,9,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	OfficialEmail       string            `protobuf:"bytes,10,opt,name=official_email,json=officialEmail,proto3" json:"official_email,omitempty"`
	Pincode             string            `protobuf:"bytes,11,opt,name=pincode,proto3" json:"pincode,omitempty"`
	BankDetails         *BankDetails      `protobuf:"bytes,12,opt,name=bank_details,json=bankDetails,proto3,oneof" json:"bank_details,omitempty"`
	Pan                 *string           `protobuf:"bytes,13,opt,name=pan,proto3,oneof" json:"pan,omitempty"`
	Aadhaar             *string           `protobuf:"bytes,14,opt,name=aadhaar,proto3,oneof" json:"aadhaar,omitempty"`
	MobileVerified      *int32            `protobuf:"varint,15,opt,name=mobile_verified,json=mobileVerified,proto3,oneof" json:"mobile_verified,omitempty"`
	EmailVerified       *int32            `protobuf:"varint,16,opt,name=email_verified,json=emailVerified,proto3,oneof" json:"email_verified,omitempty"`
	Ip                  *string           `protobuf:"bytes,17,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	DeviceId            *string           `protobuf:"bytes,18,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
	IsRegistered        *int32            `protobuf:"varint,19,opt,name=is_registered,json=isRegistered,proto3,oneof" json:"is_registered,omitempty"`
	MobileNetwork       *string           `protobuf:"bytes,20,opt,name=mobile_network,json=mobileNetwork,proto3,oneof" json:"mobile_network,omitempty"`
	OsVersion           *string           `protobuf:"bytes,21,opt,name=os_version,json=osVersion,proto3,oneof" json:"os_version,omitempty"`
	PushId              *string           `protobuf:"bytes,22,opt,name=push_id,json=pushId,proto3,oneof" json:"push_id,omitempty"`
	State               *string           `protobuf:"bytes,23,opt,name=state,proto3,oneof" json:"state,omitempty"`
	AppVersion          *string           `protobuf:"bytes,24,opt,name=app_version,json=appVersion,proto3,oneof" json:"app_version,omitempty"`
	BiometricEnabled    *bool             `protobuf:"varint,25,opt,name=biometric_enabled,json=biometricEnabled,proto3,oneof" json:"biometric_enabled,omitempty"`
	Category            *string           `protobuf:"bytes,27,opt,name=category,proto3,oneof" json:"category,omitempty"`
	LocLimit            *float32          `protobuf:"fixed32,28,opt,name=loc_limit,json=locLimit,proto3,oneof" json:"loc_limit,omitempty"`
	Status              *string           `protobuf:"bytes,29,opt,name=status,proto3,oneof" json:"status,omitempty"`
	LocDisabled         *bool             `protobuf:"varint,30,opt,name=loc_disabled,json=locDisabled,proto3,oneof" json:"loc_disabled,omitempty"`
	Source              *string           `protobuf:"bytes,31,opt,name=source,proto3,oneof" json:"source,omitempty"`
	TncVersion          *string           `protobuf:"bytes,32,opt,name=tnc_version,json=tncVersion,proto3,oneof" json:"tnc_version,omitempty"`
	LoginDate           *string           `protobuf:"bytes,33,opt,name=login_date,json=loginDate,proto3,oneof" json:"login_date,omitempty"`
	MinTenure           *int32            `protobuf:"varint,34,opt,name=min_tenure,json=minTenure,proto3,oneof" json:"min_tenure,omitempty"`
	MaxTenure           *int32            `protobuf:"varint,35,opt,name=max_tenure,json=maxTenure,proto3,oneof" json:"max_tenure,omitempty"`
	Roi                 *float32          `protobuf:"fixed32,36,opt,name=roi,proto3,oneof" json:"roi,omitempty"`
	ProcessingRate      *float32          `protobuf:"fixed32,37,opt,name=processing_rate,json=processingRate,proto3,oneof" json:"processing_rate,omitempty"`
	AgentId             *int32            `protobuf:"varint,38,opt,name=agent_id,json=agentId,proto3,oneof" json:"agent_id,omitempty"`
	ApplicationType     *string           `protobuf:"bytes,39,opt,name=application_type,json=applicationType,proto3,oneof" json:"application_type,omitempty"`
	ApplicationStatus   *string           `protobuf:"bytes,40,opt,name=application_status,json=applicationStatus,proto3,oneof" json:"application_status,omitempty"`
	CustomerType        *string           `protobuf:"bytes,41,opt,name=customer_type,json=customerType,proto3,oneof" json:"customer_type,omitempty"`
	AvgSalary           *float32          `protobuf:"fixed32,42,opt,name=avg_salary,json=avgSalary,proto3,oneof" json:"avg_salary,omitempty"`
	SuspendedApps       *int32            `protobuf:"varint,43,opt,name=suspended_apps,json=suspendedApps,proto3,oneof" json:"suspended_apps,omitempty"`
	IsActive            *int32            `protobuf:"varint,44,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	IsDeleted           *int32            `protobuf:"varint,45,opt,name=is_deleted,json=isDeleted,proto3,oneof" json:"is_deleted,omitempty"`
	JourneyUpdatedAt    *string           `protobuf:"bytes,46,opt,name=journey_updated_at,json=journeyUpdatedAt,proto3,oneof" json:"journey_updated_at,omitempty"`
	AadhaarName         *string           `protobuf:"bytes,47,opt,name=aadhaar_name,json=aadhaarName,proto3,oneof" json:"aadhaar_name,omitempty"`
	Crn                 *string           `protobuf:"bytes,48,opt,name=crn,proto3,oneof" json:"crn,omitempty"`
	Gender              *string           `protobuf:"bytes,49,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	GstNo               *string           `protobuf:"bytes,50,opt,name=gst_no,json=gstNo,proto3,oneof" json:"gst_no,omitempty"`
	Language            *string           `protobuf:"bytes,51,opt,name=language,proto3,oneof" json:"language,omitempty"`
	Latitude            *float32          `protobuf:"fixed32,52,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`
	Longitude           *float32          `protobuf:"fixed32,53,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`
	MaritalStatus       *string           `protobuf:"bytes,54,opt,name=marital_status,json=maritalStatus,proto3,oneof" json:"marital_status,omitempty"`
	Occupation          *string           `protobuf:"bytes,55,opt,name=occupation,proto3,oneof" json:"occupation,omitempty"`
	OfficeAddr          *CustomerAddress  `protobuf:"bytes,56,opt,name=office_addr,json=officeAddr,proto3,oneof" json:"office_addr,omitempty"`
	Organization        *string           `protobuf:"bytes,57,opt,name=organization,proto3,oneof" json:"organization,omitempty"`
	PanUrl              *string           `protobuf:"bytes,58,opt,name=pan_url,json=panUrl,proto3,oneof" json:"pan_url,omitempty"`
	PerAddr             *CustomerAddress  `protobuf:"bytes,59,opt,name=per_addr,json=perAddr,proto3,oneof" json:"per_addr,omitempty"`
	ResAddr             *CustomerAddress  `protobuf:"bytes,60,opt,name=res_addr,json=resAddr,proto3,oneof" json:"res_addr,omitempty"`
	Salary              *float32          `protobuf:"fixed32,61,opt,name=salary,proto3,oneof" json:"salary,omitempty"`
	SalaryDate          *string           `protobuf:"bytes,62,opt,name=salary_date,json=salaryDate,proto3,oneof" json:"salary_date,omitempty"`
	SalaryMode          *string           `protobuf:"bytes,63,opt,name=salary_mode,json=salaryMode,proto3,oneof" json:"salary_mode,omitempty"`
	SelfieUrl           *string           `protobuf:"bytes,64,opt,name=selfie_url,json=selfieUrl,proto3,oneof" json:"selfie_url,omitempty"`
	KycType             *string           `protobuf:"bytes,65,opt,name=kyc_type,json=kycType,proto3,oneof" json:"kyc_type,omitempty"`
	EmiDate             *int32            `protobuf:"varint,66,opt,name=emi_date,json=emiDate,proto3,oneof" json:"emi_date,omitempty"`
	PhoneMatched        *int32            `protobuf:"varint,67,opt,name=phone_matched,json=phoneMatched,proto3,oneof" json:"phone_matched,omitempty"`
	DobMatched          *int32            `protobuf:"varint,68,opt,name=dob_matched,json=dobMatched,proto3,oneof" json:"dob_matched,omitempty"`
	NsdlDobMatched      *int32            `protobuf:"varint,69,opt,name=nsdl_dob_matched,json=nsdlDobMatched,proto3,oneof" json:"nsdl_dob_matched,omitempty"`
	OkycDob             *string           `protobuf:"bytes,70,opt,name=okyc_dob,json=okycDob,proto3,oneof" json:"okyc_dob,omitempty"`
	DobAttempts         *int32            `protobuf:"varint,71,opt,name=dob_attempts,json=dobAttempts,proto3,oneof" json:"dob_attempts,omitempty"`
	CliEnabled          *int32            `protobuf:"varint,72,opt,name=cli_enabled,json=cliEnabled,proto3,oneof" json:"cli_enabled,omitempty"`
	HasImps             *int32            `protobuf:"varint,73,opt,name=has_imps,json=hasImps,proto3,oneof" json:"has_imps,omitempty"`
	JourneyInactive     *int32            `protobuf:"varint,74,opt,name=journey_inactive,json=journeyInactive,proto3,oneof" json:"journey_inactive,omitempty"`
	RepeatJourney       *int32            `protobuf:"varint,75,opt,name=repeat_journey,json=repeatJourney,proto3,oneof" json:"repeat_journey,omitempty"`
	TxnRate             *float32          `protobuf:"fixed32,76,opt,name=txn_rate,json=txnRate,proto3,oneof" json:"txn_rate,omitempty"`
	CustomerId          int64             `protobuf:"varint,77,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	IsFcpEnabled        bool              `protobuf:"varint,78,opt,name=is_fcp_enabled,json=isFcpEnabled,proto3" json:"is_fcp_enabled,omitempty"`
	LeadStatus          string            `protobuf:"bytes,79,opt,name=lead_status,json=leadStatus,proto3" json:"lead_status,omitempty"`
	ProductCode         string            `protobuf:"bytes,80,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	JourneyCompleted    string            `protobuf:"bytes,81,opt,name=journey_completed,json=journeyCompleted,proto3" json:"journey_completed,omitempty"`
	JourneyStatus       string            `protobuf:"bytes,82,opt,name=journey_status,json=journeyStatus,proto3" json:"journey_status,omitempty"`
	JourneySequence     string            `protobuf:"bytes,83,opt,name=journey_sequence,json=journeySequence,proto3" json:"journey_sequence,omitempty"`
	VaNumber            string            `protobuf:"bytes,84,opt,name=va_number,json=vaNumber,proto3" json:"va_number,omitempty"`
	SanctionedAmount    float32           `protobuf:"fixed32,85,opt,name=sanctioned_amount,json=sanctionedAmount,proto3" json:"sanctioned_amount,omitempty"`
	LimitOption         string            `protobuf:"bytes,86,opt,name=limit_option,json=limitOption,proto3" json:"limit_option,omitempty"`
	MaxLocLimit         *float32          `protobuf:"fixed32,87,opt,name=max_loc_limit,json=maxLocLimit,proto3,oneof" json:"max_loc_limit,omitempty"`
	EnachAmount         float32           `protobuf:"fixed32,88,opt,name=enach_amount,json=enachAmount,proto3" json:"enach_amount,omitempty"`
	NewSanctionedLimit  float32           `protobuf:"fixed32,89,opt,name=new_sanctioned_limit,json=newSanctionedLimit,proto3" json:"new_sanctioned_limit,omitempty"`
	BannerSequence      map[string]string `protobuf:"bytes,90,rep,name=banner_sequence,json=bannerSequence,proto3" json:"banner_sequence,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BannerJourneyStatus map[string]string `protobuf:"bytes,91,rep,name=banner_journey_status,json=bannerJourneyStatus,proto3" json:"banner_journey_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BannerLeadStatus    map[string]string `protobuf:"bytes,92,rep,name=banner_lead_status,json=bannerLeadStatus,proto3" json:"banner_lead_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt           string            `protobuf:"bytes,93,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetCustomerByIdResponse) Reset() {
	*x = GetCustomerByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customers_getcustomerbyid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerByIdResponse) ProtoMessage() {}

func (x *GetCustomerByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customers_getcustomerbyid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerByIdResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerByIdResponse) Descriptor() ([]byte, []int) {
	return file_customers_getcustomerbyid_proto_rawDescGZIP(), []int{1}
}

func (x *GetCustomerByIdResponse) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetFatherName() string {
	if x != nil {
		return x.FatherName
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetMotherMaidenName() string {
	if x != nil {
		return x.MotherMaidenName
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetOfficialEmail() string {
	if x != nil {
		return x.OfficialEmail
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetPincode() string {
	if x != nil {
		return x.Pincode
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetBankDetails() *BankDetails {
	if x != nil {
		return x.BankDetails
	}
	return nil
}

func (x *GetCustomerByIdResponse) GetPan() string {
	if x != nil && x.Pan != nil {
		return *x.Pan
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetAadhaar() string {
	if x != nil && x.Aadhaar != nil {
		return *x.Aadhaar
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetMobileVerified() int32 {
	if x != nil && x.MobileVerified != nil {
		return *x.MobileVerified
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetEmailVerified() int32 {
	if x != nil && x.EmailVerified != nil {
		return *x.EmailVerified
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetIsRegistered() int32 {
	if x != nil && x.IsRegistered != nil {
		return *x.IsRegistered
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetMobileNetwork() string {
	if x != nil && x.MobileNetwork != nil {
		return *x.MobileNetwork
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetPushId() string {
	if x != nil && x.PushId != nil {
		return *x.PushId
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetBiometricEnabled() bool {
	if x != nil && x.BiometricEnabled != nil {
		return *x.BiometricEnabled
	}
	return false
}

func (x *GetCustomerByIdResponse) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetLocLimit() float32 {
	if x != nil && x.LocLimit != nil {
		return *x.LocLimit
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetLocDisabled() bool {
	if x != nil && x.LocDisabled != nil {
		return *x.LocDisabled
	}
	return false
}

func (x *GetCustomerByIdResponse) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetTncVersion() string {
	if x != nil && x.TncVersion != nil {
		return *x.TncVersion
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetLoginDate() string {
	if x != nil && x.LoginDate != nil {
		return *x.LoginDate
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetMinTenure() int32 {
	if x != nil && x.MinTenure != nil {
		return *x.MinTenure
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetMaxTenure() int32 {
	if x != nil && x.MaxTenure != nil {
		return *x.MaxTenure
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetRoi() float32 {
	if x != nil && x.Roi != nil {
		return *x.Roi
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetProcessingRate() float32 {
	if x != nil && x.ProcessingRate != nil {
		return *x.ProcessingRate
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetAgentId() int32 {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetApplicationType() string {
	if x != nil && x.ApplicationType != nil {
		return *x.ApplicationType
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetApplicationStatus() string {
	if x != nil && x.ApplicationStatus != nil {
		return *x.ApplicationStatus
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetCustomerType() string {
	if x != nil && x.CustomerType != nil {
		return *x.CustomerType
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetAvgSalary() float32 {
	if x != nil && x.AvgSalary != nil {
		return *x.AvgSalary
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetSuspendedApps() int32 {
	if x != nil && x.SuspendedApps != nil {
		return *x.SuspendedApps
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetIsActive() int32 {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetIsDeleted() int32 {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetJourneyUpdatedAt() string {
	if x != nil && x.JourneyUpdatedAt != nil {
		return *x.JourneyUpdatedAt
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetAadhaarName() string {
	if x != nil && x.AadhaarName != nil {
		return *x.AadhaarName
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetCrn() string {
	if x != nil && x.Crn != nil {
		return *x.Crn
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetGstNo() string {
	if x != nil && x.GstNo != nil {
		return *x.GstNo
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetMaritalStatus() string {
	if x != nil && x.MaritalStatus != nil {
		return *x.MaritalStatus
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetOccupation() string {
	if x != nil && x.Occupation != nil {
		return *x.Occupation
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetOfficeAddr() *CustomerAddress {
	if x != nil {
		return x.OfficeAddr
	}
	return nil
}

func (x *GetCustomerByIdResponse) GetOrganization() string {
	if x != nil && x.Organization != nil {
		return *x.Organization
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetPanUrl() string {
	if x != nil && x.PanUrl != nil {
		return *x.PanUrl
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetPerAddr() *CustomerAddress {
	if x != nil {
		return x.PerAddr
	}
	return nil
}

func (x *GetCustomerByIdResponse) GetResAddr() *CustomerAddress {
	if x != nil {
		return x.ResAddr
	}
	return nil
}

func (x *GetCustomerByIdResponse) GetSalary() float32 {
	if x != nil && x.Salary != nil {
		return *x.Salary
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetSalaryDate() string {
	if x != nil && x.SalaryDate != nil {
		return *x.SalaryDate
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetSalaryMode() string {
	if x != nil && x.SalaryMode != nil {
		return *x.SalaryMode
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetSelfieUrl() string {
	if x != nil && x.SelfieUrl != nil {
		return *x.SelfieUrl
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetKycType() string {
	if x != nil && x.KycType != nil {
		return *x.KycType
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetEmiDate() int32 {
	if x != nil && x.EmiDate != nil {
		return *x.EmiDate
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetPhoneMatched() int32 {
	if x != nil && x.PhoneMatched != nil {
		return *x.PhoneMatched
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetDobMatched() int32 {
	if x != nil && x.DobMatched != nil {
		return *x.DobMatched
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetNsdlDobMatched() int32 {
	if x != nil && x.NsdlDobMatched != nil {
		return *x.NsdlDobMatched
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetOkycDob() string {
	if x != nil && x.OkycDob != nil {
		return *x.OkycDob
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetDobAttempts() int32 {
	if x != nil && x.DobAttempts != nil {
		return *x.DobAttempts
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetCliEnabled() int32 {
	if x != nil && x.CliEnabled != nil {
		return *x.CliEnabled
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetHasImps() int32 {
	if x != nil && x.HasImps != nil {
		return *x.HasImps
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetJourneyInactive() int32 {
	if x != nil && x.JourneyInactive != nil {
		return *x.JourneyInactive
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetRepeatJourney() int32 {
	if x != nil && x.RepeatJourney != nil {
		return *x.RepeatJourney
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetTxnRate() float32 {
	if x != nil && x.TxnRate != nil {
		return *x.TxnRate
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetIsFcpEnabled() bool {
	if x != nil {
		return x.IsFcpEnabled
	}
	return false
}

func (x *GetCustomerByIdResponse) GetLeadStatus() string {
	if x != nil {
		return x.LeadStatus
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetJourneyCompleted() string {
	if x != nil {
		return x.JourneyCompleted
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetJourneyStatus() string {
	if x != nil {
		return x.JourneyStatus
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetJourneySequence() string {
	if x != nil {
		return x.JourneySequence
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetVaNumber() string {
	if x != nil {
		return x.VaNumber
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetSanctionedAmount() float32 {
	if x != nil {
		return x.SanctionedAmount
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetLimitOption() string {
	if x != nil {
		return x.LimitOption
	}
	return ""
}

func (x *GetCustomerByIdResponse) GetMaxLocLimit() float32 {
	if x != nil && x.MaxLocLimit != nil {
		return *x.MaxLocLimit
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetEnachAmount() float32 {
	if x != nil {
		return x.EnachAmount
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetNewSanctionedLimit() float32 {
	if x != nil {
		return x.NewSanctionedLimit
	}
	return 0
}

func (x *GetCustomerByIdResponse) GetBannerSequence() map[string]string {
	if x != nil {
		return x.BannerSequence
	}
	return nil
}

func (x *GetCustomerByIdResponse) GetBannerJourneyStatus() map[string]string {
	if x != nil {
		return x.BannerJourneyStatus
	}
	return nil
}

func (x *GetCustomerByIdResponse) GetBannerLeadStatus() map[string]string {
	if x != nil {
		return x.BannerLeadStatus
	}
	return nil
}

func (x *GetCustomerByIdResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type CustomerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HouseFlatNo   *string `protobuf:"bytes,1,opt,name=house_flat_no,json=houseFlatNo,proto3,oneof" json:"house_flat_no,omitempty"`
	AddressLine_1 *string `protobuf:"bytes,2,opt,name=address_line_1,json=addressLine1,proto3,oneof" json:"address_line_1,omitempty"`
	AddressLine_2 *string `protobuf:"bytes,3,opt,name=address_line_2,json=addressLine2,proto3,oneof" json:"address_line_2,omitempty"`
	Landmark      *string `protobuf:"bytes,4,opt,name=landmark,proto3,oneof" json:"landmark,omitempty"`
	City          *string `protobuf:"bytes,5,opt,name=city,proto3,oneof" json:"city,omitempty"`
	State         *string `protobuf:"bytes,6,opt,name=state,proto3,oneof" json:"state,omitempty"`
	PinCode       *string `protobuf:"bytes,7,opt,name=pin_code,json=pinCode,proto3,oneof" json:"pin_code,omitempty"`
}

func (x *CustomerAddress) Reset() {
	*x = CustomerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customers_getcustomerbyid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAddress) ProtoMessage() {}

func (x *CustomerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_customers_getcustomerbyid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAddress.ProtoReflect.Descriptor instead.
func (*CustomerAddress) Descriptor() ([]byte, []int) {
	return file_customers_getcustomerbyid_proto_rawDescGZIP(), []int{2}
}

func (x *CustomerAddress) GetHouseFlatNo() string {
	if x != nil && x.HouseFlatNo != nil {
		return *x.HouseFlatNo
	}
	return ""
}

func (x *CustomerAddress) GetAddressLine_1() string {
	if x != nil && x.AddressLine_1 != nil {
		return *x.AddressLine_1
	}
	return ""
}

func (x *CustomerAddress) GetAddressLine_2() string {
	if x != nil && x.AddressLine_2 != nil {
		return *x.AddressLine_2
	}
	return ""
}

func (x *CustomerAddress) GetLandmark() string {
	if x != nil && x.Landmark != nil {
		return *x.Landmark
	}
	return ""
}

func (x *CustomerAddress) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *CustomerAddress) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CustomerAddress) GetPinCode() string {
	if x != nil && x.PinCode != nil {
		return *x.PinCode
	}
	return ""
}

type BankDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankId        *int32  `protobuf:"varint,1,opt,name=bank_id,json=bankId,proto3,oneof" json:"bank_id,omitempty"`
	BankName      *string `protobuf:"bytes,2,opt,name=bank_name,json=bankName,proto3,oneof" json:"bank_name,omitempty"`
	AccountNumber *string `protobuf:"bytes,3,opt,name=account_number,json=accountNumber,proto3,oneof" json:"account_number,omitempty"`
	IfscCode      *string `protobuf:"bytes,4,opt,name=ifsc_code,json=ifscCode,proto3,oneof" json:"ifsc_code,omitempty"`
	HolderName    *string `protobuf:"bytes,5,opt,name=holder_name,json=holderName,proto3,oneof" json:"holder_name,omitempty"`
}

func (x *BankDetails) Reset() {
	*x = BankDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customers_getcustomerbyid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankDetails) ProtoMessage() {}

func (x *BankDetails) ProtoReflect() protoreflect.Message {
	mi := &file_customers_getcustomerbyid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankDetails.ProtoReflect.Descriptor instead.
func (*BankDetails) Descriptor() ([]byte, []int) {
	return file_customers_getcustomerbyid_proto_rawDescGZIP(), []int{3}
}

func (x *BankDetails) GetBankId() int32 {
	if x != nil && x.BankId != nil {
		return *x.BankId
	}
	return 0
}

func (x *BankDetails) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *BankDetails) GetAccountNumber() string {
	if x != nil && x.AccountNumber != nil {
		return *x.AccountNumber
	}
	return ""
}

func (x *BankDetails) GetIfscCode() string {
	if x != nil && x.IfscCode != nil {
		return *x.IfscCode
	}
	return ""
}

func (x *BankDetails) GetHolderName() string {
	if x != nil && x.HolderName != nil {
		return *x.HolderName
	}
	return ""
}

var File_customers_getcustomerbyid_proto protoreflect.FileDescriptor

var file_customers_getcustomerbyid_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x16,
	0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdb, 0x26, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x03, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x61,
	0x64, 0x68, 0x61, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x61,
	0x61, 0x64, 0x68, 0x61, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x03, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x07, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x62, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d,
	0x52, 0x10, 0x62, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0f, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x0b, 0x6c,
	0x6f, 0x63, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6e,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x13, 0x52, 0x0a, 0x74, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6e, 0x75,
	0x72, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x54,
	0x65, 0x6e, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x54, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x72, 0x6f, 0x69, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x48, 0x17, 0x52, 0x03, 0x72, 0x6f, 0x69,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x48, 0x18, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52,
	0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x1d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x0d, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x1f, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x20, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x21, 0x52, 0x10, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x61, 0x64, 0x68,
	0x61, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22,
	0x52, 0x0b, 0x61, 0x61, 0x64, 0x68, 0x61, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x63, 0x72, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52,
	0x03, 0x63, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x67, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x05, 0x67, 0x73, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x26, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x27, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x02, 0x48, 0x28, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52,
	0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x2b, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2d, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65,
	0x74, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x2e, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x2f, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x30, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x31, 0x52, 0x0a, 0x73, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61,
	0x6c, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x32, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6b, 0x79, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x07, 0x6b, 0x79, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x48, 0x35, 0x52, 0x07, 0x65, 0x6d, 0x69, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x48, 0x36, 0x52, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x64, 0x6f, 0x62, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x37, 0x52, 0x0a, 0x64, 0x6f, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6e, 0x73, 0x64, 0x6c, 0x5f, 0x64, 0x6f, 0x62,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x48, 0x38,
	0x52, 0x0e, 0x6e, 0x73, 0x64, 0x6c, 0x44, 0x6f, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x6b, 0x79, 0x63, 0x5f, 0x64, 0x6f, 0x62, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x39, 0x52, 0x07, 0x6f, 0x6b, 0x79, 0x63, 0x44, 0x6f, 0x62,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x6f, 0x62, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3a, 0x52, 0x0b, 0x64, 0x6f, 0x62,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x3b, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x73, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x3c, 0x52, 0x07, 0x68, 0x61, 0x73, 0x49, 0x6d, 0x70, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3d, 0x52, 0x0f, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x3e, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x3f, 0x52, 0x07, 0x74, 0x78, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x63, 0x70, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x02, 0x48, 0x40, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x4c, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x6e, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6e, 0x65, 0x77, 0x53, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x6f, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x5b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67,
	0x65, 0x74, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x67,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x76, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x5c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x62, 0x79, 0x69, 0x64, 0x2e, 0x67, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46,
	0x0a, 0x18, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x70, 0x61, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x61, 0x64, 0x68, 0x61, 0x61, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x69, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f,
	0x63, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x6e, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x72, 0x6f, 0x69, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x61, 0x64,
	0x68, 0x61, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x72,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x67, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x69, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x62, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6e, 0x73, 0x64, 0x6c, 0x5f, 0x64, 0x6f, 0x62, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6b, 0x79, 0x63, 0x5f, 0x64, 0x6f, 0x62,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x6f, 0x62, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xea, 0x02, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x4e, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6e, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x64,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x69, 0x66, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x69, 0x66, 0x73, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x66, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_customers_getcustomerbyid_proto_rawDescOnce sync.Once
	file_customers_getcustomerbyid_proto_rawDescData = file_customers_getcustomerbyid_proto_rawDesc
)

func file_customers_getcustomerbyid_proto_rawDescGZIP() []byte {
	file_customers_getcustomerbyid_proto_rawDescOnce.Do(func() {
		file_customers_getcustomerbyid_proto_rawDescData = protoimpl.X.CompressGZIP(file_customers_getcustomerbyid_proto_rawDescData)
	})
	return file_customers_getcustomerbyid_proto_rawDescData
}

var file_customers_getcustomerbyid_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_customers_getcustomerbyid_proto_goTypes = []interface{}{
	(*GetCustomerByIdRequest)(nil),  // 0: customers.getcustomerbyid.getCustomerByIdRequest
	(*GetCustomerByIdResponse)(nil), // 1: customers.getcustomerbyid.getCustomerByIdResponse
	(*CustomerAddress)(nil),         // 2: customers.getcustomerbyid.customerAddress
	(*BankDetails)(nil),             // 3: customers.getcustomerbyid.BankDetails
	nil,                             // 4: customers.getcustomerbyid.getCustomerByIdResponse.BannerSequenceEntry
	nil,                             // 5: customers.getcustomerbyid.getCustomerByIdResponse.BannerJourneyStatusEntry
	nil,                             // 6: customers.getcustomerbyid.getCustomerByIdResponse.BannerLeadStatusEntry
}
var file_customers_getcustomerbyid_proto_depIdxs = []int32{
	3, // 0: customers.getcustomerbyid.getCustomerByIdResponse.bank_details:type_name -> customers.getcustomerbyid.BankDetails
	2, // 1: customers.getcustomerbyid.getCustomerByIdResponse.office_addr:type_name -> customers.getcustomerbyid.customerAddress
	2, // 2: customers.getcustomerbyid.getCustomerByIdResponse.per_addr:type_name -> customers.getcustomerbyid.customerAddress
	2, // 3: customers.getcustomerbyid.getCustomerByIdResponse.res_addr:type_name -> customers.getcustomerbyid.customerAddress
	4, // 4: customers.getcustomerbyid.getCustomerByIdResponse.banner_sequence:type_name -> customers.getcustomerbyid.getCustomerByIdResponse.BannerSequenceEntry
	5, // 5: customers.getcustomerbyid.getCustomerByIdResponse.banner_journey_status:type_name -> customers.getcustomerbyid.getCustomerByIdResponse.BannerJourneyStatusEntry
	6, // 6: customers.getcustomerbyid.getCustomerByIdResponse.banner_lead_status:type_name -> customers.getcustomerbyid.getCustomerByIdResponse.BannerLeadStatusEntry
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_customers_getcustomerbyid_proto_init() }
func file_customers_getcustomerbyid_proto_init() {
	if File_customers_getcustomerbyid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_customers_getcustomerbyid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customers_getcustomerbyid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customers_getcustomerbyid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customers_getcustomerbyid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_customers_getcustomerbyid_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_customers_getcustomerbyid_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_customers_getcustomerbyid_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_customers_getcustomerbyid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_customers_getcustomerbyid_proto_goTypes,
		DependencyIndexes: file_customers_getcustomerbyid_proto_depIdxs,
		MessageInfos:      file_customers_getcustomerbyid_proto_msgTypes,
	}.Build()
	File_customers_getcustomerbyid_proto = out.File
	file_customers_getcustomerbyid_proto_rawDesc = nil
	file_customers_getcustomerbyid_proto_goTypes = nil
	file_customers_getcustomerbyid_proto_depIdxs = nil
}
