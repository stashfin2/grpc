// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: eqxcustomer.proto

package stashfin_com

import (
	context "context"
	eqxcustomers "github.com/stashfin2/grpc/stashfin.com/eqxcustomers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EqxcustomersClient is the client API for Eqxcustomers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EqxcustomersClient interface {
	SendOtp(ctx context.Context, in *eqxcustomers.SendOtpRequest, opts ...grpc.CallOption) (*eqxcustomers.SendOtpResponse, error)
	VerifyOtp(ctx context.Context, in *eqxcustomers.VerifyOtpReqeust, opts ...grpc.CallOption) (*eqxcustomers.VerifyOtpResponse, error)
	GetUserById(ctx context.Context, in *eqxcustomers.GetCustomerByIdRequest, opts ...grpc.CallOption) (*eqxcustomers.GetCustomerByIdResponse, error)
	GetDashboard(ctx context.Context, in *eqxcustomers.GetDashboardRequest, opts ...grpc.CallOption) (*eqxcustomers.GetDashboardResponse, error)
	GetDashboardMainCard(ctx context.Context, in *eqxcustomers.GetDashboardMainCardRequest, opts ...grpc.CallOption) (*eqxcustomers.GetDashboardMainCardResponse, error)
	UpdatePushId(ctx context.Context, in *eqxcustomers.UpdatePushIdRequest, opts ...grpc.CallOption) (*eqxcustomers.UpdatePushIdResponse, error)
	Getnotifications(ctx context.Context, in *eqxcustomers.GetNotificationsRequest, opts ...grpc.CallOption) (*eqxcustomers.GetNotificationsResponse, error)
	UpdateNotifications(ctx context.Context, in *eqxcustomers.UpdateNotificationRequest, opts ...grpc.CallOption) (*eqxcustomers.UpdateNotificationResponse, error)
	VerifyToken(ctx context.Context, in *eqxcustomers.VerifyTokenRequest, opts ...grpc.CallOption) (*eqxcustomers.VerifyTokenResponse, error)
	GetTokens(ctx context.Context, in *eqxcustomers.GetTokensRequest, opts ...grpc.CallOption) (*eqxcustomers.GetTokensResponse, error)
	GetCustomerByMobile(ctx context.Context, in *eqxcustomers.GetCustomerByMobileRequest, opts ...grpc.CallOption) (*eqxcustomers.GetCustomerByMobileResponse, error)
}

type eqxcustomersClient struct {
	cc grpc.ClientConnInterface
}

func NewEqxcustomersClient(cc grpc.ClientConnInterface) EqxcustomersClient {
	return &eqxcustomersClient{cc}
}

func (c *eqxcustomersClient) SendOtp(ctx context.Context, in *eqxcustomers.SendOtpRequest, opts ...grpc.CallOption) (*eqxcustomers.SendOtpResponse, error) {
	out := new(eqxcustomers.SendOtpResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/sendOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) VerifyOtp(ctx context.Context, in *eqxcustomers.VerifyOtpReqeust, opts ...grpc.CallOption) (*eqxcustomers.VerifyOtpResponse, error) {
	out := new(eqxcustomers.VerifyOtpResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/verifyOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) GetUserById(ctx context.Context, in *eqxcustomers.GetCustomerByIdRequest, opts ...grpc.CallOption) (*eqxcustomers.GetCustomerByIdResponse, error) {
	out := new(eqxcustomers.GetCustomerByIdResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/getUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) GetDashboard(ctx context.Context, in *eqxcustomers.GetDashboardRequest, opts ...grpc.CallOption) (*eqxcustomers.GetDashboardResponse, error) {
	out := new(eqxcustomers.GetDashboardResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/getDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) GetDashboardMainCard(ctx context.Context, in *eqxcustomers.GetDashboardMainCardRequest, opts ...grpc.CallOption) (*eqxcustomers.GetDashboardMainCardResponse, error) {
	out := new(eqxcustomers.GetDashboardMainCardResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/getDashboardMainCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) UpdatePushId(ctx context.Context, in *eqxcustomers.UpdatePushIdRequest, opts ...grpc.CallOption) (*eqxcustomers.UpdatePushIdResponse, error) {
	out := new(eqxcustomers.UpdatePushIdResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/updatePushId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) Getnotifications(ctx context.Context, in *eqxcustomers.GetNotificationsRequest, opts ...grpc.CallOption) (*eqxcustomers.GetNotificationsResponse, error) {
	out := new(eqxcustomers.GetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/getnotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) UpdateNotifications(ctx context.Context, in *eqxcustomers.UpdateNotificationRequest, opts ...grpc.CallOption) (*eqxcustomers.UpdateNotificationResponse, error) {
	out := new(eqxcustomers.UpdateNotificationResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/updateNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) VerifyToken(ctx context.Context, in *eqxcustomers.VerifyTokenRequest, opts ...grpc.CallOption) (*eqxcustomers.VerifyTokenResponse, error) {
	out := new(eqxcustomers.VerifyTokenResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) GetTokens(ctx context.Context, in *eqxcustomers.GetTokensRequest, opts ...grpc.CallOption) (*eqxcustomers.GetTokensResponse, error) {
	out := new(eqxcustomers.GetTokensResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/getTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eqxcustomersClient) GetCustomerByMobile(ctx context.Context, in *eqxcustomers.GetCustomerByMobileRequest, opts ...grpc.CallOption) (*eqxcustomers.GetCustomerByMobileResponse, error) {
	out := new(eqxcustomers.GetCustomerByMobileResponse)
	err := c.cc.Invoke(ctx, "/service.eqxcustomers/getCustomerByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EqxcustomersServer is the server API for Eqxcustomers service.
// All implementations must embed UnimplementedEqxcustomersServer
// for forward compatibility
type EqxcustomersServer interface {
	SendOtp(context.Context, *eqxcustomers.SendOtpRequest) (*eqxcustomers.SendOtpResponse, error)
	VerifyOtp(context.Context, *eqxcustomers.VerifyOtpReqeust) (*eqxcustomers.VerifyOtpResponse, error)
	GetUserById(context.Context, *eqxcustomers.GetCustomerByIdRequest) (*eqxcustomers.GetCustomerByIdResponse, error)
	GetDashboard(context.Context, *eqxcustomers.GetDashboardRequest) (*eqxcustomers.GetDashboardResponse, error)
	GetDashboardMainCard(context.Context, *eqxcustomers.GetDashboardMainCardRequest) (*eqxcustomers.GetDashboardMainCardResponse, error)
	UpdatePushId(context.Context, *eqxcustomers.UpdatePushIdRequest) (*eqxcustomers.UpdatePushIdResponse, error)
	Getnotifications(context.Context, *eqxcustomers.GetNotificationsRequest) (*eqxcustomers.GetNotificationsResponse, error)
	UpdateNotifications(context.Context, *eqxcustomers.UpdateNotificationRequest) (*eqxcustomers.UpdateNotificationResponse, error)
	VerifyToken(context.Context, *eqxcustomers.VerifyTokenRequest) (*eqxcustomers.VerifyTokenResponse, error)
	GetTokens(context.Context, *eqxcustomers.GetTokensRequest) (*eqxcustomers.GetTokensResponse, error)
	GetCustomerByMobile(context.Context, *eqxcustomers.GetCustomerByMobileRequest) (*eqxcustomers.GetCustomerByMobileResponse, error)
	mustEmbedUnimplementedEqxcustomersServer()
}

// UnimplementedEqxcustomersServer must be embedded to have forward compatible implementations.
type UnimplementedEqxcustomersServer struct {
}

func (UnimplementedEqxcustomersServer) SendOtp(context.Context, *eqxcustomers.SendOtpRequest) (*eqxcustomers.SendOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtp not implemented")
}
func (UnimplementedEqxcustomersServer) VerifyOtp(context.Context, *eqxcustomers.VerifyOtpReqeust) (*eqxcustomers.VerifyOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtp not implemented")
}
func (UnimplementedEqxcustomersServer) GetUserById(context.Context, *eqxcustomers.GetCustomerByIdRequest) (*eqxcustomers.GetCustomerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedEqxcustomersServer) GetDashboard(context.Context, *eqxcustomers.GetDashboardRequest) (*eqxcustomers.GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedEqxcustomersServer) GetDashboardMainCard(context.Context, *eqxcustomers.GetDashboardMainCardRequest) (*eqxcustomers.GetDashboardMainCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardMainCard not implemented")
}
func (UnimplementedEqxcustomersServer) UpdatePushId(context.Context, *eqxcustomers.UpdatePushIdRequest) (*eqxcustomers.UpdatePushIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushId not implemented")
}
func (UnimplementedEqxcustomersServer) Getnotifications(context.Context, *eqxcustomers.GetNotificationsRequest) (*eqxcustomers.GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getnotifications not implemented")
}
func (UnimplementedEqxcustomersServer) UpdateNotifications(context.Context, *eqxcustomers.UpdateNotificationRequest) (*eqxcustomers.UpdateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifications not implemented")
}
func (UnimplementedEqxcustomersServer) VerifyToken(context.Context, *eqxcustomers.VerifyTokenRequest) (*eqxcustomers.VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedEqxcustomersServer) GetTokens(context.Context, *eqxcustomers.GetTokensRequest) (*eqxcustomers.GetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedEqxcustomersServer) GetCustomerByMobile(context.Context, *eqxcustomers.GetCustomerByMobileRequest) (*eqxcustomers.GetCustomerByMobileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByMobile not implemented")
}
func (UnimplementedEqxcustomersServer) mustEmbedUnimplementedEqxcustomersServer() {}

// UnsafeEqxcustomersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EqxcustomersServer will
// result in compilation errors.
type UnsafeEqxcustomersServer interface {
	mustEmbedUnimplementedEqxcustomersServer()
}

func RegisterEqxcustomersServer(s grpc.ServiceRegistrar, srv EqxcustomersServer) {
	s.RegisterService(&Eqxcustomers_ServiceDesc, srv)
}

func _Eqxcustomers_SendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.SendOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).SendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/sendOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).SendOtp(ctx, req.(*eqxcustomers.SendOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_VerifyOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.VerifyOtpReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).VerifyOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/verifyOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).VerifyOtp(ctx, req.(*eqxcustomers.VerifyOtpReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.GetCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/getUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).GetUserById(ctx, req.(*eqxcustomers.GetCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/getDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).GetDashboard(ctx, req.(*eqxcustomers.GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_GetDashboardMainCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.GetDashboardMainCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).GetDashboardMainCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/getDashboardMainCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).GetDashboardMainCard(ctx, req.(*eqxcustomers.GetDashboardMainCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_UpdatePushId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.UpdatePushIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).UpdatePushId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/updatePushId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).UpdatePushId(ctx, req.(*eqxcustomers.UpdatePushIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_Getnotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).Getnotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/getnotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).Getnotifications(ctx, req.(*eqxcustomers.GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_UpdateNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.UpdateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).UpdateNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/updateNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).UpdateNotifications(ctx, req.(*eqxcustomers.UpdateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).VerifyToken(ctx, req.(*eqxcustomers.VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.GetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/getTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).GetTokens(ctx, req.(*eqxcustomers.GetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eqxcustomers_GetCustomerByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(eqxcustomers.GetCustomerByMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EqxcustomersServer).GetCustomerByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.eqxcustomers/getCustomerByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EqxcustomersServer).GetCustomerByMobile(ctx, req.(*eqxcustomers.GetCustomerByMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Eqxcustomers_ServiceDesc is the grpc.ServiceDesc for Eqxcustomers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eqxcustomers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.eqxcustomers",
	HandlerType: (*EqxcustomersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendOtp",
			Handler:    _Eqxcustomers_SendOtp_Handler,
		},
		{
			MethodName: "verifyOtp",
			Handler:    _Eqxcustomers_VerifyOtp_Handler,
		},
		{
			MethodName: "getUserById",
			Handler:    _Eqxcustomers_GetUserById_Handler,
		},
		{
			MethodName: "getDashboard",
			Handler:    _Eqxcustomers_GetDashboard_Handler,
		},
		{
			MethodName: "getDashboardMainCard",
			Handler:    _Eqxcustomers_GetDashboardMainCard_Handler,
		},
		{
			MethodName: "updatePushId",
			Handler:    _Eqxcustomers_UpdatePushId_Handler,
		},
		{
			MethodName: "getnotifications",
			Handler:    _Eqxcustomers_Getnotifications_Handler,
		},
		{
			MethodName: "updateNotifications",
			Handler:    _Eqxcustomers_UpdateNotifications_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _Eqxcustomers_VerifyToken_Handler,
		},
		{
			MethodName: "getTokens",
			Handler:    _Eqxcustomers_GetTokens_Handler,
		},
		{
			MethodName: "getCustomerByMobile",
			Handler:    _Eqxcustomers_GetCustomerByMobile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eqxcustomer.proto",
}
