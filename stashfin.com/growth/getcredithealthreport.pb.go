// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.6
// source: growth/getcredithealthreport.proto

package growth

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Credithealthreportrequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshReport bool `protobuf:"varint,1,opt,name=refresh_report,json=refreshReport,proto3" json:"refresh_report,omitempty"`
}

func (x *Credithealthreportrequest) Reset() {
	*x = Credithealthreportrequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_growth_getcredithealthreport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credithealthreportrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credithealthreportrequest) ProtoMessage() {}

func (x *Credithealthreportrequest) ProtoReflect() protoreflect.Message {
	mi := &file_growth_getcredithealthreport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credithealthreportrequest.ProtoReflect.Descriptor instead.
func (*Credithealthreportrequest) Descriptor() ([]byte, []int) {
	return file_growth_getcredithealthreport_proto_rawDescGZIP(), []int{0}
}

func (x *Credithealthreportrequest) GetRefreshReport() bool {
	if x != nil {
		return x.RefreshReport
	}
	return false
}

type Chrdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanTypeText          string                  `protobuf:"bytes,1,opt,name=plan_type_text,json=planTypeText,proto3" json:"plan_type_text,omitempty"`
	CibilScore            int32                   `protobuf:"varint,2,opt,name=cibil_score,json=cibilScore,proto3" json:"cibil_score,omitempty"`
	CibilStateText        string                  `protobuf:"bytes,3,opt,name=cibil_state_text,json=cibilStateText,proto3" json:"cibil_state_text,omitempty"`
	CibilStateTextColor   string                  `protobuf:"bytes,4,opt,name=cibil_state_text_color,json=cibilStateTextColor,proto3" json:"cibil_state_text_color,omitempty"`
	ReportUrl             string                  `protobuf:"bytes,5,opt,name=report_url,json=reportUrl,proto3" json:"report_url,omitempty"`
	RefreshDate           string                  `protobuf:"bytes,6,opt,name=refresh_date,json=refreshDate,proto3" json:"refresh_date,omitempty"`
	RefreshEnabled        int32                   `protobuf:"varint,7,opt,name=refresh_enabled,json=refreshEnabled,proto3" json:"refresh_enabled,omitempty"`
	PlanSubscriptionId    int32                   `protobuf:"varint,8,opt,name=plan_subscription_id,json=planSubscriptionId,proto3" json:"plan_subscription_id,omitempty"`
	RecommendedPlan       *ChrdataRecommendedplan `protobuf:"bytes,9,opt,name=recommended_plan,json=recommendedPlan,proto3" json:"recommended_plan,omitempty"`
	UserState             string                  `protobuf:"bytes,10,opt,name=user_state,json=userState,proto3" json:"user_state,omitempty"`
	ReferAndEarn          *ChrdataReferandearn    `protobuf:"bytes,11,opt,name=refer_and_earn,json=referAndEarn,proto3" json:"refer_and_earn,omitempty"`
	ReportRefreshCount    int32                   `protobuf:"varint,12,opt,name=report_refresh_count,json=reportRefreshCount,proto3" json:"report_refresh_count,omitempty"`
	RecommendedPlanStatus bool                    `protobuf:"varint,13,opt,name=recommended_plan_status,json=recommendedPlanStatus,proto3" json:"recommended_plan_status,omitempty"`
}

func (x *Chrdata) Reset() {
	*x = Chrdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_growth_getcredithealthreport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chrdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chrdata) ProtoMessage() {}

func (x *Chrdata) ProtoReflect() protoreflect.Message {
	mi := &file_growth_getcredithealthreport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chrdata.ProtoReflect.Descriptor instead.
func (*Chrdata) Descriptor() ([]byte, []int) {
	return file_growth_getcredithealthreport_proto_rawDescGZIP(), []int{1}
}

func (x *Chrdata) GetPlanTypeText() string {
	if x != nil {
		return x.PlanTypeText
	}
	return ""
}

func (x *Chrdata) GetCibilScore() int32 {
	if x != nil {
		return x.CibilScore
	}
	return 0
}

func (x *Chrdata) GetCibilStateText() string {
	if x != nil {
		return x.CibilStateText
	}
	return ""
}

func (x *Chrdata) GetCibilStateTextColor() string {
	if x != nil {
		return x.CibilStateTextColor
	}
	return ""
}

func (x *Chrdata) GetReportUrl() string {
	if x != nil {
		return x.ReportUrl
	}
	return ""
}

func (x *Chrdata) GetRefreshDate() string {
	if x != nil {
		return x.RefreshDate
	}
	return ""
}

func (x *Chrdata) GetRefreshEnabled() int32 {
	if x != nil {
		return x.RefreshEnabled
	}
	return 0
}

func (x *Chrdata) GetPlanSubscriptionId() int32 {
	if x != nil {
		return x.PlanSubscriptionId
	}
	return 0
}

func (x *Chrdata) GetRecommendedPlan() *ChrdataRecommendedplan {
	if x != nil {
		return x.RecommendedPlan
	}
	return nil
}

func (x *Chrdata) GetUserState() string {
	if x != nil {
		return x.UserState
	}
	return ""
}

func (x *Chrdata) GetReferAndEarn() *ChrdataReferandearn {
	if x != nil {
		return x.ReferAndEarn
	}
	return nil
}

func (x *Chrdata) GetReportRefreshCount() int32 {
	if x != nil {
		return x.ReportRefreshCount
	}
	return 0
}

func (x *Chrdata) GetRecommendedPlanStatus() bool {
	if x != nil {
		return x.RecommendedPlanStatus
	}
	return false
}

type Chrdatawrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChrData *Chrdata `protobuf:"bytes,1,opt,name=chr_data,json=chrData,proto3" json:"chr_data,omitempty"`
}

func (x *Chrdatawrapper) Reset() {
	*x = Chrdatawrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_growth_getcredithealthreport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chrdatawrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chrdatawrapper) ProtoMessage() {}

func (x *Chrdatawrapper) ProtoReflect() protoreflect.Message {
	mi := &file_growth_getcredithealthreport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chrdatawrapper.ProtoReflect.Descriptor instead.
func (*Chrdatawrapper) Descriptor() ([]byte, []int) {
	return file_growth_getcredithealthreport_proto_rawDescGZIP(), []int{2}
}

func (x *Chrdatawrapper) GetChrData() *Chrdata {
	if x != nil {
		return x.ChrData
	}
	return nil
}

type Credithealthreportresponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StatusCode int32           `protobuf:"varint,2,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Data       *Chrdatawrapper `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Message    string          `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Credithealthreportresponse) Reset() {
	*x = Credithealthreportresponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_growth_getcredithealthreport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credithealthreportresponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credithealthreportresponse) ProtoMessage() {}

func (x *Credithealthreportresponse) ProtoReflect() protoreflect.Message {
	mi := &file_growth_getcredithealthreport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credithealthreportresponse.ProtoReflect.Descriptor instead.
func (*Credithealthreportresponse) Descriptor() ([]byte, []int) {
	return file_growth_getcredithealthreport_proto_rawDescGZIP(), []int{3}
}

func (x *Credithealthreportresponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Credithealthreportresponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Credithealthreportresponse) GetData() *Chrdatawrapper {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Credithealthreportresponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChrdataRecommendedplan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label    string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Benefits []string `protobuf:"bytes,2,rep,name=benefits,proto3" json:"benefits,omitempty"`
	CtaText  string   `protobuf:"bytes,3,opt,name=cta_text,json=ctaText,proto3" json:"cta_text,omitempty"`
	Amount   float64  `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	PlanId   int32    `protobuf:"varint,5,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (x *ChrdataRecommendedplan) Reset() {
	*x = ChrdataRecommendedplan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_growth_getcredithealthreport_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChrdataRecommendedplan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChrdataRecommendedplan) ProtoMessage() {}

func (x *ChrdataRecommendedplan) ProtoReflect() protoreflect.Message {
	mi := &file_growth_getcredithealthreport_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChrdataRecommendedplan.ProtoReflect.Descriptor instead.
func (*ChrdataRecommendedplan) Descriptor() ([]byte, []int) {
	return file_growth_getcredithealthreport_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ChrdataRecommendedplan) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ChrdataRecommendedplan) GetBenefits() []string {
	if x != nil {
		return x.Benefits
	}
	return nil
}

func (x *ChrdataRecommendedplan) GetCtaText() string {
	if x != nil {
		return x.CtaText
	}
	return ""
}

func (x *ChrdataRecommendedplan) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ChrdataRecommendedplan) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type ChrdataReferandearn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralAmount int32 `protobuf:"varint,1,opt,name=referral_amount,json=referralAmount,proto3" json:"referral_amount,omitempty"`
}

func (x *ChrdataReferandearn) Reset() {
	*x = ChrdataReferandearn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_growth_getcredithealthreport_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChrdataReferandearn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChrdataReferandearn) ProtoMessage() {}

func (x *ChrdataReferandearn) ProtoReflect() protoreflect.Message {
	mi := &file_growth_getcredithealthreport_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChrdataReferandearn.ProtoReflect.Descriptor instead.
func (*ChrdataReferandearn) Descriptor() ([]byte, []int) {
	return file_growth_getcredithealthreport_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ChrdataReferandearn) GetReferralAmount() int32 {
	if x != nil {
		return x.ReferralAmount
	}
	return 0
}

var File_growth_getcredithealthreport_proto protoreflect.FileDescriptor

var file_growth_getcredithealthreport_proto_rawDesc = []byte{
	0x0a, 0x22, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x2e, 0x67, 0x65, 0x74,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x42, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xdc, 0x06, 0x0a, 0x07, 0x63, 0x68, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x69, 0x62, 0x69,
	0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x69, 0x62, 0x69, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x69, 0x62,
	0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63,
	0x68, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x68,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x61,
	0x72, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x45, 0x61, 0x72, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x74, 0x61, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0e, 0x63, 0x68, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x68, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x63, 0x68, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x2e, 0x67, 0x65, 0x74, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x68,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_growth_getcredithealthreport_proto_rawDescOnce sync.Once
	file_growth_getcredithealthreport_proto_rawDescData = file_growth_getcredithealthreport_proto_rawDesc
)

func file_growth_getcredithealthreport_proto_rawDescGZIP() []byte {
	file_growth_getcredithealthreport_proto_rawDescOnce.Do(func() {
		file_growth_getcredithealthreport_proto_rawDescData = protoimpl.X.CompressGZIP(file_growth_getcredithealthreport_proto_rawDescData)
	})
	return file_growth_getcredithealthreport_proto_rawDescData
}

var file_growth_getcredithealthreport_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_growth_getcredithealthreport_proto_goTypes = []interface{}{
	(*Credithealthreportrequest)(nil),  // 0: growth.getcredithealthreport.credithealthreportrequest
	(*Chrdata)(nil),                    // 1: growth.getcredithealthreport.chrdata
	(*Chrdatawrapper)(nil),             // 2: growth.getcredithealthreport.chrdatawrapper
	(*Credithealthreportresponse)(nil), // 3: growth.getcredithealthreport.credithealthreportresponse
	(*ChrdataRecommendedplan)(nil),     // 4: growth.getcredithealthreport.chrdata.recommendedplan
	(*ChrdataReferandearn)(nil),        // 5: growth.getcredithealthreport.chrdata.referandearn
}
var file_growth_getcredithealthreport_proto_depIdxs = []int32{
	4, // 0: growth.getcredithealthreport.chrdata.recommended_plan:type_name -> growth.getcredithealthreport.chrdata.recommendedplan
	5, // 1: growth.getcredithealthreport.chrdata.refer_and_earn:type_name -> growth.getcredithealthreport.chrdata.referandearn
	1, // 2: growth.getcredithealthreport.chrdatawrapper.chr_data:type_name -> growth.getcredithealthreport.chrdata
	2, // 3: growth.getcredithealthreport.credithealthreportresponse.data:type_name -> growth.getcredithealthreport.chrdatawrapper
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_growth_getcredithealthreport_proto_init() }
func file_growth_getcredithealthreport_proto_init() {
	if File_growth_getcredithealthreport_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_growth_getcredithealthreport_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credithealthreportrequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_growth_getcredithealthreport_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chrdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_growth_getcredithealthreport_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chrdatawrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_growth_getcredithealthreport_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credithealthreportresponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_growth_getcredithealthreport_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChrdataRecommendedplan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_growth_getcredithealthreport_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChrdataReferandearn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_growth_getcredithealthreport_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_growth_getcredithealthreport_proto_goTypes,
		DependencyIndexes: file_growth_getcredithealthreport_proto_depIdxs,
		MessageInfos:      file_growth_getcredithealthreport_proto_msgTypes,
	}.Build()
	File_growth_getcredithealthreport_proto = out.File
	file_growth_getcredithealthreport_proto_rawDesc = nil
	file_growth_getcredithealthreport_proto_goTypes = nil
	file_growth_getcredithealthreport_proto_depIdxs = nil
}
